
/Users/RickLiu/Desktop/WashU/Junior/CSE222Sâ€“IoT/relax/relax/target/1.5.2/argon/relax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003744  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7760  000d7760  00007760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7768  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e2b4  000d776c  0001e2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c4  2003e330  2003e330  0002e330  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d77e4  000d77e4  000277e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d780c  000d780c  0002780c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000dfddf  00000000  00000000  00027810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011313  00000000  00000000  001075ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001f574  00000000  00000000  00118902  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000025a8  00000000  00000000  00137e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004898  00000000  00000000  0013a41e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00034145  00000000  00000000  0013ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002814e  00000000  00000000  00172dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010585e  00000000  00000000  0019af49  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d30c  00000000  00000000  002a07a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f915 	bl	d725c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f91a 	bl	d7272 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2b4 	.word	0x2003e2b4
   d4048:	000d776c 	.word	0x000d776c
   d404c:	2003e32c 	.word	0x2003e32c
   d4050:	2003e330 	.word	0x2003e330
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ff0f 	bl	d5e7c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7760 	.word	0x000d7760
   d4080:	000d7728 	.word	0x000d7728

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b88a 	b.w	d419c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f949 	bl	d4320 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 beb5 	b.w	d5e00 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc39 	b.w	d490c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc3f 	b.w	d491c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc3d 	b.w	d491c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z11trackSwitch6String>:

  Particle.publish("emg", data, 60, PRIVATE);
  return 0;
}
int trackSwitch(String arg)
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4905      	ldr	r1, [pc, #20]	; (d40cc <_Z11trackSwitch6String+0x18>)
   d40b8:	f001 fca7 	bl	d5a0a <_ZNK6String6equalsEPKc>
   d40bc:	4b04      	ldr	r3, [pc, #16]	; (d40d0 <_Z11trackSwitch6String+0x1c>)
  if (arg == "true")
   d40be:	b110      	cbz	r0, d40c6 <_Z11trackSwitch6String+0x12>
  {
    track = true;
   d40c0:	2201      	movs	r2, #1
   d40c2:	701a      	strb	r2, [r3, #0]
   d40c4:	e000      	b.n	d40c8 <_Z11trackSwitch6String+0x14>
  }
  else
  {
    track = false;
   d40c6:	7018      	strb	r0, [r3, #0]
  // TODO: Adjust variables to match your light's state variables
  // (NOTE: Be careful building the string.  C++ String operations often behave in
  //        counterintuitive ways when working with string literals (like "hi"))

  return 0;
}
   d40c8:	2000      	movs	r0, #0
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	000d7354 	.word	0x000d7354
   d40d0:	2003e3c6 	.word	0x2003e3c6

000d40d4 <_Z12publishState6String>:
  count += 1;
}

//Particle
int publishState(String arg)
{
   d40d4:	b510      	push	{r4, lr}
   d40d6:	b08a      	sub	sp, #40	; 0x28
  //   Note that each property has double quotes!

  // TODO: Adjust variables to match your light's state variables
  // (NOTE: Be careful building the string.  C++ String operations often behave in
  //        counterintuitive ways when working with string literals (like "hi"))
  String data = "{";
   d40d8:	4927      	ldr	r1, [pc, #156]	; (d4178 <_Z12publishState6String+0xa4>)
   d40da:	a802      	add	r0, sp, #8
   d40dc:	f001 fc09 	bl	d58f2 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d40e0:	4926      	ldr	r1, [pc, #152]	; (d417c <_Z12publishState6String+0xa8>)
   d40e2:	a802      	add	r0, sp, #8
   d40e4:	f001 fc71 	bl	d59ca <_ZN6String6concatEPKc>
  data += "\"averageVal\":\"";
  data += String(averageVal);
   d40e8:	4b25      	ldr	r3, [pc, #148]	; (d4180 <_Z12publishState6String+0xac>)
   d40ea:	2106      	movs	r1, #6
   d40ec:	ed93 0b00 	vldr	d0, [r3]
   d40f0:	a806      	add	r0, sp, #24
   d40f2:	f001 fc3c 	bl	d596e <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d40f6:	a906      	add	r1, sp, #24
   d40f8:	a802      	add	r0, sp, #8
   d40fa:	f001 fc62 	bl	d59c2 <_ZN6String6concatERKS_>
   d40fe:	a806      	add	r0, sp, #24
   d4100:	f001 fbb0 	bl	d5864 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4104:	491f      	ldr	r1, [pc, #124]	; (d4184 <_Z12publishState6String+0xb0>)
   d4106:	a802      	add	r0, sp, #8
   d4108:	f001 fc5f 	bl	d59ca <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
   d410c:	4b1e      	ldr	r3, [pc, #120]	; (d4188 <_Z12publishState6String+0xb4>)
   d410e:	a802      	add	r0, sp, #8
   d4110:	7819      	ldrb	r1, [r3, #0]
   d4112:	f001 fc69 	bl	d59e8 <_ZN6String6concatEi>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4116:	491d      	ldr	r1, [pc, #116]	; (d418c <_Z12publishState6String+0xb8>)
   d4118:	a802      	add	r0, sp, #8
   d411a:	f001 fc56 	bl	d59ca <_ZN6String6concatEPKc>
  data += "\", \"tensed\":\"";
  data += tensed;
  data += "\"}";

  Serial.println("Publishing:");
   d411e:	f001 fd9d 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4122:	491b      	ldr	r1, [pc, #108]	; (d4190 <_Z12publishState6String+0xbc>)
   d4124:	f001 fa21 	bl	d556a <_ZN5Print7printlnEPKc>
  Serial.println(data);
   d4128:	f001 fd98 	bl	d5c5c <_Z16_fetch_usbserialv>
   d412c:	9902      	ldr	r1, [sp, #8]
   d412e:	f001 fa1c 	bl	d556a <_ZN5Print7printlnEPKc>
   d4132:	4b18      	ldr	r3, [pc, #96]	; (d4194 <_Z12publishState6String+0xc0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4134:	9a02      	ldr	r2, [sp, #8]
   d4136:	781b      	ldrb	r3, [r3, #0]
   d4138:	f88d 3000 	strb.w	r3, [sp]
   d413c:	4916      	ldr	r1, [pc, #88]	; (d4198 <_Z12publishState6String+0xc4>)
   d413e:	233c      	movs	r3, #60	; 0x3c
   d4140:	a806      	add	r0, sp, #24
   d4142:	f000 fdfb 	bl	d4d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4146:	9c07      	ldr	r4, [sp, #28]
   d4148:	b17c      	cbz	r4, d416a <_Z12publishState6String+0x96>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d414a:	6863      	ldr	r3, [r4, #4]
   d414c:	3b01      	subs	r3, #1
   d414e:	6063      	str	r3, [r4, #4]
   d4150:	b95b      	cbnz	r3, d416a <_Z12publishState6String+0x96>
        {
          _M_dispose();
   d4152:	6823      	ldr	r3, [r4, #0]
   d4154:	4620      	mov	r0, r4
   d4156:	689b      	ldr	r3, [r3, #8]
   d4158:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d415a:	68a3      	ldr	r3, [r4, #8]
   d415c:	3b01      	subs	r3, #1
   d415e:	60a3      	str	r3, [r4, #8]
   d4160:	b91b      	cbnz	r3, d416a <_Z12publishState6String+0x96>
            _M_destroy();
   d4162:	6823      	ldr	r3, [r4, #0]
   d4164:	4620      	mov	r0, r4
   d4166:	68db      	ldr	r3, [r3, #12]
   d4168:	4798      	blx	r3
  //   Note that each property has double quotes!

  // TODO: Adjust variables to match your light's state variables
  // (NOTE: Be careful building the string.  C++ String operations often behave in
  //        counterintuitive ways when working with string literals (like "hi"))
  String data = "{";
   d416a:	a802      	add	r0, sp, #8
   d416c:	f001 fb7a 	bl	d5864 <_ZN6StringD1Ev>
  Serial.println("Publishing:");
  Serial.println(data);

  Particle.publish("emg", data, 60, PRIVATE);
  return 0;
}
   d4170:	2000      	movs	r0, #0
   d4172:	b00a      	add	sp, #40	; 0x28
   d4174:	bd10      	pop	{r4, pc}
   d4176:	bf00      	nop
   d4178:	000d7359 	.word	0x000d7359
   d417c:	000d735b 	.word	0x000d735b
   d4180:	2003e3a0 	.word	0x2003e3a0
   d4184:	000d736a 	.word	0x000d736a
   d4188:	2003e3c4 	.word	0x2003e3c4
   d418c:	000d7378 	.word	0x000d7378
   d4190:	000d737b 	.word	0x000d737b
   d4194:	2003e3a8 	.word	0x2003e3a8
   d4198:	000d7387 	.word	0x000d7387

000d419c <setup>:

String deviceID = "e00fce68058f85ccce40d570";
boolean tensed = false;

void setup()
{
   d419c:	b510      	push	{r4, lr}
  // initialize Serial communications at 9600 bps:
  Serial.begin(9600);
   d419e:	f001 fd5d 	bl	d5c5c <_Z16_fetch_usbserialv>
   d41a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a6:	f001 fd4d 	bl	d5c44 <_ZN9USBSerial5beginEl>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d41aa:	4c13      	ldr	r4, [pc, #76]	; (d41f8 <setup+0x5c>)
  pinMode(digitalOutPin, OUTPUT);   //Sets vibration motor as output
   d41ac:	2101      	movs	r1, #1
   d41ae:	2007      	movs	r0, #7
   d41b0:	f001 fec6 	bl	d5f40 <pinMode>
  digitalWrite(digitalOutPin, LOW); //No vibration at first
   d41b4:	2100      	movs	r1, #0
   d41b6:	2007      	movs	r0, #7
   d41b8:	f001 fed3 	bl	d5f62 <digitalWrite>
   d41bc:	4a0f      	ldr	r2, [pc, #60]	; (d41fc <setup+0x60>)
   d41be:	4910      	ldr	r1, [pc, #64]	; (d4200 <setup+0x64>)
   d41c0:	4620      	mov	r0, r4
   d41c2:	f000 fc9a 	bl	d4afa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d41c6:	4a0f      	ldr	r2, [pc, #60]	; (d4204 <setup+0x68>)
   d41c8:	490f      	ldr	r1, [pc, #60]	; (d4208 <setup+0x6c>)
   d41ca:	4620      	mov	r0, r4
   d41cc:	f000 fc95 	bl	d4afa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41d0:	2300      	movs	r3, #0
   d41d2:	2209      	movs	r2, #9
   d41d4:	490d      	ldr	r1, [pc, #52]	; (d420c <setup+0x70>)
   d41d6:	480e      	ldr	r0, [pc, #56]	; (d4210 <setup+0x74>)
   d41d8:	f000 fb20 	bl	d481c <spark_variable>
   d41dc:	2300      	movs	r3, #0
   d41de:	2201      	movs	r2, #1
   d41e0:	490c      	ldr	r1, [pc, #48]	; (d4214 <setup+0x78>)
   d41e2:	480d      	ldr	r0, [pc, #52]	; (d4218 <setup+0x7c>)
   d41e4:	f000 fb1a 	bl	d481c <spark_variable>
   d41e8:	2300      	movs	r3, #0
   d41ea:	2201      	movs	r2, #1
   d41ec:	490b      	ldr	r1, [pc, #44]	; (d421c <setup+0x80>)
   d41ee:	480c      	ldr	r0, [pc, #48]	; (d4220 <setup+0x84>)
  Particle.function("publishState", publishState);
  Particle.function("trackSwitch", trackSwitch);
  Particle.variable("averageVal", averageVal);
  Particle.variable("tensed", tensed);
  Particle.variable("track", track);
}
   d41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41f4:	f000 bb12 	b.w	d481c <spark_variable>
   d41f8:	000d4acf 	.word	0x000d4acf
   d41fc:	000d738b 	.word	0x000d738b
   d4200:	000d40d5 	.word	0x000d40d5
   d4204:	000d7398 	.word	0x000d7398
   d4208:	000d40b5 	.word	0x000d40b5
   d420c:	2003e3a0 	.word	0x2003e3a0
   d4210:	000d73a4 	.word	0x000d73a4
   d4214:	2003e3c4 	.word	0x2003e3c4
   d4218:	000d73af 	.word	0x000d73af
   d421c:	2003e3c6 	.word	0x2003e3c6
   d4220:	000d73b6 	.word	0x000d73b6

000d4224 <_Z7averagePdi>:
    publishStateNow = false;
  }
}
//Calculation functions
double average(double *inArray, int n)
{
   d4224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  long sum = 0;
  for (int i = 0; i < n; i++)
   d4228:	2400      	movs	r4, #0
   d422a:	4680      	mov	r8, r0
    publishStateNow = false;
  }
}
//Calculation functions
double average(double *inArray, int n)
{
   d422c:	460d      	mov	r5, r1
  long sum = 0;
   d422e:	4620      	mov	r0, r4
  for (int i = 0; i < n; i++)
   d4230:	42ac      	cmp	r4, r5
   d4232:	da0b      	bge.n	d424c <_Z7averagePdi+0x28>
  {
    sum += inArray[i];
   d4234:	e8f8 6702 	ldrd	r6, r7, [r8], #8
   d4238:	f002 faf4 	bl	d6824 <__aeabi_i2d>
   d423c:	4632      	mov	r2, r6
   d423e:	463b      	mov	r3, r7
   d4240:	f002 f9a4 	bl	d658c <__adddf3>
   d4244:	f002 fe04 	bl	d6e50 <__aeabi_d2iz>
}
//Calculation functions
double average(double *inArray, int n)
{
  long sum = 0;
  for (int i = 0; i < n; i++)
   d4248:	3401      	adds	r4, #1
   d424a:	e7f1      	b.n	d4230 <_Z7averagePdi+0xc>
  {
    sum += inArray[i];
  }
  return sum / n;
   d424c:	fb90 f0f5 	sdiv	r0, r0, r5
   d4250:	f002 fae8 	bl	d6824 <__aeabi_i2d>
}
   d4254:	ec41 0b10 	vmov	d0, r0, r1
   d4258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d425c <_Z6stdDevPdi>:
double stdDev(double *inArray, int n)
{
   d425c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4260:	4605      	mov	r5, r0
   d4262:	468a      	mov	sl, r1
  double mean = average(inArray, n);
   d4264:	f7ff ffde 	bl	d4224 <_Z7averagePdi>
  long sum = 0;
  for (int i = 0; i < n; i++)
   d4268:	2400      	movs	r4, #0
  return sum / n;
}
double stdDev(double *inArray, int n)
{
  double mean = average(inArray, n);
  long sum = 0;
   d426a:	4626      	mov	r6, r4
  for (int i = 0; i < n; i++)
   d426c:	4554      	cmp	r4, sl
   d426e:	da21      	bge.n	d42b4 <_Z6stdDevPdi+0x58>
  {
    sum += pow(inArray[i] - mean, 2);
   d4270:	ec53 2b10 	vmov	r2, r3, d0
   d4274:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   d4278:	ed8d 0b00 	vstr	d0, [sp]
   d427c:	f002 f984 	bl	d6588 <__aeabi_dsub>
   d4280:	4680      	mov	r8, r0
   d4282:	4630      	mov	r0, r6
   d4284:	4689      	mov	r9, r1
   d4286:	f002 facd 	bl	d6824 <__aeabi_i2d>
   d428a:	4642      	mov	r2, r8
   d428c:	4606      	mov	r6, r0
   d428e:	460f      	mov	r7, r1
   d4290:	464b      	mov	r3, r9
   d4292:	4640      	mov	r0, r8
   d4294:	4649      	mov	r1, r9
   d4296:	f002 fb2b 	bl	d68f0 <__aeabi_dmul>
   d429a:	4602      	mov	r2, r0
   d429c:	460b      	mov	r3, r1
   d429e:	4630      	mov	r0, r6
   d42a0:	4639      	mov	r1, r7
   d42a2:	f002 f973 	bl	d658c <__adddf3>
   d42a6:	f002 fdd3 	bl	d6e50 <__aeabi_d2iz>
}
double stdDev(double *inArray, int n)
{
  double mean = average(inArray, n);
  long sum = 0;
  for (int i = 0; i < n; i++)
   d42aa:	3401      	adds	r4, #1
  {
    sum += pow(inArray[i] - mean, 2);
   d42ac:	4606      	mov	r6, r0
}
double stdDev(double *inArray, int n)
{
  double mean = average(inArray, n);
  long sum = 0;
  for (int i = 0; i < n; i++)
   d42ae:	ed9d 0b00 	vldr	d0, [sp]
   d42b2:	e7db      	b.n	d426c <_Z6stdDevPdi+0x10>
  {
    sum += pow(inArray[i] - mean, 2);
  }
  return sqrt(sum / n);
   d42b4:	fb96 f0fa 	sdiv	r0, r6, sl
   d42b8:	f002 fab4 	bl	d6824 <__aeabi_i2d>
   d42bc:	ec41 0b10 	vmov	d0, r0, r1
}
   d42c0:	b002      	add	sp, #8
   d42c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  long sum = 0;
  for (int i = 0; i < n; i++)
  {
    sum += pow(inArray[i] - mean, 2);
  }
  return sqrt(sum / n);
   d42c6:	f002 b829 	b.w	d631c <sqrt>
	...

000d42cc <_Z7readValv>:
}
void readVal()
{ //Rolling value for input
   d42cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  sensorValue = analogRead(analogInPin);
   d42ce:	2012      	movs	r0, #18
   d42d0:	f001 fe60 	bl	d5f94 <analogRead>
   d42d4:	4b0e      	ldr	r3, [pc, #56]	; (d4310 <_Z7readValv+0x44>)
  outputValue = map(sensorValue, 0, 1023, 0, 100);
  emg[count % filter] = outputValue;
   d42d6:	4e0f      	ldr	r6, [pc, #60]	; (d4314 <_Z7readValv+0x48>)
  }
  return sqrt(sum / n);
}
void readVal()
{ //Rolling value for input
  sensorValue = analogRead(analogInPin);
   d42d8:	6018      	str	r0, [r3, #0]
  outputValue = map(sensorValue, 0, 1023, 0, 100);
   d42da:	2364      	movs	r3, #100	; 0x64
   d42dc:	9300      	str	r3, [sp, #0]
   d42de:	2300      	movs	r3, #0
   d42e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d42e4:	4619      	mov	r1, r3
   d42e6:	f000 fb41 	bl	d496c <_Z3mapiiiii>
  emg[count % filter] = outputValue;
   d42ea:	6834      	ldr	r4, [r6, #0]
  return sqrt(sum / n);
}
void readVal()
{ //Rolling value for input
  sensorValue = analogRead(analogInPin);
  outputValue = map(sensorValue, 0, 1023, 0, 100);
   d42ec:	4b0a      	ldr	r3, [pc, #40]	; (d4318 <_Z7readValv+0x4c>)
  emg[count % filter] = outputValue;
   d42ee:	2506      	movs	r5, #6
  return sqrt(sum / n);
}
void readVal()
{ //Rolling value for input
  sensorValue = analogRead(analogInPin);
  outputValue = map(sensorValue, 0, 1023, 0, 100);
   d42f0:	6018      	str	r0, [r3, #0]
  emg[count % filter] = outputValue;
   d42f2:	fbb4 f3f5 	udiv	r3, r4, r5
   d42f6:	fb05 4513 	mls	r5, r5, r3, r4
   d42fa:	4b08      	ldr	r3, [pc, #32]	; (d431c <_Z7readValv+0x50>)
   d42fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   d4300:	f002 fa90 	bl	d6824 <__aeabi_i2d>
  count += 1;
   d4304:	3401      	adds	r4, #1
}
void readVal()
{ //Rolling value for input
  sensorValue = analogRead(analogInPin);
  outputValue = map(sensorValue, 0, 1023, 0, 100);
  emg[count % filter] = outputValue;
   d4306:	e9c5 0100 	strd	r0, r1, [r5]
  count += 1;
   d430a:	6034      	str	r4, [r6, #0]
}
   d430c:	b002      	add	sp, #8
   d430e:	bd70      	pop	{r4, r5, r6, pc}
   d4310:	2003e3d0 	.word	0x2003e3d0
   d4314:	2003e334 	.word	0x2003e334
   d4318:	2003e3c0 	.word	0x2003e3c0
   d431c:	2003e338 	.word	0x2003e338

000d4320 <loop>:
  Particle.variable("tensed", tensed);
  Particle.variable("track", track);
}

void loop()
{
   d4320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  long time = millis();
  if (time > vibrateTime)
   d4324:	4c64      	ldr	r4, [pc, #400]	; (d44b8 <loop+0x198>)
  Particle.variable("tensed", tensed);
  Particle.variable("track", track);
}

void loop()
{
   d4326:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4328:	f000 f93c 	bl	d45a4 <HAL_Timer_Get_Milli_Seconds>
  long time = millis();
  if (time > vibrateTime)
   d432c:	6823      	ldr	r3, [r4, #0]
   d432e:	4298      	cmp	r0, r3
   d4330:	4605      	mov	r5, r0
   d4332:	dd0b      	ble.n	d434c <loop+0x2c>
  {
    digitalWrite(digitalOutPin, LOW); //Sets vibration motor to low
   d4334:	2100      	movs	r1, #0
   d4336:	2007      	movs	r0, #7
   d4338:	f001 fe13 	bl	d5f62 <digitalWrite>
    vibrateTime += vibrateDelta;
   d433c:	4b5f      	ldr	r3, [pc, #380]	; (d44bc <loop+0x19c>)
   d433e:	6822      	ldr	r2, [r4, #0]
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	4413      	add	r3, r2
   d4344:	6023      	str	r3, [r4, #0]
    tensed = false;
   d4346:	4b5e      	ldr	r3, [pc, #376]	; (d44c0 <loop+0x1a0>)
   d4348:	2200      	movs	r2, #0
   d434a:	701a      	strb	r2, [r3, #0]
  }
  if (time > readTime)
   d434c:	4e5d      	ldr	r6, [pc, #372]	; (d44c4 <loop+0x1a4>)
   d434e:	6833      	ldr	r3, [r6, #0]
   d4350:	429d      	cmp	r5, r3
   d4352:	dd06      	ble.n	d4362 <loop+0x42>
  {
    readVal();
   d4354:	f7ff ffba 	bl	d42cc <_Z7readValv>
    
    readTime += readDelta;
   d4358:	4b5b      	ldr	r3, [pc, #364]	; (d44c8 <loop+0x1a8>)
   d435a:	6832      	ldr	r2, [r6, #0]
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	4413      	add	r3, r2
   d4360:	6033      	str	r3, [r6, #0]
  }
  if (time > calculateTime)
   d4362:	4e5a      	ldr	r6, [pc, #360]	; (d44cc <loop+0x1ac>)
   d4364:	6833      	ldr	r3, [r6, #0]
   d4366:	429d      	cmp	r5, r3
   d4368:	dd26      	ble.n	d43b8 <loop+0x98>
  { //Averaging value
    averageVal = average(emg, filter);
   d436a:	2106      	movs	r1, #6
   d436c:	4858      	ldr	r0, [pc, #352]	; (d44d0 <loop+0x1b0>)
   d436e:	4f59      	ldr	r7, [pc, #356]	; (d44d4 <loop+0x1b4>)
   d4370:	f7ff ff58 	bl	d4224 <_Z7averagePdi>
    rollingAvg[avgCount % filterAvg] = averageVal; //Also record average values in rolling average
   d4374:	4858      	ldr	r0, [pc, #352]	; (d44d8 <loop+0x1b8>)
   d4376:	4959      	ldr	r1, [pc, #356]	; (d44dc <loop+0x1bc>)
   d4378:	6802      	ldr	r2, [r0, #0]
   d437a:	2305      	movs	r3, #5
   d437c:	fbb2 f3f3 	udiv	r3, r2, r3
   d4380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4384:	1ad3      	subs	r3, r2, r3
   d4386:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    avgCount += 1;
   d438a:	3201      	adds	r2, #1
    readTime += readDelta;
  }
  if (time > calculateTime)
  { //Averaging value
    averageVal = average(emg, filter);
    rollingAvg[avgCount % filterAvg] = averageVal; //Also record average values in rolling average
   d438c:	ed83 0b00 	vstr	d0, [r3]
    avgCount += 1;
   d4390:	6002      	str	r2, [r0, #0]
    
    readTime += readDelta;
  }
  if (time > calculateTime)
  { //Averaging value
    averageVal = average(emg, filter);
   d4392:	ed87 0b00 	vstr	d0, [r7]
    rollingAvg[avgCount % filterAvg] = averageVal; //Also record average values in rolling average
    avgCount += 1;
    Serial.print("average value = ");
   d4396:	f001 fc61 	bl	d5c5c <_Z16_fetch_usbserialv>
   d439a:	4951      	ldr	r1, [pc, #324]	; (d44e0 <loop+0x1c0>)
   d439c:	f001 f8d2 	bl	d5544 <_ZN5Print5printEPKc>
    Serial.println(averageVal);
   d43a0:	f001 fc5c 	bl	d5c5c <_Z16_fetch_usbserialv>
   d43a4:	2102      	movs	r1, #2
   d43a6:	ed97 0b00 	vldr	d0, [r7]
   d43aa:	f001 f9ca 	bl	d5742 <_ZN5Print7printlnEdi>
    calculateTime += calculateDelta;
   d43ae:	4b4d      	ldr	r3, [pc, #308]	; (d44e4 <loop+0x1c4>)
   d43b0:	6832      	ldr	r2, [r6, #0]
   d43b2:	681b      	ldr	r3, [r3, #0]
   d43b4:	4413      	add	r3, r2
   d43b6:	6033      	str	r3, [r6, #0]
  }
  if (time > compareTime)
   d43b8:	4b4b      	ldr	r3, [pc, #300]	; (d44e8 <loop+0x1c8>)
   d43ba:	f8df 914c 	ldr.w	r9, [pc, #332]	; d4508 <loop+0x1e8>
   d43be:	681b      	ldr	r3, [r3, #0]
   d43c0:	429d      	cmp	r5, r3
   d43c2:	dd66      	ble.n	d4492 <loop+0x172>
  {
    double std = stdDev(rollingAvg, filterAvg);
   d43c4:	2105      	movs	r1, #5
   d43c6:	4845      	ldr	r0, [pc, #276]	; (d44dc <loop+0x1bc>)
   d43c8:	f8df 8108 	ldr.w	r8, [pc, #264]	; d44d4 <loop+0x1b4>
   d43cc:	4d47      	ldr	r5, [pc, #284]	; (d44ec <loop+0x1cc>)
   d43ce:	f7ff ff45 	bl	d425c <_Z6stdDevPdi>
   d43d2:	ec57 6b10 	vmov	r6, r7, d0
    if (std != 0 && averageVal > prevAvg + std)
   d43d6:	2200      	movs	r2, #0
   d43d8:	2300      	movs	r3, #0
   d43da:	ee10 0a10 	vmov	r0, s0
   d43de:	4639      	mov	r1, r7
   d43e0:	f002 fcee 	bl	d6dc0 <__aeabi_dcmpeq>
   d43e4:	2800      	cmp	r0, #0
   d43e6:	d14a      	bne.n	d447e <loop+0x15e>
   d43e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d43ec:	4630      	mov	r0, r6
   d43ee:	4639      	mov	r1, r7
   d43f0:	f002 f8cc 	bl	d658c <__adddf3>
   d43f4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d43f8:	f002 fcec 	bl	d6dd4 <__aeabi_dcmplt>
   d43fc:	2800      	cmp	r0, #0
   d43fe:	d03e      	beq.n	d447e <loop+0x15e>
    {
      tensed = true;
   d4400:	4b2f      	ldr	r3, [pc, #188]	; (d44c0 <loop+0x1a0>)
   d4402:	f04f 0a01 	mov.w	sl, #1
   d4406:	f883 a000 	strb.w	sl, [r3]
      Serial.print("std is ");
   d440a:	f001 fc27 	bl	d5c5c <_Z16_fetch_usbserialv>
   d440e:	4938      	ldr	r1, [pc, #224]	; (d44f0 <loop+0x1d0>)
   d4410:	f001 f898 	bl	d5544 <_ZN5Print5printEPKc>
      Serial.print(std);
   d4414:	f001 fc22 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4418:	ec47 6b10 	vmov	d0, r6, r7
   d441c:	2102      	movs	r1, #2
   d441e:	f001 f98d 	bl	d573c <_ZN5Print5printEdi>
      Serial.print(". prevAvg+std = ");
   d4422:	f001 fc1b 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4426:	4933      	ldr	r1, [pc, #204]	; (d44f4 <loop+0x1d4>)
   d4428:	f001 f88c 	bl	d5544 <_ZN5Print5printEPKc>
      Serial.println(prevAvg + std);
   d442c:	f001 fc16 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4430:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4434:	4683      	mov	fp, r0
   d4436:	4639      	mov	r1, r7
   d4438:	4630      	mov	r0, r6
   d443a:	f002 f8a7 	bl	d658c <__adddf3>
   d443e:	ec41 0b10 	vmov	d0, r0, r1
   d4442:	2102      	movs	r1, #2
   d4444:	4658      	mov	r0, fp
   d4446:	f001 f97c 	bl	d5742 <_ZN5Print7printlnEdi>
      Serial.print(". current Avg = ");
   d444a:	f001 fc07 	bl	d5c5c <_Z16_fetch_usbserialv>
   d444e:	492a      	ldr	r1, [pc, #168]	; (d44f8 <loop+0x1d8>)
   d4450:	f001 f878 	bl	d5544 <_ZN5Print5printEPKc>
      Serial.println(averageVal);
   d4454:	f001 fc02 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4458:	ed98 0b00 	vldr	d0, [r8]
   d445c:	2102      	movs	r1, #2
   d445e:	f001 f970 	bl	d5742 <_ZN5Print7printlnEdi>
      Serial.println("RELAX!!");
   d4462:	f001 fbfb 	bl	d5c5c <_Z16_fetch_usbserialv>
   d4466:	4925      	ldr	r1, [pc, #148]	; (d44fc <loop+0x1dc>)
   d4468:	f001 f87f 	bl	d556a <_ZN5Print7printlnEPKc>
      digitalWrite(digitalOutPin, HIGH); //Vibrates
   d446c:	4651      	mov	r1, sl
   d446e:	2007      	movs	r0, #7
   d4470:	f001 fd77 	bl	d5f62 <digitalWrite>
      vibrateTime += vibrateDelta;       //Stops vibrating after vibrateDelta
   d4474:	4b11      	ldr	r3, [pc, #68]	; (d44bc <loop+0x19c>)
   d4476:	6822      	ldr	r2, [r4, #0]
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	4413      	add	r3, r2
   d447c:	6023      	str	r3, [r4, #0]
    }
    prevAvg = averageVal;
   d447e:	e9d8 2300 	ldrd	r2, r3, [r8]
   d4482:	e9c5 2300 	strd	r2, r3, [r5]
    if (track)
   d4486:	4b1e      	ldr	r3, [pc, #120]	; (d4500 <loop+0x1e0>)
   d4488:	781b      	ldrb	r3, [r3, #0]
   d448a:	b113      	cbz	r3, d4492 <loop+0x172>
    {
      //Only send data if tracking is turned on
      publishStateNow = true;
   d448c:	2301      	movs	r3, #1
   d448e:	f889 3000 	strb.w	r3, [r9]
    }
  }
  //Particle publishing state
  if (publishStateNow)
   d4492:	f899 3000 	ldrb.w	r3, [r9]
   d4496:	b163      	cbz	r3, d44b2 <loop+0x192>
  {
    publishState("");
   d4498:	491a      	ldr	r1, [pc, #104]	; (d4504 <loop+0x1e4>)
   d449a:	4668      	mov	r0, sp
   d449c:	f001 fa29 	bl	d58f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d44a0:	4668      	mov	r0, sp
   d44a2:	f7ff fe17 	bl	d40d4 <_Z12publishState6String>
   d44a6:	4668      	mov	r0, sp
   d44a8:	f001 f9dc 	bl	d5864 <_ZN6StringD1Ev>
    publishStateNow = false;
   d44ac:	4b16      	ldr	r3, [pc, #88]	; (d4508 <loop+0x1e8>)
   d44ae:	2200      	movs	r2, #0
   d44b0:	701a      	strb	r2, [r3, #0]
  }
}
   d44b2:	b005      	add	sp, #20
   d44b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44b8:	2003e394 	.word	0x2003e394
   d44bc:	2003e2b4 	.word	0x2003e2b4
   d44c0:	2003e3c4 	.word	0x2003e3c4
   d44c4:	2003e39c 	.word	0x2003e39c
   d44c8:	2003e2b8 	.word	0x2003e2b8
   d44cc:	2003e3ac 	.word	0x2003e3ac
   d44d0:	2003e338 	.word	0x2003e338
   d44d4:	2003e3a0 	.word	0x2003e3a0
   d44d8:	2003e390 	.word	0x2003e390
   d44dc:	2003e368 	.word	0x2003e368
   d44e0:	000d73bc 	.word	0x000d73bc
   d44e4:	2003e2bc 	.word	0x2003e2bc
   d44e8:	2003e398 	.word	0x2003e398
   d44ec:	2003e3c8 	.word	0x2003e3c8
   d44f0:	000d73cd 	.word	0x000d73cd
   d44f4:	000d73d5 	.word	0x000d73d5
   d44f8:	000d73e6 	.word	0x000d73e6
   d44fc:	000d73f7 	.word	0x000d73f7
   d4500:	2003e3c6 	.word	0x2003e3c6
   d4504:	000d754b 	.word	0x000d754b
   d4508:	2003e3c5 	.word	0x2003e3c5

000d450c <_GLOBAL__sub_I_sensorValue>:
  return 0;
}
void getPublishState()
{
  publishState("");
   d450c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d450e:	4b08      	ldr	r3, [pc, #32]	; (d4530 <_GLOBAL__sub_I_sensorValue+0x24>)

//Particle
boolean publishStateNow = false;
boolean track = false;

String deviceID = "e00fce68058f85ccce40d570";
   d4510:	4c08      	ldr	r4, [pc, #32]	; (d4534 <_GLOBAL__sub_I_sensorValue+0x28>)
   d4512:	2201      	movs	r2, #1
   d4514:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4516:	f000 f84d 	bl	d45b4 <HAL_Pin_Map>
   d451a:	4907      	ldr	r1, [pc, #28]	; (d4538 <_GLOBAL__sub_I_sensorValue+0x2c>)
   d451c:	4620      	mov	r0, r4
   d451e:	f001 f9e8 	bl	d58f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4522:	4620      	mov	r0, r4
   d4524:	4a05      	ldr	r2, [pc, #20]	; (d453c <_GLOBAL__sub_I_sensorValue+0x30>)
   d4526:	4906      	ldr	r1, [pc, #24]	; (d4540 <_GLOBAL__sub_I_sensorValue+0x34>)
  return 0;
}
void getPublishState()
{
  publishState("");
   d4528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//Particle
boolean publishStateNow = false;
boolean track = false;

String deviceID = "e00fce68058f85ccce40d570";
   d452c:	f001 bd8a 	b.w	d6044 <__aeabi_atexit>
   d4530:	2003e3a8 	.word	0x2003e3a8
   d4534:	2003e3b0 	.word	0x2003e3b0
   d4538:	000d73ff 	.word	0x000d73ff
   d453c:	2003e330 	.word	0x2003e330
   d4540:	000d5865 	.word	0x000d5865

000d4544 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <os_thread_is_current+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	689b      	ldr	r3, [r3, #8]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030248 	.word	0x00030248

000d4554 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <os_thread_join+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	691b      	ldr	r3, [r3, #16]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030248 	.word	0x00030248

000d4564 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <os_thread_cleanup+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	695b      	ldr	r3, [r3, #20]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030248 	.word	0x00030248

000d4574 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <os_mutex_recursive_create+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030248 	.word	0x00030248

000d4584 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <os_mutex_recursive_destroy+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030248 	.word	0x00030248

000d4594 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_RNG_GetRandomNumber+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	685b      	ldr	r3, [r3, #4]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030218 	.word	0x00030218

000d45a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030218 	.word	0x00030218

000d45b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_Pin_Map+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	681b      	ldr	r3, [r3, #0]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003022c 	.word	0x0003022c

000d45c4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_Validate_Pin_Function+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	685b      	ldr	r3, [r3, #4]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003022c 	.word	0x0003022c

000d45d4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_Pin_Mode+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	689b      	ldr	r3, [r3, #8]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003022c 	.word	0x0003022c

000d45e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_Get_Pin_Mode+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003022c 	.word	0x0003022c

000d45f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_GPIO_Write+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	691b      	ldr	r3, [r3, #16]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003022c 	.word	0x0003022c

000d4604 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_ADC_Read+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003022c 	.word	0x0003022c

000d4614 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_I2C_Write_Data+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6a1b      	ldr	r3, [r3, #32]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030228 	.word	0x00030228

000d4624 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_I2C_Available_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030228 	.word	0x00030228

000d4634 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_I2C_Read_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030228 	.word	0x00030228

000d4644 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_I2C_Peek_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030228 	.word	0x00030228

000d4654 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_I2C_Flush_Data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030228 	.word	0x00030228

000d4664 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_I2C_Is_Enabled+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_I2C_Init+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <inet_inet_ntop+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030264 	.word	0x00030264

000d4694 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <netdb_freeaddrinfo+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	689b      	ldr	r3, [r3, #8]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030268 	.word	0x00030268

000d46a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <netdb_getaddrinfo+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	68db      	ldr	r3, [r3, #12]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030268 	.word	0x00030268

000d46b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_SPI_Init+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	69db      	ldr	r3, [r3, #28]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030230 	.word	0x00030230

000d46c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_SPI_Is_Enabled+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6a1b      	ldr	r3, [r3, #32]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030230 	.word	0x00030230

000d46d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USART_Init+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	681b      	ldr	r3, [r3, #0]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USART_Write_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	68db      	ldr	r3, [r3, #12]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USART_Available_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	691b      	ldr	r3, [r3, #16]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USART_Read_Data+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	695b      	ldr	r3, [r3, #20]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USART_Peek_Data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	699b      	ldr	r3, [r3, #24]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USART_Flush_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	69db      	ldr	r3, [r3, #28]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003023c 	.word	0x0003023c

000d4734 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USART_Is_Enabled+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a1b      	ldr	r3, [r3, #32]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003023c 	.word	0x0003023c

000d4744 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_USART_Available_Data_For_Write+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003023c 	.word	0x0003023c

000d4754 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_USB_USART_Init+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	681b      	ldr	r3, [r3, #0]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003024c 	.word	0x0003024c

000d4764 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <HAL_USB_USART_Begin+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	685b      	ldr	r3, [r3, #4]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003024c 	.word	0x0003024c

000d4774 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <HAL_USB_USART_Available_Data+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	691b      	ldr	r3, [r3, #16]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003024c 	.word	0x0003024c

000d4784 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	695b      	ldr	r3, [r3, #20]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003024c 	.word	0x0003024c

000d4794 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <HAL_USB_USART_Receive_Data+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	699b      	ldr	r3, [r3, #24]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003024c 	.word	0x0003024c

000d47a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <HAL_USB_USART_Send_Data+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	69db      	ldr	r3, [r3, #28]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003024c 	.word	0x0003024c

000d47b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <HAL_USB_USART_Flush_Data+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a1b      	ldr	r3, [r3, #32]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003024c 	.word	0x0003024c

000d47c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <set_system_mode+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	685b      	ldr	r3, [r3, #4]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030220 	.word	0x00030220

000d47d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <application_thread_current+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030220 	.word	0x00030220

000d47e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <application_thread_invoke+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030220 	.word	0x00030220

000d47f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b03      	ldr	r3, [pc, #12]	; (d4804 <system_ctrl_set_app_request_handler+0x10>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47fe:	9301      	str	r3, [sp, #4]
   d4800:	bd08      	pop	{r3, pc}
   d4802:	0000      	.short	0x0000
   d4804:	00030220 	.word	0x00030220

000d4808 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b03      	ldr	r3, [pc, #12]	; (d4818 <system_ctrl_set_result+0x10>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4812:	9301      	str	r3, [sp, #4]
   d4814:	bd08      	pop	{r3, pc}
   d4816:	0000      	.short	0x0000
   d4818:	00030220 	.word	0x00030220

000d481c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <spark_variable+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	681b      	ldr	r3, [r3, #0]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030244 	.word	0x00030244

000d482c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <spark_function+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	685b      	ldr	r3, [r3, #4]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030244 	.word	0x00030244

000d483c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <spark_cloud_flag_connected+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	695b      	ldr	r3, [r3, #20]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030244 	.word	0x00030244

000d484c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <spark_send_event+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6a1b      	ldr	r3, [r3, #32]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030244 	.word	0x00030244

000d485c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030244 	.word	0x00030244

000d486c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <network_connect+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	685b      	ldr	r3, [r3, #4]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030240 	.word	0x00030240

000d487c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <network_connecting+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	689b      	ldr	r3, [r3, #8]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030240 	.word	0x00030240

000d488c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <network_disconnect+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	68db      	ldr	r3, [r3, #12]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030240 	.word	0x00030240

000d489c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <network_ready+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	691b      	ldr	r3, [r3, #16]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030240 	.word	0x00030240

000d48ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <network_on+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	695b      	ldr	r3, [r3, #20]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030240 	.word	0x00030240

000d48bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <network_off+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	699b      	ldr	r3, [r3, #24]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030240 	.word	0x00030240

000d48cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <network_listen+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	69db      	ldr	r3, [r3, #28]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030240 	.word	0x00030240

000d48dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <network_listening+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6a1b      	ldr	r3, [r3, #32]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030240 	.word	0x00030240

000d48ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <network_set_listen_timeout+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030240 	.word	0x00030240

000d48fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <network_get_listen_timeout+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030240 	.word	0x00030240

000d490c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <malloc+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	681b      	ldr	r3, [r3, #0]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003021c 	.word	0x0003021c

000d491c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <free+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	685b      	ldr	r3, [r3, #4]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003021c 	.word	0x0003021c

000d492c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <realloc+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003021c 	.word	0x0003021c

000d493c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <abort+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003021c 	.word	0x0003021c

000d494c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <_malloc_r+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	0003021c 	.word	0x0003021c

000d495c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <__errno+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003021c 	.word	0x0003021c

000d496c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d496c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d496e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4970:	d007      	beq.n	d4982 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4972:	9d03      	ldr	r5, [sp, #12]
   d4974:	1a44      	subs	r4, r0, r1
   d4976:	1aed      	subs	r5, r5, r3
   d4978:	436c      	muls	r4, r5
   d497a:	1a52      	subs	r2, r2, r1
   d497c:	fb94 f4f2 	sdiv	r4, r4, r2
   d4980:	18e0      	adds	r0, r4, r3
}
   d4982:	bd30      	pop	{r4, r5, pc}

000d4984 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4984:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4986:	6883      	ldr	r3, [r0, #8]
   d4988:	4604      	mov	r4, r0
   d498a:	b90b      	cbnz	r3, d4990 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d498c:	f001 fb7b 	bl	d6086 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4990:	68c3      	ldr	r3, [r0, #12]
   d4992:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4994:	68a3      	ldr	r3, [r4, #8]
   d4996:	b11b      	cbz	r3, d49a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4998:	2203      	movs	r2, #3
   d499a:	4621      	mov	r1, r4
   d499c:	4620      	mov	r0, r4
   d499e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d49a0:	4620      	mov	r0, r4
   d49a2:	2110      	movs	r1, #16
}
   d49a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d49a8:	f001 bb51 	b.w	d604e <_ZdlPvj>

000d49ac <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49ac:	b510      	push	{r4, lr}
   d49ae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49b0:	6800      	ldr	r0, [r0, #0]
   d49b2:	b108      	cbz	r0, d49b8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d49b4:	f7ff fde6 	bl	d4584 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d49b8:	4620      	mov	r0, r4
   d49ba:	bd10      	pop	{r4, pc}

000d49bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49bc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d49be:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49c0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d49c2:	689b      	ldr	r3, [r3, #8]
   d49c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	3b01      	subs	r3, #1
   d49ca:	60a3      	str	r3, [r4, #8]
   d49cc:	b92b      	cbnz	r3, d49da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d49ce:	6823      	ldr	r3, [r4, #0]
   d49d0:	4620      	mov	r0, r4
   d49d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d49d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d49d8:	4718      	bx	r3
   d49da:	bd10      	pop	{r4, pc}

000d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d49dc:	680b      	ldr	r3, [r1, #0]
   d49de:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d49e0:	b113      	cbz	r3, d49e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d49e2:	685a      	ldr	r2, [r3, #4]
   d49e4:	3201      	adds	r2, #1
   d49e6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d49e8:	4770      	bx	lr

000d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d49ea:	b510      	push	{r4, lr}
   d49ec:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d49ee:	6800      	ldr	r0, [r0, #0]
   d49f0:	b128      	cbz	r0, d49fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d49f2:	6843      	ldr	r3, [r0, #4]
   d49f4:	3b01      	subs	r3, #1
   d49f6:	6043      	str	r3, [r0, #4]
   d49f8:	b90b      	cbnz	r3, d49fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d49fa:	f7ff ffdf 	bl	d49bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d49fe:	4620      	mov	r0, r4
   d4a00:	bd10      	pop	{r4, pc}
	...

000d4a04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a04:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a06:	4c06      	ldr	r4, [pc, #24]	; (d4a20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4a08:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4a0a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a0c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4a0e:	f7ff fdb1 	bl	d4574 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4a12:	4620      	mov	r0, r4
   d4a14:	4a03      	ldr	r2, [pc, #12]	; (d4a24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4a16:	4904      	ldr	r1, [pc, #16]	; (d4a28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4a1c:	f001 bb12 	b.w	d6044 <__aeabi_atexit>
   d4a20:	2003e3d4 	.word	0x2003e3d4
   d4a24:	2003e330 	.word	0x2003e330
   d4a28:	000d49ad 	.word	0x000d49ad

000d4a2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a2c:	4770      	bx	lr

000d4a2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4a2e:	2000      	movs	r0, #0
   d4a30:	4770      	bx	lr

000d4a32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a32:	b510      	push	{r4, lr}
   d4a34:	2110      	movs	r1, #16
   d4a36:	4604      	mov	r4, r0
   d4a38:	f001 fb09 	bl	d604e <_ZdlPvj>
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	bd10      	pop	{r4, pc}

000d4a40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4a40:	b508      	push	{r3, lr}
      { delete this; }
   d4a42:	b108      	cbz	r0, d4a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4a44:	f7ff fff5 	bl	d4a32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4a48:	bd08      	pop	{r3, pc}

000d4a4a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a4a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a4c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a4e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4a50:	b113      	cbz	r3, d4a58 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a52:	2203      	movs	r2, #3
   d4a54:	4601      	mov	r1, r0
   d4a56:	4798      	blx	r3
    }
   d4a58:	4620      	mov	r0, r4
   d4a5a:	bd10      	pop	{r4, pc}

000d4a5c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4a60:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a62:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4a66:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a68:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4a6c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a6e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a70:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a72:	680c      	ldr	r4, [r1, #0]
   d4a74:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a76:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4a78:	bd10      	pop	{r4, pc}

000d4a7a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4a7a:	b510      	push	{r4, lr}
   d4a7c:	4604      	mov	r4, r0
    free((void*)msg_);
   d4a7e:	6800      	ldr	r0, [r0, #0]
   d4a80:	f7ff ff4c 	bl	d491c <free>
}
   d4a84:	4620      	mov	r0, r4
   d4a86:	bd10      	pop	{r4, pc}

000d4a88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4a88:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4a8a:	68c4      	ldr	r4, [r0, #12]
   d4a8c:	b1f4      	cbz	r4, d4acc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4a8e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4a90:	2b02      	cmp	r3, #2
   d4a92:	d103      	bne.n	d4a9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4a94:	f104 000c 	add.w	r0, r4, #12
   d4a98:	f7ff ffef 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4a9c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4a9e:	b135      	cbz	r5, d4aae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4aa0:	4628      	mov	r0, r5
   d4aa2:	f7ff ffd2 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
   d4aa6:	2110      	movs	r1, #16
   d4aa8:	4628      	mov	r0, r5
   d4aaa:	f001 fad0 	bl	d604e <_ZdlPvj>
   d4aae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ab0:	b135      	cbz	r5, d4ac0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ab2:	4628      	mov	r0, r5
   d4ab4:	f7ff ffc9 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
   d4ab8:	2110      	movs	r1, #16
   d4aba:	4628      	mov	r0, r5
   d4abc:	f001 fac7 	bl	d604e <_ZdlPvj>
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	2114      	movs	r1, #20
   d4ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ac8:	f001 bac1 	b.w	d604e <_ZdlPvj>
   d4acc:	bd38      	pop	{r3, r4, r5, pc}

000d4ace <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4ace:	b510      	push	{r4, lr}
   d4ad0:	b088      	sub	sp, #32
   d4ad2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4ad4:	4668      	mov	r0, sp
   d4ad6:	f000 ff0c 	bl	d58f2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4ada:	4669      	mov	r1, sp
   d4adc:	a804      	add	r0, sp, #16
   d4ade:	f000 ff2a 	bl	d5936 <_ZN6StringC1ERKS_>
   d4ae2:	a804      	add	r0, sp, #16
   d4ae4:	47a0      	blx	r4
   d4ae6:	4604      	mov	r4, r0
   d4ae8:	a804      	add	r0, sp, #16
   d4aea:	f000 febb 	bl	d5864 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4aee:	4668      	mov	r0, sp
   d4af0:	f000 feb8 	bl	d5864 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4af4:	4620      	mov	r0, r4
   d4af6:	b008      	add	sp, #32
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4afa:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4afc:	2410      	movs	r4, #16
   d4afe:	b085      	sub	sp, #20
   d4b00:	4607      	mov	r7, r0
   d4b02:	460e      	mov	r6, r1
   d4b04:	4615      	mov	r5, r2
   d4b06:	2100      	movs	r1, #0
   d4b08:	4622      	mov	r2, r4
   d4b0a:	4668      	mov	r0, sp
   d4b0c:	f002 fbb1 	bl	d7272 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4b10:	2200      	movs	r2, #0
   d4b12:	4669      	mov	r1, sp
   d4b14:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4b16:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4b1a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4b1c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4b1e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4b20:	f7ff fe84 	bl	d482c <spark_function>
}
   d4b24:	b005      	add	sp, #20
   d4b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4b28:	b513      	push	{r0, r1, r4, lr}
   d4b2a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4b2c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4b30:	2300      	movs	r3, #0
   d4b32:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4b34:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b36:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4b38:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b3a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4b3c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4b3e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b40:	f7ff ff53 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b44:	4620      	mov	r0, r4
   d4b46:	b002      	add	sp, #8
   d4b48:	bd10      	pop	{r4, pc}

000d4b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b4c:	460c      	mov	r4, r1
   d4b4e:	ad02      	add	r5, sp, #8
   d4b50:	f854 3b04 	ldr.w	r3, [r4], #4
   d4b54:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4b58:	4606      	mov	r6, r0
   d4b5a:	460f      	mov	r7, r1
   d4b5c:	a801      	add	r0, sp, #4
   d4b5e:	4621      	mov	r1, r4
   d4b60:	f7ff ff3c 	bl	d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4b64:	4629      	mov	r1, r5
   d4b66:	4630      	mov	r0, r6
   d4b68:	f7ff ffde 	bl	d4b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b6c:	a801      	add	r0, sp, #4
   d4b6e:	f7ff ff3c 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b72:	4620      	mov	r0, r4
   d4b74:	f7ff ff39 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4b78:	4638      	mov	r0, r7
   d4b7a:	2108      	movs	r1, #8
   d4b7c:	f001 fa67 	bl	d604e <_ZdlPvj>
        return p;
    }
   d4b80:	4630      	mov	r0, r6
   d4b82:	b003      	add	sp, #12
   d4b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4b86:	b513      	push	{r0, r1, r4, lr}
   d4b88:	460b      	mov	r3, r1
   d4b8a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b8c:	c803      	ldmia	r0, {r0, r1}
   d4b8e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b92:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b96:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4b9a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4b9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ba2:	b002      	add	sp, #8
   d4ba4:	bd10      	pop	{r4, pc}
	...

000d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ba8:	b538      	push	{r3, r4, r5, lr}
   d4baa:	2300      	movs	r3, #0
   d4bac:	4604      	mov	r4, r0
   d4bae:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4bb0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4bb2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4bb4:	f7ff fa6f 	bl	d4096 <_Znwj>
   d4bb8:	b128      	cbz	r0, d4bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4bba:	2301      	movs	r3, #1
   d4bbc:	6043      	str	r3, [r0, #4]
   d4bbe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4bc0:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4bc2:	6003      	str	r3, [r0, #0]
   d4bc4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4bc6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4bc8:	4620      	mov	r0, r4
   d4bca:	bd38      	pop	{r3, r4, r5, pc}
   d4bcc:	000d7420 	.word	0x000d7420

000d4bd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4bd0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4bd2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4bd4:	b90a      	cbnz	r2, d4bda <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4bd6:	f001 fa56 	bl	d6086 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4bda:	68c3      	ldr	r3, [r0, #12]
    }
   d4bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4be0:	4718      	bx	r3

000d4be2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4be2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4be4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4be6:	f100 0110 	add.w	r1, r0, #16
   d4bea:	f7ff fff1 	bl	d4bd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4bee:	bd08      	pop	{r3, pc}

000d4bf0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4bf0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4bf2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4bf4:	b90a      	cbnz	r2, d4bfa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4bf6:	f001 fa46 	bl	d6086 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4bfa:	68c3      	ldr	r3, [r0, #12]
    }
   d4bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c00:	4718      	bx	r3

000d4c02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4c06:	f100 0110 	add.w	r1, r0, #16
   d4c0a:	f7ff fff1 	bl	d4bf0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4c0e:	bd08      	pop	{r3, pc}

000d4c10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c12:	2300      	movs	r3, #0
   d4c14:	6083      	str	r3, [r0, #8]
   d4c16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c18:	4604      	mov	r4, r0
   d4c1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c1c:	b12b      	cbz	r3, d4c2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c1e:	2202      	movs	r2, #2
   d4c20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c22:	68eb      	ldr	r3, [r5, #12]
   d4c24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c26:	68ab      	ldr	r3, [r5, #8]
   d4c28:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c32:	b089      	sub	sp, #36	; 0x24
   d4c34:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4c36:	4668      	mov	r0, sp
   d4c38:	f7ff ff10 	bl	d4a5c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4c3c:	2300      	movs	r3, #0
   d4c3e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4c42:	f04f 0202 	mov.w	r2, #2
   d4c46:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4c4a:	2b00      	cmp	r3, #0
   d4c4c:	d103      	bne.n	d4c56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4c4e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4c52:	2900      	cmp	r1, #0
   d4c54:	d1f7      	bne.n	d4c46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4c56:	d002      	beq.n	d4c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4c58:	f88d 3008 	strb.w	r3, [sp, #8]
   d4c5c:	e063      	b.n	d4d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4c5e:	f114 050c 	adds.w	r5, r4, #12
   d4c62:	d003      	beq.n	d4c6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4c64:	4669      	mov	r1, sp
   d4c66:	4628      	mov	r0, r5
   d4c68:	f7ff fef8 	bl	d4a5c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4c6c:	f3bf 8f5f 	dmb	sy
   d4c70:	2301      	movs	r3, #1
   d4c72:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4c74:	2000      	movs	r0, #0
   d4c76:	f104 0308 	add.w	r3, r4, #8
   d4c7a:	f3bf 8f5f 	dmb	sy
   d4c7e:	e853 6f00 	ldrex	r6, [r3]
   d4c82:	e843 0200 	strex	r2, r0, [r3]
   d4c86:	2a00      	cmp	r2, #0
   d4c88:	d1f9      	bne.n	d4c7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4c8a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4c8e:	2e00      	cmp	r6, #0
   d4c90:	d049      	beq.n	d4d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4c92:	f7ff fd9f 	bl	d47d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4c96:	b120      	cbz	r0, d4ca2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c98:	4629      	mov	r1, r5
   d4c9a:	4630      	mov	r0, r6
   d4c9c:	f7ff ff98 	bl	d4bd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ca0:	e03a      	b.n	d4d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4ca2:	4631      	mov	r1, r6
   d4ca4:	a802      	add	r0, sp, #8
   d4ca6:	f7ff ffb3 	bl	d4c10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4caa:	68e0      	ldr	r0, [r4, #12]
   d4cac:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4cb0:	b108      	cbz	r0, d4cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4cb2:	f002 fb21 	bl	d72f8 <strdup>
   d4cb6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4cb8:	2010      	movs	r0, #16
   d4cba:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4cbe:	f7ff f9ea 	bl	d4096 <_Znwj>
   d4cc2:	4605      	mov	r5, r0
   d4cc4:	b1e8      	cbz	r0, d4d02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cc6:	2700      	movs	r7, #0
   d4cc8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cca:	2018      	movs	r0, #24
   d4ccc:	f7ff f9e3 	bl	d4096 <_Znwj>
   d4cd0:	4604      	mov	r4, r0
   d4cd2:	b188      	cbz	r0, d4cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4cd4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cd6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4cd8:	a802      	add	r0, sp, #8
   d4cda:	f7ff ff54 	bl	d4b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cde:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ce0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ce2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ce4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ce6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ce8:	a906      	add	r1, sp, #24
   d4cea:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cec:	60e3      	str	r3, [r4, #12]
   d4cee:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cf2:	9205      	str	r2, [sp, #20]
   d4cf4:	f7ff feb2 	bl	d4a5c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4cf8:	4b0d      	ldr	r3, [pc, #52]	; (d4d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4cfa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4cfc:	4b0d      	ldr	r3, [pc, #52]	; (d4d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cfe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4d00:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4d02:	a806      	add	r0, sp, #24
   d4d04:	f7ff feb9 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d08:	a802      	add	r0, sp, #8
   d4d0a:	f7ff fe9e 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d0e:	2200      	movs	r2, #0
   d4d10:	4629      	mov	r1, r5
   d4d12:	4809      	ldr	r0, [pc, #36]	; (d4d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4d14:	f7ff fd66 	bl	d47e4 <application_thread_invoke>
   d4d18:	4630      	mov	r0, r6
   d4d1a:	f7ff fe96 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4d1e:	2110      	movs	r1, #16
   d4d20:	4630      	mov	r0, r6
   d4d22:	f001 f994 	bl	d604e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4d26:	4668      	mov	r0, sp
   d4d28:	f7ff fea7 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
    }
   d4d2c:	b009      	add	sp, #36	; 0x24
   d4d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d30:	000d4be3 	.word	0x000d4be3
   d4d34:	000d4e59 	.word	0x000d4e59
   d4d38:	000d4985 	.word	0x000d4985

000d4d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d40:	b08b      	sub	sp, #44	; 0x2c
   d4d42:	4606      	mov	r6, r0
   d4d44:	460f      	mov	r7, r1
   d4d46:	4690      	mov	r8, r2
   d4d48:	4699      	mov	r9, r3
   d4d4a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d4e:	f7ff fd75 	bl	d483c <spark_cloud_flag_connected>
   d4d52:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4d54:	4683      	mov	fp, r0
   d4d56:	bb30      	cbnz	r0, d4da6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4d5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4d5e:	a905      	add	r1, sp, #20
   d4d60:	4628      	mov	r0, r5
   d4d62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d66:	f7ff fe79 	bl	d4a5c <_ZN8particle5ErrorC1EOS0_>
   d4d6a:	2014      	movs	r0, #20
   d4d6c:	f7ff f993 	bl	d4096 <_Znwj>
   d4d70:	4604      	mov	r4, r0
   d4d72:	b158      	cbz	r0, d4d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4d74:	2302      	movs	r3, #2
   d4d76:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d78:	2301      	movs	r3, #1
   d4d7a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4d7c:	f8c0 b004 	str.w	fp, [r0, #4]
   d4d80:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4d84:	4629      	mov	r1, r5
   d4d86:	300c      	adds	r0, #12
   d4d88:	f7ff fe68 	bl	d4a5c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4d8c:	4630      	mov	r0, r6
   d4d8e:	4621      	mov	r1, r4
   d4d90:	f840 4b04 	str.w	r4, [r0], #4
   d4d94:	f7ff ff08 	bl	d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4d98:	4628      	mov	r0, r5
   d4d9a:	f7ff fe6e 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4d9e:	a805      	add	r0, sp, #20
   d4da0:	f7ff fe6b 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
   d4da4:	e052      	b.n	d4e4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4da6:	2400      	movs	r4, #0
   d4da8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4daa:	2014      	movs	r0, #20
   d4dac:	606c      	str	r4, [r5, #4]
   d4dae:	60ac      	str	r4, [r5, #8]
   d4db0:	9307      	str	r3, [sp, #28]
   d4db2:	f7ff f970 	bl	d4096 <_Znwj>
   d4db6:	4601      	mov	r1, r0
   d4db8:	b118      	cbz	r0, d4dc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4dba:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dbc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4dbe:	6044      	str	r4, [r0, #4]
   d4dc0:	6084      	str	r4, [r0, #8]
   d4dc2:	a804      	add	r0, sp, #16
   d4dc4:	9103      	str	r1, [sp, #12]
   d4dc6:	f7ff feef 	bl	d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4dca:	4b22      	ldr	r3, [pc, #136]	; (d4e54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4dcc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4dce:	2008      	movs	r0, #8
   d4dd0:	f7ff f961 	bl	d4096 <_Znwj>
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	b128      	cbz	r0, d4de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4dd8:	9b03      	ldr	r3, [sp, #12]
   d4dda:	f840 3b04 	str.w	r3, [r0], #4
   d4dde:	a904      	add	r1, sp, #16
   d4de0:	f7ff fdfc 	bl	d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4de4:	9500      	str	r5, [sp, #0]
   d4de6:	fa5f f38a 	uxtb.w	r3, sl
   d4dea:	464a      	mov	r2, r9
   d4dec:	4641      	mov	r1, r8
   d4dee:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4df0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4df2:	f7ff fd2b 	bl	d484c <spark_send_event>
   d4df6:	b920      	cbnz	r0, d4e02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4df8:	9b03      	ldr	r3, [sp, #12]
   d4dfa:	785b      	ldrb	r3, [r3, #1]
   d4dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4e00:	b183      	cbz	r3, d4e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4e02:	9b03      	ldr	r3, [sp, #12]
   d4e04:	9305      	str	r3, [sp, #20]
   d4e06:	a904      	add	r1, sp, #16
   d4e08:	a806      	add	r0, sp, #24
   d4e0a:	f7ff fde7 	bl	d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4e0e:	a905      	add	r1, sp, #20
   d4e10:	4630      	mov	r0, r6
   d4e12:	f7ff fe89 	bl	d4b28 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e16:	a806      	add	r0, sp, #24
   d4e18:	f7ff fde7 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e1c:	a804      	add	r0, sp, #16
   d4e1e:	f7ff fde4 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e22:	e013      	b.n	d4e4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4e24:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4e28:	a905      	add	r1, sp, #20
   d4e2a:	a803      	add	r0, sp, #12
   d4e2c:	9205      	str	r2, [sp, #20]
   d4e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e32:	f7ff fefd 	bl	d4c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e36:	a805      	add	r0, sp, #20
   d4e38:	f7ff fe1f 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4e3c:	a805      	add	r0, sp, #20
   d4e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4e40:	f7ff fe83 	bl	d4b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4e44:	a806      	add	r0, sp, #24
   d4e46:	f7ff fdd0 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e4a:	e7da      	b.n	d4e02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4e4c:	4630      	mov	r0, r6
   d4e4e:	b00b      	add	sp, #44	; 0x2c
   d4e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e54:	000d4fc9 	.word	0x000d4fc9

000d4e58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e58:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e5c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e5e:	d006      	beq.n	d4e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4e60:	2a03      	cmp	r2, #3
   d4e62:	d017      	beq.n	d4e94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4e64:	2a01      	cmp	r2, #1
   d4e66:	d122      	bne.n	d4eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e68:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e6a:	6003      	str	r3, [r0, #0]
	      break;
   d4e6c:	e01f      	b.n	d4eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e6e:	2018      	movs	r0, #24
   d4e70:	680e      	ldr	r6, [r1, #0]
   d4e72:	f7ff f910 	bl	d4096 <_Znwj>
   d4e76:	4605      	mov	r5, r0
   d4e78:	b150      	cbz	r0, d4e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e7a:	4631      	mov	r1, r6
   d4e7c:	f7ff fec8 	bl	d4c10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e80:	6930      	ldr	r0, [r6, #16]
   d4e82:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e86:	b108      	cbz	r0, d4e8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4e88:	f002 fa36 	bl	d72f8 <strdup>
   d4e8c:	6128      	str	r0, [r5, #16]
   d4e8e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e90:	6025      	str	r5, [r4, #0]
   d4e92:	e00c      	b.n	d4eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e94:	6804      	ldr	r4, [r0, #0]
   d4e96:	b154      	cbz	r4, d4eae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4e98:	f104 0010 	add.w	r0, r4, #16
   d4e9c:	f7ff fded 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	f7ff fdd2 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ea6:	2118      	movs	r1, #24
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f001 f8d0 	bl	d604e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4eae:	2000      	movs	r0, #0
   d4eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eb2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4eb2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	6083      	str	r3, [r0, #8]
   d4eb8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4eba:	4604      	mov	r4, r0
   d4ebc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4ebe:	b12b      	cbz	r3, d4ecc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ec0:	2202      	movs	r2, #2
   d4ec2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ec4:	68eb      	ldr	r3, [r5, #12]
   d4ec6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4ec8:	68ab      	ldr	r3, [r5, #8]
   d4eca:	60a3      	str	r3, [r4, #8]
	}
    }
   d4ecc:	4620      	mov	r0, r4
   d4ece:	bd38      	pop	{r3, r4, r5, pc}

000d4ed0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ed0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ed2:	b570      	push	{r4, r5, r6, lr}
   d4ed4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ed6:	d006      	beq.n	d4ee6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4ed8:	2a03      	cmp	r2, #3
   d4eda:	d011      	beq.n	d4f00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4edc:	2a01      	cmp	r2, #1
   d4ede:	d118      	bne.n	d4f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ee0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ee2:	6003      	str	r3, [r0, #0]
	      break;
   d4ee4:	e015      	b.n	d4f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ee6:	2014      	movs	r0, #20
   d4ee8:	680e      	ldr	r6, [r1, #0]
   d4eea:	f7ff f8d4 	bl	d4096 <_Znwj>
   d4eee:	4605      	mov	r5, r0
   d4ef0:	b120      	cbz	r0, d4efc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ef2:	4631      	mov	r1, r6
   d4ef4:	f7ff ffdd 	bl	d4eb2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4ef8:	7c33      	ldrb	r3, [r6, #16]
   d4efa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4efc:	6025      	str	r5, [r4, #0]
   d4efe:	e008      	b.n	d4f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f00:	6804      	ldr	r4, [r0, #0]
   d4f02:	b134      	cbz	r4, d4f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f04:	4620      	mov	r0, r4
   d4f06:	f7ff fda0 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f0a:	2114      	movs	r1, #20
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f001 f89e 	bl	d604e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4f12:	2000      	movs	r0, #0
   d4f14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4f18:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4f1a:	2300      	movs	r3, #0
   d4f1c:	b087      	sub	sp, #28
   d4f1e:	460c      	mov	r4, r1
   d4f20:	f3bf 8f5f 	dmb	sy
   d4f24:	e850 6f00 	ldrex	r6, [r0]
   d4f28:	e840 3200 	strex	r2, r3, [r0]
   d4f2c:	2a00      	cmp	r2, #0
   d4f2e:	d1f9      	bne.n	d4f24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4f30:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4f34:	2e00      	cmp	r6, #0
   d4f36:	d03f      	beq.n	d4fb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4f38:	4618      	mov	r0, r3
   d4f3a:	f7ff fc4b 	bl	d47d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4f3e:	4607      	mov	r7, r0
   d4f40:	b120      	cbz	r0, d4f4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f42:	4621      	mov	r1, r4
   d4f44:	4630      	mov	r0, r6
   d4f46:	f7ff fe53 	bl	d4bf0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4f4a:	e02e      	b.n	d4faa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f4c:	4631      	mov	r1, r6
   d4f4e:	a801      	add	r0, sp, #4
   d4f50:	f7ff ffaf 	bl	d4eb2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4f54:	7823      	ldrb	r3, [r4, #0]
   d4f56:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f5a:	2010      	movs	r0, #16
   d4f5c:	f7ff f89b 	bl	d4096 <_Znwj>
   d4f60:	4605      	mov	r5, r0
   d4f62:	b1d0      	cbz	r0, d4f9a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f64:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f66:	2014      	movs	r0, #20
   d4f68:	f7ff f895 	bl	d4096 <_Znwj>
   d4f6c:	4604      	mov	r4, r0
   d4f6e:	b178      	cbz	r0, d4f90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f70:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f72:	4601      	mov	r1, r0
   d4f74:	a801      	add	r0, sp, #4
   d4f76:	f7ff fe06 	bl	d4b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f7a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f7e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4f82:	9203      	str	r2, [sp, #12]
   d4f84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f86:	60e3      	str	r3, [r4, #12]
   d4f88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f8c:	9204      	str	r2, [sp, #16]
   d4f8e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f90:	4b0a      	ldr	r3, [pc, #40]	; (d4fbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4f92:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f94:	4b0a      	ldr	r3, [pc, #40]	; (d4fc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f96:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4f98:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f9a:	a801      	add	r0, sp, #4
   d4f9c:	f7ff fd55 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4fa0:	2200      	movs	r2, #0
   d4fa2:	4629      	mov	r1, r5
   d4fa4:	4807      	ldr	r0, [pc, #28]	; (d4fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4fa6:	f7ff fc1d 	bl	d47e4 <application_thread_invoke>
   d4faa:	4630      	mov	r0, r6
   d4fac:	f7ff fd4d 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4fb0:	2110      	movs	r1, #16
   d4fb2:	4630      	mov	r0, r6
   d4fb4:	f001 f84b 	bl	d604e <_ZdlPvj>
        }
    }
   d4fb8:	b007      	add	sp, #28
   d4fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fbc:	000d4c03 	.word	0x000d4c03
   d4fc0:	000d4ed1 	.word	0x000d4ed1
   d4fc4:	000d4985 	.word	0x000d4985

000d4fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4fc8:	b530      	push	{r4, r5, lr}
   d4fca:	b085      	sub	sp, #20
   d4fcc:	4604      	mov	r4, r0
   d4fce:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4fd0:	4668      	mov	r0, sp
   d4fd2:	4611      	mov	r1, r2
   d4fd4:	f7ff fdb9 	bl	d4b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4fd8:	b17c      	cbz	r4, d4ffa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4fda:	b224      	sxth	r4, r4
   d4fdc:	4628      	mov	r0, r5
   d4fde:	b10d      	cbz	r5, d4fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4fe0:	f002 f98a 	bl	d72f8 <strdup>
   d4fe4:	9002      	str	r0, [sp, #8]
   d4fe6:	a902      	add	r1, sp, #8
   d4fe8:	4668      	mov	r0, sp
   d4fea:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4fee:	f7ff fe1f 	bl	d4c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ff2:	a802      	add	r0, sp, #8
   d4ff4:	f7ff fd41 	bl	d4a7a <_ZN8particle5ErrorD1Ev>
   d4ff8:	e01d      	b.n	d5036 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4ffa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ffc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5000:	f04f 0201 	mov.w	r2, #1
   d5004:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5008:	42a3      	cmp	r3, r4
   d500a:	d103      	bne.n	d5014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d500c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5010:	2900      	cmp	r1, #0
   d5012:	d1f7      	bne.n	d5004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5014:	d002      	beq.n	d501c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5016:	f88d 3008 	strb.w	r3, [sp, #8]
   d501a:	e00c      	b.n	d5036 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d501c:	f110 010c 	adds.w	r1, r0, #12
   d5020:	f04f 0301 	mov.w	r3, #1
   d5024:	bf18      	it	ne
   d5026:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5028:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d502c:	3004      	adds	r0, #4
   d502e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5032:	f7ff ff71 	bl	d4f18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5036:	a801      	add	r0, sp, #4
   d5038:	f7ff fcd7 	bl	d49ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d503c:	b005      	add	sp, #20
   d503e:	bd30      	pop	{r4, r5, pc}

000d5040 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	4611      	mov	r1, r2
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff bc49 	b.w	d48dc <network_listening>

000d504a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	4611      	mov	r1, r2
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bc54 	b.w	d48fc <network_get_listen_timeout>

000d5054 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5054:	2200      	movs	r2, #0
   d5056:	6840      	ldr	r0, [r0, #4]
   d5058:	f7ff bc48 	b.w	d48ec <network_set_listen_timeout>

000d505c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d505c:	2200      	movs	r2, #0
   d505e:	f081 0101 	eor.w	r1, r1, #1
   d5062:	6840      	ldr	r0, [r0, #4]
   d5064:	f7ff bc32 	b.w	d48cc <network_listen>

000d5068 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5068:	2300      	movs	r3, #0
   d506a:	461a      	mov	r2, r3
   d506c:	4619      	mov	r1, r3
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bc24 	b.w	d48bc <network_off>

000d5074 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5074:	2300      	movs	r3, #0
   d5076:	461a      	mov	r2, r3
   d5078:	4619      	mov	r1, r3
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bc16 	b.w	d48ac <network_on>

000d5080 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5080:	2200      	movs	r2, #0
   d5082:	4611      	mov	r1, r2
   d5084:	6840      	ldr	r0, [r0, #4]
   d5086:	f7ff bc09 	b.w	d489c <network_ready>

000d508a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d508a:	2200      	movs	r2, #0
   d508c:	4611      	mov	r1, r2
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bbf4 	b.w	d487c <network_connecting>

000d5094 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5094:	2200      	movs	r2, #0
   d5096:	2102      	movs	r1, #2
   d5098:	6840      	ldr	r0, [r0, #4]
   d509a:	f7ff bbf7 	b.w	d488c <network_disconnect>

000d509e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d509e:	2300      	movs	r3, #0
   d50a0:	461a      	mov	r2, r3
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	f7ff bbe2 	b.w	d486c <network_connect>

000d50a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50a8:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50aa:	2203      	movs	r2, #3
   d50ac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50ae:	4a02      	ldr	r2, [pc, #8]	; (d50b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50b0:	601a      	str	r2, [r3, #0]
   d50b2:	4770      	bx	lr
   d50b4:	2003e3d8 	.word	0x2003e3d8
   d50b8:	000d743c 	.word	0x000d743c

000d50bc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d50bc:	4770      	bx	lr

000d50be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d50be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50c0:	4606      	mov	r6, r0
   d50c2:	4615      	mov	r5, r2
   d50c4:	460c      	mov	r4, r1
   d50c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d50c8:	42bc      	cmp	r4, r7
   d50ca:	d006      	beq.n	d50da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d50cc:	6833      	ldr	r3, [r6, #0]
   d50ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d50d2:	689b      	ldr	r3, [r3, #8]
   d50d4:	4630      	mov	r0, r6
   d50d6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d50d8:	e7f6      	b.n	d50c8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d50da:	4628      	mov	r0, r5
   d50dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50de <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d50de:	2200      	movs	r2, #0
   d50e0:	7c00      	ldrb	r0, [r0, #16]
   d50e2:	f7ff ba97 	b.w	d4614 <HAL_I2C_Write_Data>

000d50e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d50e6:	2100      	movs	r1, #0
   d50e8:	7c00      	ldrb	r0, [r0, #16]
   d50ea:	f7ff ba9b 	b.w	d4624 <HAL_I2C_Available_Data>

000d50ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d50ee:	2100      	movs	r1, #0
   d50f0:	7c00      	ldrb	r0, [r0, #16]
   d50f2:	f7ff ba9f 	b.w	d4634 <HAL_I2C_Read_Data>

000d50f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d50f6:	2100      	movs	r1, #0
   d50f8:	7c00      	ldrb	r0, [r0, #16]
   d50fa:	f7ff baa3 	b.w	d4644 <HAL_I2C_Peek_Data>

000d50fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d50fe:	2100      	movs	r1, #0
   d5100:	7c00      	ldrb	r0, [r0, #16]
   d5102:	f7ff baa7 	b.w	d4654 <HAL_I2C_Flush_Data>

000d5106 <_ZN7TwoWireD0Ev>:
   d5106:	b510      	push	{r4, lr}
   d5108:	2114      	movs	r1, #20
   d510a:	4604      	mov	r4, r0
   d510c:	f000 ff9f 	bl	d604e <_ZdlPvj>
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5114:	b510      	push	{r4, lr}
   d5116:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5118:	2300      	movs	r3, #0
   d511a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d511c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5120:	60a3      	str	r3, [r4, #8]
   d5122:	4b04      	ldr	r3, [pc, #16]	; (d5134 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5124:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5126:	4608      	mov	r0, r1
   d5128:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d512a:	4611      	mov	r1, r2
   d512c:	f7ff faa2 	bl	d4674 <HAL_I2C_Init>
}
   d5130:	4620      	mov	r0, r4
   d5132:	bd10      	pop	{r4, pc}
   d5134:	000d7470 	.word	0x000d7470

000d5138 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5138:	2100      	movs	r1, #0
   d513a:	7c00      	ldrb	r0, [r0, #16]
   d513c:	f7ff ba92 	b.w	d4664 <HAL_I2C_Is_Enabled>

000d5140 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5140:	4770      	bx	lr

000d5142 <_ZN9IPAddressD0Ev>:
   d5142:	b510      	push	{r4, lr}
   d5144:	2118      	movs	r1, #24
   d5146:	4604      	mov	r4, r0
   d5148:	f000 ff81 	bl	d604e <_ZdlPvj>
   d514c:	4620      	mov	r0, r4
   d514e:	bd10      	pop	{r4, pc}

000d5150 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5150:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5152:	7d03      	ldrb	r3, [r0, #20]
   d5154:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5156:	b08d      	sub	sp, #52	; 0x34
   d5158:	460e      	mov	r6, r1
   d515a:	f100 0704 	add.w	r7, r0, #4
   d515e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5162:	d002      	beq.n	d516a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5164:	f100 0508 	add.w	r5, r0, #8
   d5168:	e018      	b.n	d519c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d516a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d516c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d516e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5172:	232f      	movs	r3, #47	; 0x2f
   d5174:	462a      	mov	r2, r5
   d5176:	200a      	movs	r0, #10
   d5178:	f7ff fa84 	bl	d4684 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d517c:	4628      	mov	r0, r5
   d517e:	f002 f8d6 	bl	d732e <strlen>
   d5182:	6833      	ldr	r3, [r6, #0]
   d5184:	4602      	mov	r2, r0
   d5186:	68db      	ldr	r3, [r3, #12]
   d5188:	4629      	mov	r1, r5
   d518a:	4630      	mov	r0, r6
   d518c:	4798      	blx	r3
   d518e:	e00f      	b.n	d51b0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5190:	b124      	cbz	r4, d519c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5192:	212e      	movs	r1, #46	; 0x2e
   d5194:	4630      	mov	r0, r6
   d5196:	f000 f9d9 	bl	d554c <_ZN5Print5printEc>
   d519a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d519c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d51a0:	220a      	movs	r2, #10
   d51a2:	4630      	mov	r0, r6
   d51a4:	f000 f9eb 	bl	d557e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51a8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51aa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d51ac:	d1f0      	bne.n	d5190 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d51ae:	4620      	mov	r0, r4
    }
    return n;
}
   d51b0:	b00d      	add	sp, #52	; 0x34
   d51b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51b4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d51b4:	b510      	push	{r4, lr}
   d51b6:	4b05      	ldr	r3, [pc, #20]	; (d51cc <_ZN9IPAddressC1Ev+0x18>)
   d51b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d51ba:	2211      	movs	r2, #17
   d51bc:	f840 3b04 	str.w	r3, [r0], #4
   d51c0:	2100      	movs	r1, #0
   d51c2:	f002 f856 	bl	d7272 <memset>
{
    clear();
}
   d51c6:	4620      	mov	r0, r4
   d51c8:	bd10      	pop	{r4, pc}
   d51ca:	bf00      	nop
   d51cc:	000d7498 	.word	0x000d7498

000d51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d51d0:	4603      	mov	r3, r0
   d51d2:	4a07      	ldr	r2, [pc, #28]	; (d51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51d4:	b510      	push	{r4, lr}
   d51d6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d51da:	f101 0210 	add.w	r2, r1, #16
   d51de:	f851 4b04 	ldr.w	r4, [r1], #4
   d51e2:	f843 4b04 	str.w	r4, [r3], #4
   d51e6:	4291      	cmp	r1, r2
   d51e8:	d1f9      	bne.n	d51de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51ea:	780a      	ldrb	r2, [r1, #0]
   d51ec:	701a      	strb	r2, [r3, #0]
}
   d51ee:	bd10      	pop	{r4, pc}
   d51f0:	000d7498 	.word	0x000d7498

000d51f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d51f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5202:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5206:	2304      	movs	r3, #4
   d5208:	6041      	str	r1, [r0, #4]
   d520a:	7503      	strb	r3, [r0, #20]
   d520c:	bd10      	pop	{r4, pc}

000d520e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d520e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5210:	780d      	ldrb	r5, [r1, #0]
   d5212:	788b      	ldrb	r3, [r1, #2]
   d5214:	784a      	ldrb	r2, [r1, #1]
   d5216:	78c9      	ldrb	r1, [r1, #3]
   d5218:	9100      	str	r1, [sp, #0]
   d521a:	4629      	mov	r1, r5
   d521c:	f7ff ffea 	bl	d51f4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5220:	b003      	add	sp, #12
   d5222:	bd30      	pop	{r4, r5, pc}

000d5224 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5224:	4b01      	ldr	r3, [pc, #4]	; (d522c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5226:	4a02      	ldr	r2, [pc, #8]	; (d5230 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5228:	601a      	str	r2, [r3, #0]
   d522a:	4770      	bx	lr
   d522c:	2003e3e0 	.word	0x2003e3e0
   d5230:	000d7517 	.word	0x000d7517

000d5234 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5234:	2200      	movs	r2, #0
   d5236:	4611      	mov	r1, r2
   d5238:	6840      	ldr	r0, [r0, #4]
   d523a:	f7ff bb4f 	b.w	d48dc <network_listening>

000d523e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d523e:	2200      	movs	r2, #0
   d5240:	4611      	mov	r1, r2
   d5242:	6840      	ldr	r0, [r0, #4]
   d5244:	f7ff bb5a 	b.w	d48fc <network_get_listen_timeout>

000d5248 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5248:	2200      	movs	r2, #0
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f7ff bb4e 	b.w	d48ec <network_set_listen_timeout>

000d5250 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5250:	2200      	movs	r2, #0
   d5252:	f081 0101 	eor.w	r1, r1, #1
   d5256:	6840      	ldr	r0, [r0, #4]
   d5258:	f7ff bb38 	b.w	d48cc <network_listen>

000d525c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d525c:	2300      	movs	r3, #0
   d525e:	461a      	mov	r2, r3
   d5260:	2101      	movs	r1, #1
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	f7ff bb2a 	b.w	d48bc <network_off>

000d5268 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5268:	2300      	movs	r3, #0
   d526a:	461a      	mov	r2, r3
   d526c:	4619      	mov	r1, r3
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff bb1c 	b.w	d48ac <network_on>

000d5274 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5274:	2200      	movs	r2, #0
   d5276:	4611      	mov	r1, r2
   d5278:	6840      	ldr	r0, [r0, #4]
   d527a:	f7ff bb0f 	b.w	d489c <network_ready>

000d527e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d527e:	2200      	movs	r2, #0
   d5280:	4611      	mov	r1, r2
   d5282:	6840      	ldr	r0, [r0, #4]
   d5284:	f7ff bafa 	b.w	d487c <network_connecting>

000d5288 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5288:	2200      	movs	r2, #0
   d528a:	2102      	movs	r1, #2
   d528c:	6840      	ldr	r0, [r0, #4]
   d528e:	f7ff bafd 	b.w	d488c <network_disconnect>

000d5292 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5292:	2300      	movs	r3, #0
   d5294:	461a      	mov	r2, r3
   d5296:	6840      	ldr	r0, [r0, #4]
   d5298:	f7ff bae8 	b.w	d486c <network_connect>

000d529c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d529c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d529e:	4605      	mov	r5, r0
   d52a0:	b188      	cbz	r0, d52c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52a2:	6804      	ldr	r4, [r0, #0]
   d52a4:	b14c      	cbz	r4, d52ba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d52a6:	68a3      	ldr	r3, [r4, #8]
   d52a8:	b11b      	cbz	r3, d52b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52aa:	2203      	movs	r2, #3
   d52ac:	4621      	mov	r1, r4
   d52ae:	4620      	mov	r0, r4
   d52b0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52b2:	2110      	movs	r1, #16
   d52b4:	4620      	mov	r0, r4
   d52b6:	f000 feca 	bl	d604e <_ZdlPvj>
   d52ba:	4628      	mov	r0, r5
   d52bc:	2114      	movs	r1, #20
      }
   d52be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52c2:	f000 bec4 	b.w	d604e <_ZdlPvj>
   d52c6:	bd38      	pop	{r3, r4, r5, pc}

000d52c8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d52c8:	b110      	cbz	r0, d52d0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d52ca:	6803      	ldr	r3, [r0, #0]
   d52cc:	685b      	ldr	r3, [r3, #4]
   d52ce:	4718      	bx	r3
   d52d0:	4770      	bx	lr

000d52d2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d52d2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52d4:	6803      	ldr	r3, [r0, #0]
   d52d6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52d8:	b1bb      	cbz	r3, d530a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52da:	6858      	ldr	r0, [r3, #4]
   d52dc:	f7ff f932 	bl	d4544 <os_thread_is_current>
   d52e0:	b978      	cbnz	r0, d5302 <_ZN6ThreadD1Ev+0x30>
   d52e2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52e4:	7c5a      	ldrb	r2, [r3, #17]
   d52e6:	b912      	cbnz	r2, d52ee <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52e8:	6858      	ldr	r0, [r3, #4]
   d52ea:	f7ff f933 	bl	d4554 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52ee:	6823      	ldr	r3, [r4, #0]
   d52f0:	6858      	ldr	r0, [r3, #4]
   d52f2:	f7ff f937 	bl	d4564 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52f6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52f8:	2300      	movs	r3, #0
   d52fa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52fc:	b128      	cbz	r0, d530a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d52fe:	f7ff ffcd 	bl	d529c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5302:	6820      	ldr	r0, [r4, #0]
   d5304:	b108      	cbz	r0, d530a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5306:	f7ff ffc9 	bl	d529c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d530a:	4620      	mov	r0, r4
   d530c:	bd10      	pop	{r4, pc}

000d530e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d530e:	b538      	push	{r3, r4, r5, lr}
   d5310:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5312:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5316:	b108      	cbz	r0, d531c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5318:	f7fe fec1 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d531c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5320:	b108      	cbz	r0, d5326 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5322:	f7ff f92f 	bl	d4584 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5326:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d532a:	b135      	cbz	r5, d533a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d532c:	4628      	mov	r0, r5
   d532e:	f7ff ffd0 	bl	d52d2 <_ZN6ThreadD1Ev>
   d5332:	2104      	movs	r1, #4
   d5334:	4628      	mov	r0, r5
   d5336:	f000 fe8a 	bl	d604e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d533a:	6820      	ldr	r0, [r4, #0]
   d533c:	b108      	cbz	r0, d5342 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d533e:	f7ff ffc3 	bl	d52c8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5342:	4620      	mov	r0, r4
   d5344:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5348 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5348:	b510      	push	{r4, lr}
   d534a:	4b04      	ldr	r3, [pc, #16]	; (d535c <_ZN5spark9MeshClassD1Ev+0x14>)
   d534c:	4604      	mov	r4, r0
   d534e:	f840 3b08 	str.w	r3, [r0], #8
   d5352:	f7ff ffdc 	bl	d530e <_ZN5spark11MeshPublishD1Ev>
   d5356:	4620      	mov	r0, r4
   d5358:	bd10      	pop	{r4, pc}
   d535a:	bf00      	nop
   d535c:	000d758c 	.word	0x000d758c

000d5360 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5360:	b538      	push	{r3, r4, r5, lr}
   d5362:	4c0e      	ldr	r4, [pc, #56]	; (d539c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5364:	4b0e      	ldr	r3, [pc, #56]	; (d53a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5366:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5368:	2500      	movs	r5, #0
   d536a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d536c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5370:	6063      	str	r3, [r4, #4]
   d5372:	60a5      	str	r5, [r4, #8]
   d5374:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5378:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d537c:	f7ff f8fa 	bl	d4574 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5380:	4b08      	ldr	r3, [pc, #32]	; (d53a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5382:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5386:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d538a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d538c:	4620      	mov	r0, r4
   d538e:	4a06      	ldr	r2, [pc, #24]	; (d53a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5390:	4906      	ldr	r1, [pc, #24]	; (d53ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5396:	f000 be55 	b.w	d6044 <__aeabi_atexit>
   d539a:	bf00      	nop
   d539c:	2003e3e4 	.word	0x2003e3e4
   d53a0:	000d75c0 	.word	0x000d75c0
   d53a4:	000d758c 	.word	0x000d758c
   d53a8:	2003e330 	.word	0x2003e330
   d53ac:	000d5349 	.word	0x000d5349

000d53b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d53b0:	2300      	movs	r3, #0
   d53b2:	461a      	mov	r2, r3
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f7ff ba59 	b.w	d486c <network_connect>

000d53ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d53ba:	2200      	movs	r2, #0
   d53bc:	2102      	movs	r1, #2
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff ba64 	b.w	d488c <network_disconnect>

000d53c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d53c4:	2200      	movs	r2, #0
   d53c6:	4611      	mov	r1, r2
   d53c8:	6840      	ldr	r0, [r0, #4]
   d53ca:	f7ff ba57 	b.w	d487c <network_connecting>

000d53ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d53ce:	2200      	movs	r2, #0
   d53d0:	4611      	mov	r1, r2
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	f7ff ba62 	b.w	d489c <network_ready>

000d53d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d53d8:	2300      	movs	r3, #0
   d53da:	461a      	mov	r2, r3
   d53dc:	4619      	mov	r1, r3
   d53de:	6840      	ldr	r0, [r0, #4]
   d53e0:	f7ff ba64 	b.w	d48ac <network_on>

000d53e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d53e4:	2300      	movs	r3, #0
   d53e6:	461a      	mov	r2, r3
   d53e8:	4619      	mov	r1, r3
   d53ea:	6840      	ldr	r0, [r0, #4]
   d53ec:	f7ff ba66 	b.w	d48bc <network_off>

000d53f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d53f0:	2200      	movs	r2, #0
   d53f2:	f081 0101 	eor.w	r1, r1, #1
   d53f6:	6840      	ldr	r0, [r0, #4]
   d53f8:	f7ff ba68 	b.w	d48cc <network_listen>

000d53fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d53fc:	2200      	movs	r2, #0
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	f7ff ba74 	b.w	d48ec <network_set_listen_timeout>

000d5404 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5404:	2200      	movs	r2, #0
   d5406:	4611      	mov	r1, r2
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	f7ff ba77 	b.w	d48fc <network_get_listen_timeout>

000d540e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d540e:	2200      	movs	r2, #0
   d5410:	4611      	mov	r1, r2
   d5412:	6840      	ldr	r0, [r0, #4]
   d5414:	f7ff ba62 	b.w	d48dc <network_listening>

000d5418 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d541c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d541e:	b095      	sub	sp, #84	; 0x54
   d5420:	4616      	mov	r6, r2
   d5422:	460d      	mov	r5, r1
   d5424:	4607      	mov	r7, r0
    IPAddress addr;
   d5426:	f7ff fec5 	bl	d51b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d542a:	4621      	mov	r1, r4
   d542c:	2220      	movs	r2, #32
   d542e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5430:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5432:	f001 ff1e 	bl	d7272 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5436:	2340      	movs	r3, #64	; 0x40
   d5438:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d543a:	4621      	mov	r1, r4
   d543c:	466b      	mov	r3, sp
   d543e:	aa0c      	add	r2, sp, #48	; 0x30
   d5440:	4630      	mov	r0, r6
   d5442:	f7ff f92f 	bl	d46a4 <netdb_getaddrinfo>
    if (!r) {
   d5446:	4604      	mov	r4, r0
   d5448:	2800      	cmp	r0, #0
   d544a:	d144      	bne.n	d54d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d544c:	4602      	mov	r2, r0
   d544e:	2101      	movs	r1, #1
   d5450:	6868      	ldr	r0, [r5, #4]
   d5452:	f7ff fa23 	bl	d489c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5456:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5458:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d545a:	4622      	mov	r2, r4
   d545c:	6868      	ldr	r0, [r5, #4]
   d545e:	f7ff fa1d 	bl	d489c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5462:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5464:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5466:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5468:	2e00      	cmp	r6, #0
   d546a:	d034      	beq.n	d54d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d546c:	2900      	cmp	r1, #0
   d546e:	d132      	bne.n	d54d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5470:	6873      	ldr	r3, [r6, #4]
   d5472:	2b02      	cmp	r3, #2
   d5474:	d002      	beq.n	d547c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5476:	2b0a      	cmp	r3, #10
   d5478:	d009      	beq.n	d548e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d547a:	e02a      	b.n	d54d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d547c:	f1b8 0f00 	cmp.w	r8, #0
   d5480:	d027      	beq.n	d54d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5482:	6971      	ldr	r1, [r6, #20]
   d5484:	4638      	mov	r0, r7
   d5486:	3104      	adds	r1, #4
   d5488:	f7ff fec1 	bl	d520e <_ZN9IPAddressaSEPKh>
   d548c:	e020      	b.n	d54d0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d548e:	f1b9 0f00 	cmp.w	r9, #0
   d5492:	d01e      	beq.n	d54d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5494:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5496:	2211      	movs	r2, #17
   d5498:	a801      	add	r0, sp, #4
   d549a:	f001 feea 	bl	d7272 <memset>
                    a.v = 6;
   d549e:	2306      	movs	r3, #6
   d54a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54a4:	ad01      	add	r5, sp, #4
   d54a6:	f104 0308 	add.w	r3, r4, #8
   d54aa:	3418      	adds	r4, #24
   d54ac:	6818      	ldr	r0, [r3, #0]
   d54ae:	6859      	ldr	r1, [r3, #4]
   d54b0:	462a      	mov	r2, r5
   d54b2:	c203      	stmia	r2!, {r0, r1}
   d54b4:	3308      	adds	r3, #8
   d54b6:	42a3      	cmp	r3, r4
   d54b8:	4615      	mov	r5, r2
   d54ba:	d1f7      	bne.n	d54ac <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d54bc:	a901      	add	r1, sp, #4
   d54be:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d54c0:	ad07      	add	r5, sp, #28
   d54c2:	f7ff fe85 	bl	d51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d54c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54c8:	1d3c      	adds	r4, r7, #4
   d54ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54cc:	682b      	ldr	r3, [r5, #0]
   d54ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d54d0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54d2:	69f6      	ldr	r6, [r6, #28]
   d54d4:	e7c8      	b.n	d5468 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d54d6:	9800      	ldr	r0, [sp, #0]
   d54d8:	f7ff f8dc 	bl	d4694 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d54dc:	4638      	mov	r0, r7
   d54de:	b015      	add	sp, #84	; 0x54
   d54e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d54e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d54e4:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d54e6:	4a03      	ldr	r2, [pc, #12]	; (d54f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d54e8:	601a      	str	r2, [r3, #0]
   d54ea:	2200      	movs	r2, #0
   d54ec:	605a      	str	r2, [r3, #4]
   d54ee:	4770      	bx	lr
   d54f0:	2003e5b8 	.word	0x2003e5b8
   d54f4:	000d75c0 	.word	0x000d75c0

000d54f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d54f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54fa:	4606      	mov	r6, r0
   d54fc:	460d      	mov	r5, r1
   d54fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5500:	2400      	movs	r4, #0
  while (size--) {
   d5502:	42bd      	cmp	r5, r7
   d5504:	d00c      	beq.n	d5520 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5506:	6833      	ldr	r3, [r6, #0]
   d5508:	f815 1b01 	ldrb.w	r1, [r5], #1
   d550c:	689b      	ldr	r3, [r3, #8]
   d550e:	4630      	mov	r0, r6
   d5510:	4798      	blx	r3
     if (chunk>=0)
   d5512:	2800      	cmp	r0, #0
   d5514:	db01      	blt.n	d551a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5516:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5518:	e7f3      	b.n	d5502 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d551a:	2c00      	cmp	r4, #0
   d551c:	bf08      	it	eq
   d551e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5520:	4620      	mov	r0, r4
   d5522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5524 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5524:	b570      	push	{r4, r5, r6, lr}
   d5526:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5528:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d552a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d552c:	b149      	cbz	r1, d5542 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d552e:	f001 fefe 	bl	d732e <strlen>
   d5532:	682b      	ldr	r3, [r5, #0]
   d5534:	4602      	mov	r2, r0
   d5536:	4621      	mov	r1, r4
   d5538:	4628      	mov	r0, r5
   d553a:	68db      	ldr	r3, [r3, #12]
    }
   d553c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5540:	4718      	bx	r3
    }
   d5542:	bd70      	pop	{r4, r5, r6, pc}

000d5544 <_ZN5Print5printEPKc>:
   d5544:	b508      	push	{r3, lr}
   d5546:	f7ff ffed 	bl	d5524 <_ZN5Print5writeEPKc>
   d554a:	bd08      	pop	{r3, pc}

000d554c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d554c:	6803      	ldr	r3, [r0, #0]
   d554e:	689b      	ldr	r3, [r3, #8]
   d5550:	4718      	bx	r3

000d5552 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5552:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5554:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5556:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5558:	f7ff fff8 	bl	d554c <_ZN5Print5printEc>
  n += print('\n');
   d555c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d555e:	4604      	mov	r4, r0
  n += print('\n');
   d5560:	4628      	mov	r0, r5
   d5562:	f7ff fff3 	bl	d554c <_ZN5Print5printEc>
  return n;
}
   d5566:	4420      	add	r0, r4
   d5568:	bd38      	pop	{r3, r4, r5, pc}

000d556a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d556a:	b538      	push	{r3, r4, r5, lr}
   d556c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d556e:	f7ff ffd9 	bl	d5524 <_ZN5Print5writeEPKc>
   d5572:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5574:	4628      	mov	r0, r5
   d5576:	f7ff ffec 	bl	d5552 <_ZN5Print7printlnEv>
  return n;
}
   d557a:	4420      	add	r0, r4
   d557c:	bd38      	pop	{r3, r4, r5, pc}

000d557e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d557e:	b530      	push	{r4, r5, lr}
   d5580:	b08b      	sub	sp, #44	; 0x2c
   d5582:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5584:	2100      	movs	r1, #0
   d5586:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d558a:	2a01      	cmp	r2, #1
   d558c:	bf98      	it	ls
   d558e:	220a      	movls	r2, #10
   d5590:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5594:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5598:	fb05 3312 	mls	r3, r5, r2, r3
   d559c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d55a0:	2b09      	cmp	r3, #9
   d55a2:	bf94      	ite	ls
   d55a4:	3330      	addls	r3, #48	; 0x30
   d55a6:	3337      	addhi	r3, #55	; 0x37
   d55a8:	b2db      	uxtb	r3, r3
   d55aa:	4621      	mov	r1, r4
   d55ac:	f804 3901 	strb.w	r3, [r4], #-1
   d55b0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d55b2:	2d00      	cmp	r5, #0
   d55b4:	d1ee      	bne.n	d5594 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d55b6:	f7ff ffb5 	bl	d5524 <_ZN5Print5writeEPKc>
}
   d55ba:	b00b      	add	sp, #44	; 0x2c
   d55bc:	bd30      	pop	{r4, r5, pc}
	...

000d55c0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d55c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d55c4:	ec57 6b10 	vmov	r6, r7, d0
   d55c8:	4682      	mov	sl, r0
   d55ca:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d55cc:	ee10 2a10 	vmov	r2, s0
   d55d0:	463b      	mov	r3, r7
   d55d2:	ee10 0a10 	vmov	r0, s0
   d55d6:	4639      	mov	r1, r7
   d55d8:	f001 fc24 	bl	d6e24 <__aeabi_dcmpun>
   d55dc:	b108      	cbz	r0, d55e2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55de:	494e      	ldr	r1, [pc, #312]	; (d5718 <_ZN5Print10printFloatEdh+0x158>)
   d55e0:	e012      	b.n	d5608 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d55e2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d55e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d55ea:	4b4c      	ldr	r3, [pc, #304]	; (d571c <_ZN5Print10printFloatEdh+0x15c>)
   d55ec:	4630      	mov	r0, r6
   d55ee:	4649      	mov	r1, r9
   d55f0:	f001 fc18 	bl	d6e24 <__aeabi_dcmpun>
   d55f4:	b968      	cbnz	r0, d5612 <_ZN5Print10printFloatEdh+0x52>
   d55f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d55fa:	4b48      	ldr	r3, [pc, #288]	; (d571c <_ZN5Print10printFloatEdh+0x15c>)
   d55fc:	4630      	mov	r0, r6
   d55fe:	4649      	mov	r1, r9
   d5600:	f001 fbf2 	bl	d6de8 <__aeabi_dcmple>
   d5604:	b928      	cbnz	r0, d5612 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5606:	4946      	ldr	r1, [pc, #280]	; (d5720 <_ZN5Print10printFloatEdh+0x160>)
   d5608:	4650      	mov	r0, sl
   d560a:	f7ff ff8b 	bl	d5524 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5612:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5616:	4b43      	ldr	r3, [pc, #268]	; (d5724 <_ZN5Print10printFloatEdh+0x164>)
   d5618:	4630      	mov	r0, r6
   d561a:	4639      	mov	r1, r7
   d561c:	f001 fbf8 	bl	d6e10 <__aeabi_dcmpgt>
   d5620:	b108      	cbz	r0, d5626 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5622:	4941      	ldr	r1, [pc, #260]	; (d5728 <_ZN5Print10printFloatEdh+0x168>)
   d5624:	e7f0      	b.n	d5608 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5626:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d562a:	4b40      	ldr	r3, [pc, #256]	; (d572c <_ZN5Print10printFloatEdh+0x16c>)
   d562c:	4630      	mov	r0, r6
   d562e:	4639      	mov	r1, r7
   d5630:	f001 fbd0 	bl	d6dd4 <__aeabi_dcmplt>
   d5634:	2800      	cmp	r0, #0
   d5636:	d1f4      	bne.n	d5622 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5638:	2200      	movs	r2, #0
   d563a:	2300      	movs	r3, #0
   d563c:	4630      	mov	r0, r6
   d563e:	4639      	mov	r1, r7
   d5640:	f001 fbc8 	bl	d6dd4 <__aeabi_dcmplt>
   d5644:	b140      	cbz	r0, d5658 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5646:	212d      	movs	r1, #45	; 0x2d
   d5648:	4650      	mov	r0, sl
   d564a:	f7ff ff7f 	bl	d554c <_ZN5Print5printEc>
     number = -number;
   d564e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5652:	4604      	mov	r4, r0
     number = -number;
   d5654:	461f      	mov	r7, r3
   d5656:	e000      	b.n	d565a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5658:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d565a:	4935      	ldr	r1, [pc, #212]	; (d5730 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d565c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5660:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5662:	fa5f f388 	uxtb.w	r3, r8
   d5666:	429d      	cmp	r5, r3
   d5668:	d906      	bls.n	d5678 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d566a:	2200      	movs	r2, #0
   d566c:	4b31      	ldr	r3, [pc, #196]	; (d5734 <_ZN5Print10printFloatEdh+0x174>)
   d566e:	f001 fa69 	bl	d6b44 <__aeabi_ddiv>
   d5672:	f108 0801 	add.w	r8, r8, #1
   d5676:	e7f4      	b.n	d5662 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5678:	4632      	mov	r2, r6
   d567a:	463b      	mov	r3, r7
   d567c:	f000 ff86 	bl	d658c <__adddf3>
   d5680:	460f      	mov	r7, r1
   d5682:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5684:	f001 fc0c 	bl	d6ea0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5688:	220a      	movs	r2, #10
   d568a:	4601      	mov	r1, r0
   d568c:	4680      	mov	r8, r0
   d568e:	4650      	mov	r0, sl
   d5690:	f7ff ff75 	bl	d557e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5694:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5696:	b3e5      	cbz	r5, d5712 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5698:	4640      	mov	r0, r8
   d569a:	f001 f8b3 	bl	d6804 <__aeabi_ui2d>
   d569e:	4602      	mov	r2, r0
   d56a0:	460b      	mov	r3, r1
   d56a2:	4630      	mov	r0, r6
   d56a4:	4639      	mov	r1, r7
   d56a6:	f000 ff6f 	bl	d6588 <__aeabi_dsub>
   d56aa:	4606      	mov	r6, r0
   d56ac:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56ae:	4650      	mov	r0, sl
   d56b0:	4921      	ldr	r1, [pc, #132]	; (d5738 <_ZN5Print10printFloatEdh+0x178>)
   d56b2:	f7ff ff37 	bl	d5524 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d56b6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d56b8:	2200      	movs	r2, #0
   d56ba:	4b1e      	ldr	r3, [pc, #120]	; (d5734 <_ZN5Print10printFloatEdh+0x174>)
   d56bc:	4630      	mov	r0, r6
   d56be:	4639      	mov	r1, r7
   d56c0:	f001 f916 	bl	d68f0 <__aeabi_dmul>
   d56c4:	4606      	mov	r6, r0
   d56c6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d56c8:	f001 fbc2 	bl	d6e50 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d56cc:	f1b0 0900 	subs.w	r9, r0, #0
   d56d0:	da07      	bge.n	d56e2 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d56d2:	212d      	movs	r1, #45	; 0x2d
   d56d4:	4650      	mov	r0, sl
   d56d6:	f7ff ff39 	bl	d554c <_ZN5Print5printEc>
            val = -n;
   d56da:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d56de:	4680      	mov	r8, r0
   d56e0:	e002      	b.n	d56e8 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d56e2:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d56e4:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d56e8:	220a      	movs	r2, #10
   d56ea:	4650      	mov	r0, sl
   d56ec:	f7ff ff47 	bl	d557e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d56f0:	4440      	add	r0, r8
   d56f2:	4404      	add	r4, r0
    remainder -= toPrint;
   d56f4:	4648      	mov	r0, r9
   d56f6:	f001 f895 	bl	d6824 <__aeabi_i2d>
   d56fa:	4602      	mov	r2, r0
   d56fc:	460b      	mov	r3, r1
   d56fe:	4630      	mov	r0, r6
   d5700:	4639      	mov	r1, r7
   d5702:	f000 ff41 	bl	d6588 <__aeabi_dsub>
   d5706:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5708:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d570c:	4606      	mov	r6, r0
   d570e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5710:	d1d2      	bne.n	d56b8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5712:	4620      	mov	r0, r4
   d5714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5718:	000d75ec 	.word	0x000d75ec
   d571c:	7fefffff 	.word	0x7fefffff
   d5720:	000d75f6 	.word	0x000d75f6
   d5724:	41efffff 	.word	0x41efffff
   d5728:	000d75f0 	.word	0x000d75f0
   d572c:	c1efffff 	.word	0xc1efffff
   d5730:	3fe00000 	.word	0x3fe00000
   d5734:	40240000 	.word	0x40240000
   d5738:	000d75f4 	.word	0x000d75f4

000d573c <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d573c:	b2c9      	uxtb	r1, r1
   d573e:	f7ff bf3f 	b.w	d55c0 <_ZN5Print10printFloatEdh>

000d5742 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5742:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5744:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5746:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5748:	f7ff ff3a 	bl	d55c0 <_ZN5Print10printFloatEdh>
   d574c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d574e:	4628      	mov	r0, r5
   d5750:	f7ff feff 	bl	d5552 <_ZN5Print7printlnEv>
  return n;
}
   d5754:	4420      	add	r0, r4
   d5756:	bd38      	pop	{r3, r4, r5, pc}

000d5758 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5758:	b510      	push	{r4, lr}
   d575a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d575c:	f7ff f975 	bl	d4a4a <_ZNSt14_Function_baseD1Ev>
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5764:	4803      	ldr	r0, [pc, #12]	; (d5774 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5766:	4a04      	ldr	r2, [pc, #16]	; (d5778 <_GLOBAL__sub_I_RGB+0x14>)
   d5768:	4904      	ldr	r1, [pc, #16]	; (d577c <_GLOBAL__sub_I_RGB+0x18>)
   d576a:	2300      	movs	r3, #0
   d576c:	6083      	str	r3, [r0, #8]
   d576e:	f000 bc69 	b.w	d6044 <__aeabi_atexit>
   d5772:	bf00      	nop
   d5774:	2003e5c0 	.word	0x2003e5c0
   d5778:	2003e330 	.word	0x2003e330
   d577c:	000d5759 	.word	0x000d5759

000d5780 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5780:	b510      	push	{r4, lr}
   d5782:	4604      	mov	r4, r0
{
    _spi = spi;
   d5784:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5786:	4608      	mov	r0, r1
   d5788:	f7fe ff94 	bl	d46b4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d578c:	2300      	movs	r3, #0
   d578e:	6063      	str	r3, [r4, #4]
}
   d5790:	4620      	mov	r0, r4
   d5792:	bd10      	pop	{r4, pc}

000d5794 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5794:	7800      	ldrb	r0, [r0, #0]
   d5796:	f7fe bf95 	b.w	d46c4 <HAL_SPI_Is_Enabled>
	...

000d579c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d579c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57a0:	ec59 8b10 	vmov	r8, r9, d0
   d57a4:	4607      	mov	r7, r0
   d57a6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d57a8:	2200      	movs	r2, #0
   d57aa:	2300      	movs	r3, #0
   d57ac:	ee10 0a10 	vmov	r0, s0
   d57b0:	4649      	mov	r1, r9
   d57b2:	f001 fb0f 	bl	d6dd4 <__aeabi_dcmplt>
   d57b6:	b128      	cbz	r0, d57c4 <_Z4dtoadhPc+0x28>
        val = -val;
   d57b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d57bc:	4699      	mov	r9, r3
        *sout++ = '-';
   d57be:	232d      	movs	r3, #45	; 0x2d
   d57c0:	7033      	strb	r3, [r6, #0]
   d57c2:	3601      	adds	r6, #1
   d57c4:	2300      	movs	r3, #0
    }
    long scale = 1;
   d57c6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d57c8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d57ca:	b2d9      	uxtb	r1, r3
   d57cc:	428f      	cmp	r7, r1
   d57ce:	d902      	bls.n	d57d6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d57d0:	4354      	muls	r4, r2
   d57d2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d57d4:	e7f9      	b.n	d57ca <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d57d6:	4620      	mov	r0, r4
   d57d8:	f001 f824 	bl	d6824 <__aeabi_i2d>
   d57dc:	4642      	mov	r2, r8
   d57de:	464b      	mov	r3, r9
   d57e0:	f001 f886 	bl	d68f0 <__aeabi_dmul>
   d57e4:	4682      	mov	sl, r0
   d57e6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d57e8:	f001 fb92 	bl	d6f10 <__aeabi_d2ulz>
   d57ec:	4680      	mov	r8, r0
   d57ee:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d57f0:	f001 f848 	bl	d6884 <__aeabi_ul2d>
   d57f4:	4602      	mov	r2, r0
   d57f6:	460b      	mov	r3, r1
   d57f8:	4650      	mov	r0, sl
   d57fa:	4659      	mov	r1, fp
   d57fc:	f000 fec4 	bl	d6588 <__aeabi_dsub>
   d5800:	2200      	movs	r2, #0
   d5802:	4b17      	ldr	r3, [pc, #92]	; (d5860 <_Z4dtoadhPc+0xc4>)
   d5804:	f001 fafa 	bl	d6dfc <__aeabi_dcmpge>
   d5808:	b118      	cbz	r0, d5812 <_Z4dtoadhPc+0x76>
        fixed++;
   d580a:	f118 0801 	adds.w	r8, r8, #1
   d580e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5812:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5814:	4622      	mov	r2, r4
   d5816:	462b      	mov	r3, r5
   d5818:	4640      	mov	r0, r8
   d581a:	4649      	mov	r1, r9
   d581c:	f001 fb60 	bl	d6ee0 <__aeabi_uldivmod>
   d5820:	2301      	movs	r3, #1
   d5822:	220a      	movs	r2, #10
   d5824:	4631      	mov	r1, r6
   d5826:	f000 fa8e 	bl	d5d46 <ultoa>
    if (prec) {
   d582a:	b1af      	cbz	r7, d5858 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d582c:	4630      	mov	r0, r6
   d582e:	f001 fd7e 	bl	d732e <strlen>
        *sout++ = '.';
   d5832:	232e      	movs	r3, #46	; 0x2e
   d5834:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5836:	3001      	adds	r0, #1
   d5838:	4406      	add	r6, r0
   d583a:	4622      	mov	r2, r4
   d583c:	462b      	mov	r3, r5
   d583e:	4640      	mov	r0, r8
   d5840:	4649      	mov	r1, r9
   d5842:	f001 fb4d 	bl	d6ee0 <__aeabi_uldivmod>
   d5846:	463b      	mov	r3, r7
   d5848:	4610      	mov	r0, r2
   d584a:	4631      	mov	r1, r6
   d584c:	220a      	movs	r2, #10
    }
}
   d584e:	b001      	add	sp, #4
   d5850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5854:	f000 ba77 	b.w	d5d46 <ultoa>
    }
}
   d5858:	b001      	add	sp, #4
   d585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d585e:	bf00      	nop
   d5860:	3fe00000 	.word	0x3fe00000

000d5864 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5864:	b510      	push	{r4, lr}
   d5866:	4604      	mov	r4, r0
{
	free(buffer);
   d5868:	6800      	ldr	r0, [r0, #0]
   d586a:	f7ff f857 	bl	d491c <free>
}
   d586e:	4620      	mov	r0, r4
   d5870:	bd10      	pop	{r4, pc}

000d5872 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5872:	b510      	push	{r4, lr}
   d5874:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5876:	6800      	ldr	r0, [r0, #0]
   d5878:	b108      	cbz	r0, d587e <_ZN6String10invalidateEv+0xc>
   d587a:	f7ff f84f 	bl	d491c <free>
	buffer = NULL;
   d587e:	2300      	movs	r3, #0
   d5880:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5882:	60a3      	str	r3, [r4, #8]
   d5884:	6063      	str	r3, [r4, #4]
   d5886:	bd10      	pop	{r4, pc}

000d5888 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5888:	b538      	push	{r3, r4, r5, lr}
   d588a:	4604      	mov	r4, r0
   d588c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d588e:	6800      	ldr	r0, [r0, #0]
   d5890:	3101      	adds	r1, #1
   d5892:	f7ff f84b 	bl	d492c <realloc>
	if (newbuffer) {
   d5896:	b110      	cbz	r0, d589e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5898:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d589c:	2001      	movs	r0, #1
	}
	return 0;
}
   d589e:	bd38      	pop	{r3, r4, r5, pc}

000d58a0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d58a2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d58a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d58a6:	b113      	cbz	r3, d58ae <_ZN6String7reserveEj+0xe>
   d58a8:	6843      	ldr	r3, [r0, #4]
   d58aa:	428b      	cmp	r3, r1
   d58ac:	d207      	bcs.n	d58be <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d58ae:	4620      	mov	r0, r4
   d58b0:	f7ff ffea 	bl	d5888 <_ZN6String12changeBufferEj>
   d58b4:	b120      	cbz	r0, d58c0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d58b6:	68a3      	ldr	r3, [r4, #8]
   d58b8:	b90b      	cbnz	r3, d58be <_ZN6String7reserveEj+0x1e>
   d58ba:	6822      	ldr	r2, [r4, #0]
   d58bc:	7013      	strb	r3, [r2, #0]
   d58be:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d58c0:	bd10      	pop	{r4, pc}

000d58c2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d58c2:	b570      	push	{r4, r5, r6, lr}
   d58c4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d58c6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d58c8:	4604      	mov	r4, r0
   d58ca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d58cc:	f7ff ffe8 	bl	d58a0 <_ZN6String7reserveEj>
   d58d0:	b918      	cbnz	r0, d58da <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d58d2:	4620      	mov	r0, r4
   d58d4:	f7ff ffcd 	bl	d5872 <_ZN6String10invalidateEv>
		return *this;
   d58d8:	e009      	b.n	d58ee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d58da:	462a      	mov	r2, r5
   d58dc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d58de:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d58e0:	6820      	ldr	r0, [r4, #0]
   d58e2:	f001 fcbb 	bl	d725c <memcpy>
	buffer[len] = 0;
   d58e6:	6822      	ldr	r2, [r4, #0]
   d58e8:	68a3      	ldr	r3, [r4, #8]
   d58ea:	2100      	movs	r1, #0
   d58ec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d58ee:	4620      	mov	r0, r4
   d58f0:	bd70      	pop	{r4, r5, r6, pc}

000d58f2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d58f2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d58f4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d58f6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d58f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d58fa:	6043      	str	r3, [r0, #4]
	len = 0;
   d58fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d58fe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5900:	460d      	mov	r5, r1
   d5902:	b139      	cbz	r1, d5914 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5904:	4608      	mov	r0, r1
   d5906:	f001 fd12 	bl	d732e <strlen>
   d590a:	4629      	mov	r1, r5
   d590c:	4602      	mov	r2, r0
   d590e:	4620      	mov	r0, r4
   d5910:	f7ff ffd7 	bl	d58c2 <_ZN6String4copyEPKcj>
}
   d5914:	4620      	mov	r0, r4
   d5916:	bd38      	pop	{r3, r4, r5, pc}

000d5918 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5918:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d591a:	b510      	push	{r4, lr}
   d591c:	460b      	mov	r3, r1
   d591e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5920:	d007      	beq.n	d5932 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5922:	6809      	ldr	r1, [r1, #0]
   d5924:	b119      	cbz	r1, d592e <_ZN6StringaSERKS_+0x16>
   d5926:	689a      	ldr	r2, [r3, #8]
   d5928:	f7ff ffcb 	bl	d58c2 <_ZN6String4copyEPKcj>
   d592c:	e001      	b.n	d5932 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d592e:	f7ff ffa0 	bl	d5872 <_ZN6String10invalidateEv>

	return *this;
}
   d5932:	4620      	mov	r0, r4
   d5934:	bd10      	pop	{r4, pc}

000d5936 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5936:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5938:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d593a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d593c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d593e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5940:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5942:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5944:	f7ff ffe8 	bl	d5918 <_ZN6StringaSERKS_>
}
   d5948:	4620      	mov	r0, r4
   d594a:	bd10      	pop	{r4, pc}

000d594c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d594c:	b538      	push	{r3, r4, r5, lr}
   d594e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5950:	460c      	mov	r4, r1
   d5952:	b141      	cbz	r1, d5966 <_ZN6StringaSEPKc+0x1a>
   d5954:	4608      	mov	r0, r1
   d5956:	f001 fcea 	bl	d732e <strlen>
   d595a:	4621      	mov	r1, r4
   d595c:	4602      	mov	r2, r0
   d595e:	4628      	mov	r0, r5
   d5960:	f7ff ffaf 	bl	d58c2 <_ZN6String4copyEPKcj>
   d5964:	e001      	b.n	d596a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5966:	f7ff ff84 	bl	d5872 <_ZN6String10invalidateEv>

	return *this;
}
   d596a:	4628      	mov	r0, r5
   d596c:	bd38      	pop	{r3, r4, r5, pc}

000d596e <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d596e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5970:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5972:	b08a      	sub	sp, #40	; 0x28
   d5974:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5976:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5978:	6043      	str	r3, [r0, #4]
	len = 0;
   d597a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d597c:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d597e:	b2c8      	uxtb	r0, r1
   d5980:	a901      	add	r1, sp, #4
   d5982:	f7ff ff0b 	bl	d579c <_Z4dtoadhPc>
        *this = buf;
   d5986:	a901      	add	r1, sp, #4
   d5988:	4620      	mov	r0, r4
   d598a:	f7ff ffdf 	bl	d594c <_ZN6StringaSEPKc>
}
   d598e:	4620      	mov	r0, r4
   d5990:	b00a      	add	sp, #40	; 0x28
   d5992:	bd10      	pop	{r4, pc}

000d5994 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5994:	b570      	push	{r4, r5, r6, lr}
   d5996:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5998:	460e      	mov	r6, r1
   d599a:	b909      	cbnz	r1, d59a0 <_ZN6String6concatEPKcj+0xc>
   d599c:	2000      	movs	r0, #0
   d599e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d59a0:	b16a      	cbz	r2, d59be <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d59a2:	6883      	ldr	r3, [r0, #8]
   d59a4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d59a6:	4629      	mov	r1, r5
   d59a8:	f7ff ff7a 	bl	d58a0 <_ZN6String7reserveEj>
   d59ac:	2800      	cmp	r0, #0
   d59ae:	d0f5      	beq.n	d599c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d59b0:	6820      	ldr	r0, [r4, #0]
   d59b2:	68a3      	ldr	r3, [r4, #8]
   d59b4:	4631      	mov	r1, r6
   d59b6:	4418      	add	r0, r3
   d59b8:	f001 fc96 	bl	d72e8 <strcpy>
	len = newlen;
   d59bc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d59be:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d59c0:	bd70      	pop	{r4, r5, r6, pc}

000d59c2 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d59c2:	688a      	ldr	r2, [r1, #8]
   d59c4:	6809      	ldr	r1, [r1, #0]
   d59c6:	f7ff bfe5 	b.w	d5994 <_ZN6String6concatEPKcj>

000d59ca <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d59ca:	b538      	push	{r3, r4, r5, lr}
   d59cc:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d59ce:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d59d0:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d59d2:	b141      	cbz	r1, d59e6 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d59d4:	f001 fcab 	bl	d732e <strlen>
   d59d8:	4621      	mov	r1, r4
   d59da:	4602      	mov	r2, r0
   d59dc:	4628      	mov	r0, r5
}
   d59de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d59e2:	f7ff bfd7 	b.w	d5994 <_ZN6String6concatEPKcj>
}
   d59e6:	bd38      	pop	{r3, r4, r5, pc}

000d59e8 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d59e8:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d59ea:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d59ec:	4604      	mov	r4, r0
   d59ee:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
   d59f0:	4669      	mov	r1, sp
   d59f2:	f000 f9d0 	bl	d5d96 <itoa>
	return concat(buf, strlen(buf));
   d59f6:	4668      	mov	r0, sp
   d59f8:	f001 fc99 	bl	d732e <strlen>
   d59fc:	4669      	mov	r1, sp
   d59fe:	4602      	mov	r2, r0
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff ffc7 	bl	d5994 <_ZN6String6concatEPKcj>
}
   d5a06:	b002      	add	sp, #8
   d5a08:	bd10      	pop	{r4, pc}

000d5a0a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5a0a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5a0c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5a0e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5a10:	b912      	cbnz	r2, d5a18 <_ZNK6String6equalsEPKc+0xe>
   d5a12:	b919      	cbnz	r1, d5a1c <_ZNK6String6equalsEPKc+0x12>
   d5a14:	2001      	movs	r0, #1
   d5a16:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5a18:	b911      	cbnz	r1, d5a20 <_ZNK6String6equalsEPKc+0x16>
   d5a1a:	6803      	ldr	r3, [r0, #0]
   d5a1c:	7818      	ldrb	r0, [r3, #0]
   d5a1e:	e002      	b.n	d5a26 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5a20:	6800      	ldr	r0, [r0, #0]
   d5a22:	f001 fc57 	bl	d72d4 <strcmp>
   d5a26:	fab0 f080 	clz	r0, r0
   d5a2a:	0940      	lsrs	r0, r0, #5
}
   d5a2c:	bd08      	pop	{r3, pc}

000d5a2e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a2e:	b510      	push	{r4, lr}
   d5a30:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a32:	6800      	ldr	r0, [r0, #0]
   d5a34:	b118      	cbz	r0, d5a3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5a36:	f7fe ff71 	bl	d491c <free>
            wakeupSource_ = nullptr;
   d5a3a:	2300      	movs	r3, #0
   d5a3c:	6023      	str	r3, [r4, #0]
   d5a3e:	bd10      	pop	{r4, pc}

000d5a40 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a40:	b510      	push	{r4, lr}
   d5a42:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5a44:	f7ff fff3 	bl	d5a2e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a4c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a4e:	4c09      	ldr	r4, [pc, #36]	; (d5a74 <_GLOBAL__sub_I_System+0x28>)
   d5a50:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a52:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a56:	6020      	str	r0, [r4, #0]
   d5a58:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a5a:	71a0      	strb	r0, [r4, #6]
   d5a5c:	8120      	strh	r0, [r4, #8]
   d5a5e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a60:	f7fe feb0 	bl	d47c4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a64:	4620      	mov	r0, r4
   d5a66:	4a04      	ldr	r2, [pc, #16]	; (d5a78 <_GLOBAL__sub_I_System+0x2c>)
   d5a68:	4904      	ldr	r1, [pc, #16]	; (d5a7c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a6e:	f000 bae9 	b.w	d6044 <__aeabi_atexit>
   d5a72:	bf00      	nop
   d5a74:	2003e5d0 	.word	0x2003e5d0
   d5a78:	2003e330 	.word	0x2003e330
   d5a7c:	000d5a41 	.word	0x000d5a41

000d5a80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a80:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a86:	601a      	str	r2, [r3, #0]
   d5a88:	4770      	bx	lr
   d5a8a:	bf00      	nop
   d5a8c:	2003e2c0 	.word	0x2003e2c0
   d5a90:	2003e5dc 	.word	0x2003e5dc

000d5a94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a94:	4770      	bx	lr

000d5a96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a96:	7441      	strb	r1, [r0, #17]
   d5a98:	4770      	bx	lr

000d5a9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a9c:	7c00      	ldrb	r0, [r0, #16]
   d5a9e:	f7fe fe51 	bl	d4744 <HAL_USART_Available_Data_For_Write>
}
   d5aa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aa6:	bd08      	pop	{r3, pc}

000d5aa8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5aa8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5aaa:	7c00      	ldrb	r0, [r0, #16]
   d5aac:	f7fe fe22 	bl	d46f4 <HAL_USART_Available_Data>
}
   d5ab0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ab4:	bd08      	pop	{r3, pc}

000d5ab6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5ab6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5ab8:	7c00      	ldrb	r0, [r0, #16]
   d5aba:	f7fe fe2b 	bl	d4714 <HAL_USART_Peek_Data>
}
   d5abe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ac2:	bf28      	it	cs
   d5ac4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ac8:	bd08      	pop	{r3, pc}

000d5aca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5aca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7fe fe19 	bl	d4704 <HAL_USART_Read_Data>
}
   d5ad2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ad6:	bf28      	it	cs
   d5ad8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5adc:	bd08      	pop	{r3, pc}

000d5ade <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ade:	7c00      	ldrb	r0, [r0, #16]
   d5ae0:	f7fe be20 	b.w	d4724 <HAL_USART_Flush_Data>

000d5ae4 <_ZN11USARTSerialD0Ev>:
   d5ae4:	b510      	push	{r4, lr}
   d5ae6:	2114      	movs	r1, #20
   d5ae8:	4604      	mov	r4, r0
   d5aea:	f000 fab0 	bl	d604e <_ZdlPvj>
   d5aee:	4620      	mov	r0, r4
   d5af0:	bd10      	pop	{r4, pc}

000d5af2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5af2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5af4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5af6:	4604      	mov	r4, r0
   d5af8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5afa:	b925      	cbnz	r5, d5b06 <_ZN11USARTSerial5writeEh+0x14>
   d5afc:	7c00      	ldrb	r0, [r0, #16]
   d5afe:	f7fe fe21 	bl	d4744 <HAL_USART_Available_Data_For_Write>
   d5b02:	2800      	cmp	r0, #0
   d5b04:	dd05      	ble.n	d5b12 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b06:	4631      	mov	r1, r6
   d5b08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b0e:	f7fe bde9 	b.w	d46e4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b12:	4628      	mov	r0, r5
   d5b14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b18:	b510      	push	{r4, lr}
   d5b1a:	4604      	mov	r4, r0
   d5b1c:	4608      	mov	r0, r1
   d5b1e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b20:	2200      	movs	r2, #0
   d5b22:	6062      	str	r2, [r4, #4]
   d5b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b28:	60a2      	str	r2, [r4, #8]
   d5b2a:	4a05      	ldr	r2, [pc, #20]	; (d5b40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b2c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b2e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b30:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b32:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b34:	461a      	mov	r2, r3
   d5b36:	f7fe fdcd 	bl	d46d4 <HAL_USART_Init>
}
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	bd10      	pop	{r4, pc}
   d5b3e:	bf00      	nop
   d5b40:	000d762c 	.word	0x000d762c

000d5b44 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b44:	7c00      	ldrb	r0, [r0, #16]
   d5b46:	f7fe bdf5 	b.w	d4734 <HAL_USART_Is_Enabled>
	...

000d5b4c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b4c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b4e:	4d0c      	ldr	r5, [pc, #48]	; (d5b80 <_Z22__fetch_global_Serial1v+0x34>)
   d5b50:	6829      	ldr	r1, [r5, #0]
   d5b52:	f011 0401 	ands.w	r4, r1, #1
   d5b56:	d111      	bne.n	d5b7c <_Z22__fetch_global_Serial1v+0x30>
   d5b58:	4628      	mov	r0, r5
   d5b5a:	f7fe faa2 	bl	d40a2 <__cxa_guard_acquire>
   d5b5e:	b168      	cbz	r0, d5b7c <_Z22__fetch_global_Serial1v+0x30>
   d5b60:	4a08      	ldr	r2, [pc, #32]	; (d5b84 <_Z22__fetch_global_Serial1v+0x38>)
   d5b62:	4b09      	ldr	r3, [pc, #36]	; (d5b88 <_Z22__fetch_global_Serial1v+0x3c>)
   d5b64:	4809      	ldr	r0, [pc, #36]	; (d5b8c <_Z22__fetch_global_Serial1v+0x40>)
   d5b66:	4621      	mov	r1, r4
   d5b68:	f7ff ffd6 	bl	d5b18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b6c:	4628      	mov	r0, r5
   d5b6e:	f7fe fa9d 	bl	d40ac <__cxa_guard_release>
   d5b72:	4a07      	ldr	r2, [pc, #28]	; (d5b90 <_Z22__fetch_global_Serial1v+0x44>)
   d5b74:	4907      	ldr	r1, [pc, #28]	; (d5b94 <_Z22__fetch_global_Serial1v+0x48>)
   d5b76:	4805      	ldr	r0, [pc, #20]	; (d5b8c <_Z22__fetch_global_Serial1v+0x40>)
   d5b78:	f000 fa64 	bl	d6044 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b7c:	4803      	ldr	r0, [pc, #12]	; (d5b8c <_Z22__fetch_global_Serial1v+0x40>)
   d5b7e:	bd38      	pop	{r3, r4, r5, pc}
   d5b80:	2003e678 	.word	0x2003e678
   d5b84:	2003e67c 	.word	0x2003e67c
   d5b88:	2003e5f4 	.word	0x2003e5f4
   d5b8c:	2003e5e0 	.word	0x2003e5e0
   d5b90:	2003e330 	.word	0x2003e330
   d5b94:	000d5a95 	.word	0x000d5a95

000d5b98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b98:	7441      	strb	r1, [r0, #17]
   d5b9a:	4770      	bx	lr

000d5b9c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b9e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ba0:	2100      	movs	r1, #0
   d5ba2:	7c00      	ldrb	r0, [r0, #16]
   d5ba4:	f7fe fdf6 	bl	d4794 <HAL_USB_USART_Receive_Data>
}
   d5ba8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bac:	bf28      	it	cs
   d5bae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5bb2:	bd08      	pop	{r3, pc}

000d5bb4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5bb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5bb6:	2101      	movs	r1, #1
   d5bb8:	7c00      	ldrb	r0, [r0, #16]
   d5bba:	f7fe fdeb 	bl	d4794 <HAL_USB_USART_Receive_Data>
}
   d5bbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bc2:	bf28      	it	cs
   d5bc4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5bc8:	bd08      	pop	{r3, pc}

000d5bca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bcc:	7c00      	ldrb	r0, [r0, #16]
   d5bce:	f7fe fdd9 	bl	d4784 <HAL_USB_USART_Available_Data_For_Write>
}
   d5bd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bd6:	bd08      	pop	{r3, pc}

000d5bd8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5bd8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5bda:	7c00      	ldrb	r0, [r0, #16]
   d5bdc:	f7fe fdca 	bl	d4774 <HAL_USB_USART_Available_Data>
}
   d5be0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5be4:	bd08      	pop	{r3, pc}

000d5be6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5be6:	7c00      	ldrb	r0, [r0, #16]
   d5be8:	f7fe bde4 	b.w	d47b4 <HAL_USB_USART_Flush_Data>

000d5bec <_ZN9USBSerialD0Ev>:
   d5bec:	b510      	push	{r4, lr}
   d5bee:	2114      	movs	r1, #20
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	f000 fa2c 	bl	d604e <_ZdlPvj>
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bfa:	b538      	push	{r3, r4, r5, lr}
   d5bfc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bfe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c00:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c02:	f7fe fdbf 	bl	d4784 <HAL_USB_USART_Available_Data_For_Write>
   d5c06:	2800      	cmp	r0, #0
   d5c08:	dc01      	bgt.n	d5c0e <_ZN9USBSerial5writeEh+0x14>
   d5c0a:	7c60      	ldrb	r0, [r4, #17]
   d5c0c:	b128      	cbz	r0, d5c1a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c0e:	4629      	mov	r1, r5
   d5c10:	7c20      	ldrb	r0, [r4, #16]
   d5c12:	f7fe fdc7 	bl	d47a4 <HAL_USB_USART_Send_Data>
   d5c16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c1a:	bd38      	pop	{r3, r4, r5, pc}

000d5c1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
   d5c20:	2300      	movs	r3, #0
   d5c22:	6063      	str	r3, [r4, #4]
   d5c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c28:	60a3      	str	r3, [r4, #8]
   d5c2a:	4b05      	ldr	r3, [pc, #20]	; (d5c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c2c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c2e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c30:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c32:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c34:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c36:	4611      	mov	r1, r2
   d5c38:	f7fe fd8c 	bl	d4754 <HAL_USB_USART_Init>
}
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	bd10      	pop	{r4, pc}
   d5c40:	000d765c 	.word	0x000d765c

000d5c44 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c44:	2200      	movs	r2, #0
   d5c46:	7c00      	ldrb	r0, [r0, #16]
   d5c48:	f7fe bd8c 	b.w	d4764 <HAL_USB_USART_Begin>

000d5c4c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c4e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c50:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c52:	2100      	movs	r1, #0
   d5c54:	f001 fb0d 	bl	d7272 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c58:	4620      	mov	r0, r4
   d5c5a:	bd10      	pop	{r4, pc}

000d5c5c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c5c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c5e:	4d0e      	ldr	r5, [pc, #56]	; (d5c98 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c60:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c62:	a801      	add	r0, sp, #4
   d5c64:	f7ff fff2 	bl	d5c4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c68:	6829      	ldr	r1, [r5, #0]
   d5c6a:	f011 0401 	ands.w	r4, r1, #1
   d5c6e:	d110      	bne.n	d5c92 <_Z16_fetch_usbserialv+0x36>
   d5c70:	4628      	mov	r0, r5
   d5c72:	f7fe fa16 	bl	d40a2 <__cxa_guard_acquire>
   d5c76:	b160      	cbz	r0, d5c92 <_Z16_fetch_usbserialv+0x36>
   d5c78:	aa01      	add	r2, sp, #4
   d5c7a:	4621      	mov	r1, r4
   d5c7c:	4807      	ldr	r0, [pc, #28]	; (d5c9c <_Z16_fetch_usbserialv+0x40>)
   d5c7e:	f7ff ffcd 	bl	d5c1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c82:	4628      	mov	r0, r5
   d5c84:	f7fe fa12 	bl	d40ac <__cxa_guard_release>
   d5c88:	4a05      	ldr	r2, [pc, #20]	; (d5ca0 <_Z16_fetch_usbserialv+0x44>)
   d5c8a:	4906      	ldr	r1, [pc, #24]	; (d5ca4 <_Z16_fetch_usbserialv+0x48>)
   d5c8c:	4803      	ldr	r0, [pc, #12]	; (d5c9c <_Z16_fetch_usbserialv+0x40>)
   d5c8e:	f000 f9d9 	bl	d6044 <__aeabi_atexit>
	return _usbserial;
}
   d5c92:	4802      	ldr	r0, [pc, #8]	; (d5c9c <_Z16_fetch_usbserialv+0x40>)
   d5c94:	b007      	add	sp, #28
   d5c96:	bd30      	pop	{r4, r5, pc}
   d5c98:	2003e700 	.word	0x2003e700
   d5c9c:	2003e704 	.word	0x2003e704
   d5ca0:	2003e330 	.word	0x2003e330
   d5ca4:	000d5b9d 	.word	0x000d5b9d

000d5ca8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ca8:	2200      	movs	r2, #0
   d5caa:	4611      	mov	r1, r2
   d5cac:	6840      	ldr	r0, [r0, #4]
   d5cae:	f7fe bdf5 	b.w	d489c <network_ready>

000d5cb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	4611      	mov	r1, r2
   d5cb6:	6840      	ldr	r0, [r0, #4]
   d5cb8:	f7fe be10 	b.w	d48dc <network_listening>

000d5cbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cbc:	2200      	movs	r2, #0
   d5cbe:	4611      	mov	r1, r2
   d5cc0:	6840      	ldr	r0, [r0, #4]
   d5cc2:	f7fe be1b 	b.w	d48fc <network_get_listen_timeout>

000d5cc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	6840      	ldr	r0, [r0, #4]
   d5cca:	f7fe be0f 	b.w	d48ec <network_set_listen_timeout>

000d5cce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cce:	2200      	movs	r2, #0
   d5cd0:	f081 0101 	eor.w	r1, r1, #1
   d5cd4:	6840      	ldr	r0, [r0, #4]
   d5cd6:	f7fe bdf9 	b.w	d48cc <network_listen>

000d5cda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5cda:	2300      	movs	r3, #0
   d5cdc:	461a      	mov	r2, r3
   d5cde:	4619      	mov	r1, r3
   d5ce0:	6840      	ldr	r0, [r0, #4]
   d5ce2:	f7fe bdeb 	b.w	d48bc <network_off>

000d5ce6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5ce6:	2300      	movs	r3, #0
   d5ce8:	461a      	mov	r2, r3
   d5cea:	4619      	mov	r1, r3
   d5cec:	6840      	ldr	r0, [r0, #4]
   d5cee:	f7fe bddd 	b.w	d48ac <network_on>

000d5cf2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cf2:	2200      	movs	r2, #0
   d5cf4:	4611      	mov	r1, r2
   d5cf6:	6840      	ldr	r0, [r0, #4]
   d5cf8:	f7fe bdc0 	b.w	d487c <network_connecting>

000d5cfc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cfc:	2200      	movs	r2, #0
   d5cfe:	2102      	movs	r1, #2
   d5d00:	6840      	ldr	r0, [r0, #4]
   d5d02:	f7fe bdc3 	b.w	d488c <network_disconnect>

000d5d06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d06:	2300      	movs	r3, #0
   d5d08:	461a      	mov	r2, r3
   d5d0a:	6840      	ldr	r0, [r0, #4]
   d5d0c:	f7fe bdae 	b.w	d486c <network_connect>

000d5d10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d10:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d12:	2204      	movs	r2, #4
   d5d14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d16:	4a02      	ldr	r2, [pc, #8]	; (d5d20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d18:	601a      	str	r2, [r3, #0]
   d5d1a:	4770      	bx	lr
   d5d1c:	2003e718 	.word	0x2003e718
   d5d20:	000d768c 	.word	0x000d768c

000d5d24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5d24:	b510      	push	{r4, lr}
   d5d26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5d28:	f001 fb01 	bl	d732e <strlen>
   d5d2c:	3801      	subs	r0, #1
   d5d2e:	1823      	adds	r3, r4, r0
   d5d30:	4620      	mov	r0, r4
	while(i<j){
   d5d32:	4298      	cmp	r0, r3
   d5d34:	d206      	bcs.n	d5d44 <_Z11str_reversePc+0x20>
		c = *i;
   d5d36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5d38:	7819      	ldrb	r1, [r3, #0]
   d5d3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5d3e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5d42:	e7f6      	b.n	d5d32 <_Z11str_reversePc+0xe>
   d5d44:	bd10      	pop	{r4, pc}

000d5d46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5d46:	b570      	push	{r4, r5, r6, lr}
   d5d48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5d4a:	1e91      	subs	r1, r2, #2
   d5d4c:	2922      	cmp	r1, #34	; 0x22
   d5d4e:	d820      	bhi.n	d5d92 <ultoa+0x4c>
   d5d50:	4625      	mov	r5, r4
   d5d52:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5d54:	b910      	cbnz	r0, d5d5c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d56:	4423      	add	r3, r4
            *ptr++ = '0';
   d5d58:	2230      	movs	r2, #48	; 0x30
   d5d5a:	e00e      	b.n	d5d7a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5d5c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5d60:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5d64:	b2c1      	uxtb	r1, r0
   d5d66:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5d6a:	2809      	cmp	r0, #9
                *ptr += '0';
   d5d6c:	bf94      	ite	ls
   d5d6e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5d70:	3157      	addhi	r1, #87	; 0x57
   d5d72:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5d76:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5d78:	e7eb      	b.n	d5d52 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d7a:	4299      	cmp	r1, r3
   d5d7c:	d202      	bcs.n	d5d84 <ultoa+0x3e>
            *ptr++ = '0';
   d5d7e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5d82:	e7fa      	b.n	d5d7a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5d84:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5d86:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5d88:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5d8a:	f7ff ffcb 	bl	d5d24 <_Z11str_reversePc>
	return buffer;
   d5d8e:	4620      	mov	r0, r4
   d5d90:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5d92:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5d94:	bd70      	pop	{r4, r5, r6, pc}

000d5d96 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5d96:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5d98:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5d9a:	460c      	mov	r4, r1
   d5d9c:	4615      	mov	r5, r2
	if(a<0){
   d5d9e:	da0b      	bge.n	d5db8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5da4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5da8:	bf14      	ite	ne
   d5daa:	4258      	negne	r0, r3
   d5dac:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5dae:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5db0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5db2:	462a      	mov	r2, r5
   d5db4:	4419      	add	r1, r3
   d5db6:	e000      	b.n	d5dba <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5db8:	2301      	movs	r3, #1
   d5dba:	f7ff ffc4 	bl	d5d46 <ultoa>
	}
	return buffer;
}
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5dc4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5dc4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5dc6:	4b0c      	ldr	r3, [pc, #48]	; (d5df8 <serialEventRun+0x34>)
   d5dc8:	b133      	cbz	r3, d5dd8 <serialEventRun+0x14>
   d5dca:	f7ff ff47 	bl	d5c5c <_Z16_fetch_usbserialv>
   d5dce:	6803      	ldr	r3, [r0, #0]
   d5dd0:	691b      	ldr	r3, [r3, #16]
   d5dd2:	4798      	blx	r3
   d5dd4:	2800      	cmp	r0, #0
   d5dd6:	dc09      	bgt.n	d5dec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5dd8:	4b08      	ldr	r3, [pc, #32]	; (d5dfc <serialEventRun+0x38>)
   d5dda:	b163      	cbz	r3, d5df6 <serialEventRun+0x32>
   d5ddc:	f7ff feb6 	bl	d5b4c <_Z22__fetch_global_Serial1v>
   d5de0:	6803      	ldr	r3, [r0, #0]
   d5de2:	691b      	ldr	r3, [r3, #16]
   d5de4:	4798      	blx	r3
   d5de6:	2800      	cmp	r0, #0
   d5de8:	dc03      	bgt.n	d5df2 <serialEventRun+0x2e>
   d5dea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5dec:	f3af 8000 	nop.w
   d5df0:	e7f2      	b.n	d5dd8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5df2:	f3af 8000 	nop.w
   d5df6:	bd08      	pop	{r3, pc}
	...

000d5e00 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5e00:	b508      	push	{r3, lr}
	serialEventRun();
   d5e02:	f7ff ffdf 	bl	d5dc4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e06:	f7fe fbcd 	bl	d45a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e0a:	4b01      	ldr	r3, [pc, #4]	; (d5e10 <_post_loop+0x10>)
   d5e0c:	6018      	str	r0, [r3, #0]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	2003e734 	.word	0x2003e734

000d5e14 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e14:	4802      	ldr	r0, [pc, #8]	; (d5e20 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5e16:	4a03      	ldr	r2, [pc, #12]	; (d5e24 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5e18:	4903      	ldr	r1, [pc, #12]	; (d5e28 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5e1a:	1a12      	subs	r2, r2, r0
   d5e1c:	f001 ba1e 	b.w	d725c <memcpy>
   d5e20:	2003f400 	.word	0x2003f400
   d5e24:	2003f404 	.word	0x2003f404
   d5e28:	000d7768 	.word	0x000d7768

000d5e2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e2e:	2300      	movs	r3, #0
   d5e30:	9300      	str	r3, [sp, #0]
   d5e32:	461a      	mov	r2, r3
   d5e34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e38:	f7fe fce6 	bl	d4808 <system_ctrl_set_result>
}
   d5e3c:	b003      	add	sp, #12
   d5e3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e44 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e46:	8843      	ldrh	r3, [r0, #2]
   d5e48:	2b0a      	cmp	r3, #10
   d5e4a:	d008      	beq.n	d5e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e4c:	2b50      	cmp	r3, #80	; 0x50
   d5e4e:	d109      	bne.n	d5e64 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e50:	4b09      	ldr	r3, [pc, #36]	; (d5e78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e52:	681b      	ldr	r3, [r3, #0]
   d5e54:	b13b      	cbz	r3, d5e66 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e56:	b003      	add	sp, #12
   d5e58:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e5c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e5e:	f7ff ffe5 	bl	d5e2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e62:	e006      	b.n	d5e72 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e64:	2300      	movs	r3, #0
   d5e66:	9300      	str	r3, [sp, #0]
   d5e68:	461a      	mov	r2, r3
   d5e6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e6e:	f7fe fccb 	bl	d4808 <system_ctrl_set_result>
        break;
    }
}
   d5e72:	b003      	add	sp, #12
   d5e74:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e78:	2003e720 	.word	0x2003e720

000d5e7c <module_user_init_hook>:

void module_user_init_hook()
{
   d5e7c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e7e:	4c10      	ldr	r4, [pc, #64]	; (d5ec0 <module_user_init_hook+0x44>)
   d5e80:	4d10      	ldr	r5, [pc, #64]	; (d5ec4 <module_user_init_hook+0x48>)
   d5e82:	6823      	ldr	r3, [r4, #0]
   d5e84:	42ab      	cmp	r3, r5
   d5e86:	4b10      	ldr	r3, [pc, #64]	; (d5ec8 <module_user_init_hook+0x4c>)
   d5e88:	bf0c      	ite	eq
   d5e8a:	2201      	moveq	r2, #1
   d5e8c:	2200      	movne	r2, #0
   d5e8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e90:	d002      	beq.n	d5e98 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5e92:	f7ff ffbf 	bl	d5e14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e96:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e98:	f7fe fb7c 	bl	d4594 <HAL_RNG_GetRandomNumber>
   d5e9c:	4604      	mov	r4, r0
    srand(seed);
   d5e9e:	f001 f9f1 	bl	d7284 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ea2:	4b0a      	ldr	r3, [pc, #40]	; (d5ecc <module_user_init_hook+0x50>)
   d5ea4:	b113      	cbz	r3, d5eac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5eac:	2100      	movs	r1, #0
   d5eae:	4807      	ldr	r0, [pc, #28]	; (d5ecc <module_user_init_hook+0x50>)
   d5eb0:	f7fe fcd4 	bl	d485c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5eb4:	2100      	movs	r1, #0
   d5eb6:	4806      	ldr	r0, [pc, #24]	; (d5ed0 <module_user_init_hook+0x54>)
}
   d5eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ebc:	f7fe bc9a 	b.w	d47f4 <system_ctrl_set_app_request_handler>
   d5ec0:	2003f400 	.word	0x2003f400
   d5ec4:	9a271c1e 	.word	0x9a271c1e
   d5ec8:	2003e724 	.word	0x2003e724
   d5ecc:	00000000 	.word	0x00000000
   d5ed0:	000d5e45 	.word	0x000d5e45

000d5ed4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5ed4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5ed6:	4e18      	ldr	r6, [pc, #96]	; (d5f38 <pinAvailable+0x64>)
   d5ed8:	6831      	ldr	r1, [r6, #0]
   d5eda:	f011 0501 	ands.w	r5, r1, #1
   d5ede:	4604      	mov	r4, r0
   d5ee0:	d10a      	bne.n	d5ef8 <pinAvailable+0x24>
   d5ee2:	4630      	mov	r0, r6
   d5ee4:	f7fe f8dd 	bl	d40a2 <__cxa_guard_acquire>
   d5ee8:	b130      	cbz	r0, d5ef8 <pinAvailable+0x24>
   d5eea:	4629      	mov	r1, r5
   d5eec:	4813      	ldr	r0, [pc, #76]	; (d5f3c <pinAvailable+0x68>)
   d5eee:	f7ff fc47 	bl	d5780 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ef2:	4630      	mov	r0, r6
   d5ef4:	f7fe f8da 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5ef8:	4810      	ldr	r0, [pc, #64]	; (d5f3c <pinAvailable+0x68>)
   d5efa:	f7ff fc4b 	bl	d5794 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5efe:	b128      	cbz	r0, d5f0c <pinAvailable+0x38>
   d5f00:	f1a4 030b 	sub.w	r3, r4, #11
   d5f04:	2b02      	cmp	r3, #2
   d5f06:	d801      	bhi.n	d5f0c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5f08:	2000      	movs	r0, #0
   d5f0a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5f0c:	f000 f874 	bl	d5ff8 <_Z19__fetch_global_Wirev>
   d5f10:	f7ff f912 	bl	d5138 <_ZN7TwoWire9isEnabledEv>
   d5f14:	b108      	cbz	r0, d5f1a <pinAvailable+0x46>
   d5f16:	2c01      	cmp	r4, #1
   d5f18:	d9f6      	bls.n	d5f08 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5f1a:	f7ff fe17 	bl	d5b4c <_Z22__fetch_global_Serial1v>
   d5f1e:	f7ff fe11 	bl	d5b44 <_ZN11USARTSerial9isEnabledEv>
   d5f22:	b118      	cbz	r0, d5f2c <pinAvailable+0x58>
   d5f24:	f1a4 0309 	sub.w	r3, r4, #9
   d5f28:	2b01      	cmp	r3, #1
   d5f2a:	d9ed      	bls.n	d5f08 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5f2c:	2c23      	cmp	r4, #35	; 0x23
   d5f2e:	bf8c      	ite	hi
   d5f30:	2000      	movhi	r0, #0
   d5f32:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5f34:	bd70      	pop	{r4, r5, r6, pc}
   d5f36:	bf00      	nop
   d5f38:	2003e728 	.word	0x2003e728
   d5f3c:	2003e72c 	.word	0x2003e72c

000d5f40 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f40:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5f42:	b538      	push	{r3, r4, r5, lr}
   d5f44:	4604      	mov	r4, r0
   d5f46:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f48:	d80a      	bhi.n	d5f60 <pinMode+0x20>
   d5f4a:	29ff      	cmp	r1, #255	; 0xff
   d5f4c:	d008      	beq.n	d5f60 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f4e:	f7ff ffc1 	bl	d5ed4 <pinAvailable>
   d5f52:	b128      	cbz	r0, d5f60 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f54:	4629      	mov	r1, r5
   d5f56:	4620      	mov	r0, r4
}
   d5f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f5c:	f7fe bb3a 	b.w	d45d4 <HAL_Pin_Mode>
   d5f60:	bd38      	pop	{r3, r4, r5, pc}

000d5f62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f62:	b538      	push	{r3, r4, r5, lr}
   d5f64:	4604      	mov	r4, r0
   d5f66:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f68:	f7fe fb3c 	bl	d45e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5f6c:	28ff      	cmp	r0, #255	; 0xff
   d5f6e:	d010      	beq.n	d5f92 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5f70:	2806      	cmp	r0, #6
   d5f72:	d804      	bhi.n	d5f7e <digitalWrite+0x1c>
   d5f74:	234d      	movs	r3, #77	; 0x4d
   d5f76:	fa23 f000 	lsr.w	r0, r3, r0
   d5f7a:	07c3      	lsls	r3, r0, #31
   d5f7c:	d409      	bmi.n	d5f92 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f7e:	4620      	mov	r0, r4
   d5f80:	f7ff ffa8 	bl	d5ed4 <pinAvailable>
   d5f84:	b128      	cbz	r0, d5f92 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f86:	4629      	mov	r1, r5
   d5f88:	4620      	mov	r0, r4
}
   d5f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f8e:	f7fe bb31 	b.w	d45f4 <HAL_GPIO_Write>
   d5f92:	bd38      	pop	{r3, r4, r5, pc}

000d5f94 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5f94:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5f96:	b510      	push	{r4, lr}
   d5f98:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5f9a:	bf9c      	itt	ls
   d5f9c:	340e      	addls	r4, #14
   d5f9e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	f7ff ff97 	bl	d5ed4 <pinAvailable>
   d5fa6:	b150      	cbz	r0, d5fbe <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5fa8:	2103      	movs	r1, #3
   d5faa:	4620      	mov	r0, r4
   d5fac:	f7fe fb0a 	bl	d45c4 <HAL_Validate_Pin_Function>
   d5fb0:	2803      	cmp	r0, #3
   d5fb2:	d104      	bne.n	d5fbe <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5fb4:	4620      	mov	r0, r4
}
   d5fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5fba:	f7fe bb23 	b.w	d4604 <HAL_ADC_Read>
}
   d5fbe:	2000      	movs	r0, #0
   d5fc0:	bd10      	pop	{r4, pc}
	...

000d5fc4 <_Z17acquireWireBufferv>:
   d5fc4:	b570      	push	{r4, r5, r6, lr}
   d5fc6:	4604      	mov	r4, r0
   d5fc8:	2514      	movs	r5, #20
   d5fca:	462a      	mov	r2, r5
   d5fcc:	4e09      	ldr	r6, [pc, #36]	; (d5ff4 <_Z17acquireWireBufferv+0x30>)
   d5fce:	2100      	movs	r1, #0
   d5fd0:	f001 f94f 	bl	d7272 <memset>
   d5fd4:	8025      	strh	r5, [r4, #0]
   d5fd6:	2520      	movs	r5, #32
   d5fd8:	4631      	mov	r1, r6
   d5fda:	60a5      	str	r5, [r4, #8]
   d5fdc:	6125      	str	r5, [r4, #16]
   d5fde:	4628      	mov	r0, r5
   d5fe0:	f000 f84f 	bl	d6082 <_ZnajRKSt9nothrow_t>
   d5fe4:	4631      	mov	r1, r6
   d5fe6:	6060      	str	r0, [r4, #4]
   d5fe8:	4628      	mov	r0, r5
   d5fea:	f000 f84a 	bl	d6082 <_ZnajRKSt9nothrow_t>
   d5fee:	60e0      	str	r0, [r4, #12]
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd70      	pop	{r4, r5, r6, pc}
   d5ff4:	000d76b8 	.word	0x000d76b8

000d5ff8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ff8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ffa:	4d0e      	ldr	r5, [pc, #56]	; (d6034 <_Z19__fetch_global_Wirev+0x3c>)
   d5ffc:	6829      	ldr	r1, [r5, #0]
   d5ffe:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6002:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6004:	d113      	bne.n	d602e <_Z19__fetch_global_Wirev+0x36>
   d6006:	4628      	mov	r0, r5
   d6008:	f7fe f84b 	bl	d40a2 <__cxa_guard_acquire>
   d600c:	b178      	cbz	r0, d602e <_Z19__fetch_global_Wirev+0x36>
   d600e:	a801      	add	r0, sp, #4
   d6010:	f7ff ffd8 	bl	d5fc4 <_Z17acquireWireBufferv>
   d6014:	aa01      	add	r2, sp, #4
   d6016:	4621      	mov	r1, r4
   d6018:	4807      	ldr	r0, [pc, #28]	; (d6038 <_Z19__fetch_global_Wirev+0x40>)
   d601a:	f7ff f87b 	bl	d5114 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d601e:	4628      	mov	r0, r5
   d6020:	f7fe f844 	bl	d40ac <__cxa_guard_release>
   d6024:	4a05      	ldr	r2, [pc, #20]	; (d603c <_Z19__fetch_global_Wirev+0x44>)
   d6026:	4906      	ldr	r1, [pc, #24]	; (d6040 <_Z19__fetch_global_Wirev+0x48>)
   d6028:	4803      	ldr	r0, [pc, #12]	; (d6038 <_Z19__fetch_global_Wirev+0x40>)
   d602a:	f000 f80b 	bl	d6044 <__aeabi_atexit>
	return wire;
}
   d602e:	4802      	ldr	r0, [pc, #8]	; (d6038 <_Z19__fetch_global_Wirev+0x40>)
   d6030:	b007      	add	sp, #28
   d6032:	bd30      	pop	{r4, r5, pc}
   d6034:	2003e738 	.word	0x2003e738
   d6038:	2003e73c 	.word	0x2003e73c
   d603c:	2003e330 	.word	0x2003e330
   d6040:	000d50bd 	.word	0x000d50bd

000d6044 <__aeabi_atexit>:
   d6044:	460b      	mov	r3, r1
   d6046:	4601      	mov	r1, r0
   d6048:	4618      	mov	r0, r3
   d604a:	f001 b8f9 	b.w	d7240 <__cxa_atexit>

000d604e <_ZdlPvj>:
   d604e:	f7fe b824 	b.w	d409a <_ZdlPv>
	...

000d6054 <_ZSt15get_new_handlerv>:
   d6054:	4b02      	ldr	r3, [pc, #8]	; (d6060 <_ZSt15get_new_handlerv+0xc>)
   d6056:	6818      	ldr	r0, [r3, #0]
   d6058:	f3bf 8f5f 	dmb	sy
   d605c:	4770      	bx	lr
   d605e:	bf00      	nop
   d6060:	2003e750 	.word	0x2003e750

000d6064 <_ZnwjRKSt9nothrow_t>:
   d6064:	b510      	push	{r4, lr}
   d6066:	2800      	cmp	r0, #0
   d6068:	bf14      	ite	ne
   d606a:	4604      	movne	r4, r0
   d606c:	2401      	moveq	r4, #1
   d606e:	4620      	mov	r0, r4
   d6070:	f7fe fc4c 	bl	d490c <malloc>
   d6074:	b920      	cbnz	r0, d6080 <_ZnwjRKSt9nothrow_t+0x1c>
   d6076:	f7ff ffed 	bl	d6054 <_ZSt15get_new_handlerv>
   d607a:	b108      	cbz	r0, d6080 <_ZnwjRKSt9nothrow_t+0x1c>
   d607c:	4780      	blx	r0
   d607e:	e7f6      	b.n	d606e <_ZnwjRKSt9nothrow_t+0xa>
   d6080:	bd10      	pop	{r4, pc}

000d6082 <_ZnajRKSt9nothrow_t>:
   d6082:	f7ff bfef 	b.w	d6064 <_ZnwjRKSt9nothrow_t>

000d6086 <_ZSt25__throw_bad_function_callv>:
   d6086:	b508      	push	{r3, lr}
   d6088:	f7fe fc58 	bl	d493c <abort>

000d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d608c:	4b24      	ldr	r3, [pc, #144]	; (d6120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d0      	lsls	r0, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b22      	ldr	r3, [pc, #136]	; (d6124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d1      	lsls	r1, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b20      	ldr	r3, [pc, #128]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d2      	lsls	r2, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4b1e      	ldr	r3, [pc, #120]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d0      	lsls	r0, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b1c      	ldr	r3, [pc, #112]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d1      	lsls	r1, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4b1a      	ldr	r3, [pc, #104]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d2      	lsls	r2, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b18      	ldr	r3, [pc, #96]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d0      	lsls	r0, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b16      	ldr	r3, [pc, #88]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d1      	lsls	r1, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b14      	ldr	r3, [pc, #80]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d2      	lsls	r2, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b12      	ldr	r3, [pc, #72]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d0      	lsls	r0, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b10      	ldr	r3, [pc, #64]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d1      	lsls	r1, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b0e      	ldr	r3, [pc, #56]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d2      	lsls	r2, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4770      	bx	lr
   d611e:	bf00      	nop
   d6120:	2003e780 	.word	0x2003e780
   d6124:	2003e77c 	.word	0x2003e77c
   d6128:	2003e778 	.word	0x2003e778
   d612c:	2003e774 	.word	0x2003e774
   d6130:	2003e770 	.word	0x2003e770
   d6134:	2003e76c 	.word	0x2003e76c
   d6138:	2003e768 	.word	0x2003e768
   d613c:	2003e764 	.word	0x2003e764
   d6140:	2003e760 	.word	0x2003e760
   d6144:	2003e75c 	.word	0x2003e75c
   d6148:	2003e758 	.word	0x2003e758
   d614c:	2003e754 	.word	0x2003e754

000d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6150:	4b18      	ldr	r3, [pc, #96]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6152:	681a      	ldr	r2, [r3, #0]
   d6154:	07d1      	lsls	r1, r2, #31
   d6156:	bf5c      	itt	pl
   d6158:	2201      	movpl	r2, #1
   d615a:	601a      	strpl	r2, [r3, #0]
   d615c:	4b16      	ldr	r3, [pc, #88]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d615e:	681a      	ldr	r2, [r3, #0]
   d6160:	07d2      	lsls	r2, r2, #31
   d6162:	bf5c      	itt	pl
   d6164:	2201      	movpl	r2, #1
   d6166:	601a      	strpl	r2, [r3, #0]
   d6168:	4b14      	ldr	r3, [pc, #80]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d616a:	681a      	ldr	r2, [r3, #0]
   d616c:	07d0      	lsls	r0, r2, #31
   d616e:	bf5c      	itt	pl
   d6170:	2201      	movpl	r2, #1
   d6172:	601a      	strpl	r2, [r3, #0]
   d6174:	4b12      	ldr	r3, [pc, #72]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6176:	681a      	ldr	r2, [r3, #0]
   d6178:	07d1      	lsls	r1, r2, #31
   d617a:	bf5c      	itt	pl
   d617c:	2201      	movpl	r2, #1
   d617e:	601a      	strpl	r2, [r3, #0]
   d6180:	4b10      	ldr	r3, [pc, #64]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d2      	lsls	r2, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b0e      	ldr	r3, [pc, #56]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d0      	lsls	r0, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b0c      	ldr	r3, [pc, #48]	; (d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d1      	lsls	r1, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b0a      	ldr	r3, [pc, #40]	; (d61d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d2      	lsls	r2, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4770      	bx	lr
   d61b2:	bf00      	nop
   d61b4:	2003e7a0 	.word	0x2003e7a0
   d61b8:	2003e79c 	.word	0x2003e79c
   d61bc:	2003e798 	.word	0x2003e798
   d61c0:	2003e794 	.word	0x2003e794
   d61c4:	2003e790 	.word	0x2003e790
   d61c8:	2003e78c 	.word	0x2003e78c
   d61cc:	2003e788 	.word	0x2003e788
   d61d0:	2003e784 	.word	0x2003e784

000d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61d4:	4b18      	ldr	r3, [pc, #96]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d1      	lsls	r1, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b16      	ldr	r3, [pc, #88]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d2      	lsls	r2, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b14      	ldr	r3, [pc, #80]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d0      	lsls	r0, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b12      	ldr	r3, [pc, #72]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d1      	lsls	r1, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b10      	ldr	r3, [pc, #64]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d2      	lsls	r2, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b0e      	ldr	r3, [pc, #56]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d0      	lsls	r0, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b0c      	ldr	r3, [pc, #48]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d1      	lsls	r1, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b0a      	ldr	r3, [pc, #40]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d2      	lsls	r2, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4770      	bx	lr
   d6236:	bf00      	nop
   d6238:	2003e7c0 	.word	0x2003e7c0
   d623c:	2003e7bc 	.word	0x2003e7bc
   d6240:	2003e7b8 	.word	0x2003e7b8
   d6244:	2003e7b4 	.word	0x2003e7b4
   d6248:	2003e7b0 	.word	0x2003e7b0
   d624c:	2003e7ac 	.word	0x2003e7ac
   d6250:	2003e7a8 	.word	0x2003e7a8
   d6254:	2003e7a4 	.word	0x2003e7a4

000d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6258:	4b24      	ldr	r3, [pc, #144]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d0      	lsls	r0, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b22      	ldr	r3, [pc, #136]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d1      	lsls	r1, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b20      	ldr	r3, [pc, #128]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d2      	lsls	r2, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4b1e      	ldr	r3, [pc, #120]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d0      	lsls	r0, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4b1c      	ldr	r3, [pc, #112]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	07d1      	lsls	r1, r2, #31
   d628e:	bf5c      	itt	pl
   d6290:	2201      	movpl	r2, #1
   d6292:	601a      	strpl	r2, [r3, #0]
   d6294:	4b1a      	ldr	r3, [pc, #104]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6296:	681a      	ldr	r2, [r3, #0]
   d6298:	07d2      	lsls	r2, r2, #31
   d629a:	bf5c      	itt	pl
   d629c:	2201      	movpl	r2, #1
   d629e:	601a      	strpl	r2, [r3, #0]
   d62a0:	4b18      	ldr	r3, [pc, #96]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d62a2:	681a      	ldr	r2, [r3, #0]
   d62a4:	07d0      	lsls	r0, r2, #31
   d62a6:	bf5c      	itt	pl
   d62a8:	2201      	movpl	r2, #1
   d62aa:	601a      	strpl	r2, [r3, #0]
   d62ac:	4b16      	ldr	r3, [pc, #88]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62ae:	681a      	ldr	r2, [r3, #0]
   d62b0:	07d1      	lsls	r1, r2, #31
   d62b2:	bf5c      	itt	pl
   d62b4:	2201      	movpl	r2, #1
   d62b6:	601a      	strpl	r2, [r3, #0]
   d62b8:	4b14      	ldr	r3, [pc, #80]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62ba:	681a      	ldr	r2, [r3, #0]
   d62bc:	07d2      	lsls	r2, r2, #31
   d62be:	bf5c      	itt	pl
   d62c0:	2201      	movpl	r2, #1
   d62c2:	601a      	strpl	r2, [r3, #0]
   d62c4:	4b12      	ldr	r3, [pc, #72]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d0      	lsls	r0, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b10      	ldr	r3, [pc, #64]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d1      	lsls	r1, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4b0e      	ldr	r3, [pc, #56]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62de:	681a      	ldr	r2, [r3, #0]
   d62e0:	07d2      	lsls	r2, r2, #31
   d62e2:	bf5c      	itt	pl
   d62e4:	2201      	movpl	r2, #1
   d62e6:	601a      	strpl	r2, [r3, #0]
   d62e8:	4770      	bx	lr
   d62ea:	bf00      	nop
   d62ec:	2003e7f0 	.word	0x2003e7f0
   d62f0:	2003e7ec 	.word	0x2003e7ec
   d62f4:	2003e7e8 	.word	0x2003e7e8
   d62f8:	2003e7e4 	.word	0x2003e7e4
   d62fc:	2003e7e0 	.word	0x2003e7e0
   d6300:	2003e7dc 	.word	0x2003e7dc
   d6304:	2003e7d8 	.word	0x2003e7d8
   d6308:	2003e7d4 	.word	0x2003e7d4
   d630c:	2003e7d0 	.word	0x2003e7d0
   d6310:	2003e7cc 	.word	0x2003e7cc
   d6314:	2003e7c8 	.word	0x2003e7c8
   d6318:	2003e7c4 	.word	0x2003e7c4

000d631c <sqrt>:
   d631c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6320:	ed2d 8b02 	vpush	{d8}
   d6324:	b08b      	sub	sp, #44	; 0x2c
   d6326:	ec55 4b10 	vmov	r4, r5, d0
   d632a:	f000 f857 	bl	d63dc <__ieee754_sqrt>
   d632e:	4b29      	ldr	r3, [pc, #164]	; (d63d4 <sqrt+0xb8>)
   d6330:	eeb0 8a40 	vmov.f32	s16, s0
   d6334:	eef0 8a60 	vmov.f32	s17, s1
   d6338:	f993 6000 	ldrsb.w	r6, [r3]
   d633c:	1c73      	adds	r3, r6, #1
   d633e:	d012      	beq.n	d6366 <sqrt+0x4a>
   d6340:	4622      	mov	r2, r4
   d6342:	462b      	mov	r3, r5
   d6344:	4620      	mov	r0, r4
   d6346:	4629      	mov	r1, r5
   d6348:	f000 fd6c 	bl	d6e24 <__aeabi_dcmpun>
   d634c:	4607      	mov	r7, r0
   d634e:	b950      	cbnz	r0, d6366 <sqrt+0x4a>
   d6350:	f04f 0800 	mov.w	r8, #0
   d6354:	f04f 0900 	mov.w	r9, #0
   d6358:	4620      	mov	r0, r4
   d635a:	4629      	mov	r1, r5
   d635c:	4642      	mov	r2, r8
   d635e:	464b      	mov	r3, r9
   d6360:	f000 fd38 	bl	d6dd4 <__aeabi_dcmplt>
   d6364:	b940      	cbnz	r0, d6378 <sqrt+0x5c>
   d6366:	eeb0 0a48 	vmov.f32	s0, s16
   d636a:	eef0 0a68 	vmov.f32	s1, s17
   d636e:	b00b      	add	sp, #44	; 0x2c
   d6370:	ecbd 8b02 	vpop	{d8}
   d6374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6378:	4b17      	ldr	r3, [pc, #92]	; (d63d8 <sqrt+0xbc>)
   d637a:	9708      	str	r7, [sp, #32]
   d637c:	2201      	movs	r2, #1
   d637e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6382:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d6386:	e88d 000c 	stmia.w	sp, {r2, r3}
   d638a:	b1b6      	cbz	r6, d63ba <sqrt+0x9e>
   d638c:	4642      	mov	r2, r8
   d638e:	464b      	mov	r3, r9
   d6390:	4640      	mov	r0, r8
   d6392:	4649      	mov	r1, r9
   d6394:	f000 fbd6 	bl	d6b44 <__aeabi_ddiv>
   d6398:	2e02      	cmp	r6, #2
   d639a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d639e:	d10e      	bne.n	d63be <sqrt+0xa2>
   d63a0:	f7fe fadc 	bl	d495c <__errno>
   d63a4:	2321      	movs	r3, #33	; 0x21
   d63a6:	6003      	str	r3, [r0, #0]
   d63a8:	9b08      	ldr	r3, [sp, #32]
   d63aa:	b973      	cbnz	r3, d63ca <sqrt+0xae>
   d63ac:	ed9d 0b06 	vldr	d0, [sp, #24]
   d63b0:	b00b      	add	sp, #44	; 0x2c
   d63b2:	ecbd 8b02 	vpop	{d8}
   d63b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d63ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d63be:	4668      	mov	r0, sp
   d63c0:	f000 f8dc 	bl	d657c <matherr>
   d63c4:	2800      	cmp	r0, #0
   d63c6:	d1ef      	bne.n	d63a8 <sqrt+0x8c>
   d63c8:	e7ea      	b.n	d63a0 <sqrt+0x84>
   d63ca:	f7fe fac7 	bl	d495c <__errno>
   d63ce:	9b08      	ldr	r3, [sp, #32]
   d63d0:	6003      	str	r3, [r0, #0]
   d63d2:	e7eb      	b.n	d63ac <sqrt+0x90>
   d63d4:	2003e2c4 	.word	0x2003e2c4
   d63d8:	000d76bc 	.word	0x000d76bc

000d63dc <__ieee754_sqrt>:
   d63dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63e0:	4965      	ldr	r1, [pc, #404]	; (d6578 <__ieee754_sqrt+0x19c>)
   d63e2:	ec55 4b10 	vmov	r4, r5, d0
   d63e6:	460e      	mov	r6, r1
   d63e8:	4029      	ands	r1, r5
   d63ea:	42b1      	cmp	r1, r6
   d63ec:	f000 8097 	beq.w	d651e <__ieee754_sqrt+0x142>
   d63f0:	2d00      	cmp	r5, #0
   d63f2:	462b      	mov	r3, r5
   d63f4:	ee10 2a10 	vmov	r2, s0
   d63f8:	dd74      	ble.n	d64e4 <__ieee754_sqrt+0x108>
   d63fa:	152f      	asrs	r7, r5, #20
   d63fc:	d07f      	beq.n	d64fe <__ieee754_sqrt+0x122>
   d63fe:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d6402:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6406:	07f9      	lsls	r1, r7, #31
   d6408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d640c:	d465      	bmi.n	d64da <__ieee754_sqrt+0xfe>
   d640e:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6412:	2600      	movs	r6, #0
   d6414:	440b      	add	r3, r1
   d6416:	107f      	asrs	r7, r7, #1
   d6418:	0052      	lsls	r2, r2, #1
   d641a:	46b6      	mov	lr, r6
   d641c:	2016      	movs	r0, #22
   d641e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6422:	eb0e 0401 	add.w	r4, lr, r1
   d6426:	429c      	cmp	r4, r3
   d6428:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d642c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6430:	dc03      	bgt.n	d643a <__ieee754_sqrt+0x5e>
   d6432:	1b1b      	subs	r3, r3, r4
   d6434:	eb04 0e01 	add.w	lr, r4, r1
   d6438:	440e      	add	r6, r1
   d643a:	3801      	subs	r0, #1
   d643c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6440:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6444:	d1ed      	bne.n	d6422 <__ieee754_sqrt+0x46>
   d6446:	4684      	mov	ip, r0
   d6448:	2420      	movs	r4, #32
   d644a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d644e:	e009      	b.n	d6464 <__ieee754_sqrt+0x88>
   d6450:	d020      	beq.n	d6494 <__ieee754_sqrt+0xb8>
   d6452:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6456:	3c01      	subs	r4, #1
   d6458:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d645c:	442b      	add	r3, r5
   d645e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6462:	d020      	beq.n	d64a6 <__ieee754_sqrt+0xca>
   d6464:	459e      	cmp	lr, r3
   d6466:	eb01 050c 	add.w	r5, r1, ip
   d646a:	daf1      	bge.n	d6450 <__ieee754_sqrt+0x74>
   d646c:	2d00      	cmp	r5, #0
   d646e:	eb05 0c01 	add.w	ip, r5, r1
   d6472:	db09      	blt.n	d6488 <__ieee754_sqrt+0xac>
   d6474:	46f0      	mov	r8, lr
   d6476:	4295      	cmp	r5, r2
   d6478:	ebce 0303 	rsb	r3, lr, r3
   d647c:	d900      	bls.n	d6480 <__ieee754_sqrt+0xa4>
   d647e:	3b01      	subs	r3, #1
   d6480:	1b52      	subs	r2, r2, r5
   d6482:	4408      	add	r0, r1
   d6484:	46c6      	mov	lr, r8
   d6486:	e7e4      	b.n	d6452 <__ieee754_sqrt+0x76>
   d6488:	f1bc 0f00 	cmp.w	ip, #0
   d648c:	dbf2      	blt.n	d6474 <__ieee754_sqrt+0x98>
   d648e:	f10e 0801 	add.w	r8, lr, #1
   d6492:	e7f0      	b.n	d6476 <__ieee754_sqrt+0x9a>
   d6494:	4295      	cmp	r5, r2
   d6496:	d81e      	bhi.n	d64d6 <__ieee754_sqrt+0xfa>
   d6498:	2d00      	cmp	r5, #0
   d649a:	eb05 0c01 	add.w	ip, r5, r1
   d649e:	db50      	blt.n	d6542 <__ieee754_sqrt+0x166>
   d64a0:	4698      	mov	r8, r3
   d64a2:	2300      	movs	r3, #0
   d64a4:	e7ec      	b.n	d6480 <__ieee754_sqrt+0xa4>
   d64a6:	4313      	orrs	r3, r2
   d64a8:	d004      	beq.n	d64b4 <__ieee754_sqrt+0xd8>
   d64aa:	1c42      	adds	r2, r0, #1
   d64ac:	d04d      	beq.n	d654a <__ieee754_sqrt+0x16e>
   d64ae:	f000 0301 	and.w	r3, r0, #1
   d64b2:	4418      	add	r0, r3
   d64b4:	0840      	lsrs	r0, r0, #1
   d64b6:	1071      	asrs	r1, r6, #1
   d64b8:	07f3      	lsls	r3, r6, #31
   d64ba:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d64be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d64c2:	bf48      	it	mi
   d64c4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d64c8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d64cc:	4602      	mov	r2, r0
   d64ce:	ec43 2b10 	vmov	d0, r2, r3
   d64d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64d6:	4673      	mov	r3, lr
   d64d8:	e7bb      	b.n	d6452 <__ieee754_sqrt+0x76>
   d64da:	005b      	lsls	r3, r3, #1
   d64dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d64e0:	0052      	lsls	r2, r2, #1
   d64e2:	e794      	b.n	d640e <__ieee754_sqrt+0x32>
   d64e4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d64e8:	4321      	orrs	r1, r4
   d64ea:	d028      	beq.n	d653e <__ieee754_sqrt+0x162>
   d64ec:	bbad      	cbnz	r5, d655a <__ieee754_sqrt+0x17e>
   d64ee:	462f      	mov	r7, r5
   d64f0:	0ad3      	lsrs	r3, r2, #11
   d64f2:	3f15      	subs	r7, #21
   d64f4:	0552      	lsls	r2, r2, #21
   d64f6:	2b00      	cmp	r3, #0
   d64f8:	d0fa      	beq.n	d64f0 <__ieee754_sqrt+0x114>
   d64fa:	02dd      	lsls	r5, r3, #11
   d64fc:	d428      	bmi.n	d6550 <__ieee754_sqrt+0x174>
   d64fe:	2100      	movs	r1, #0
   d6500:	e000      	b.n	d6504 <__ieee754_sqrt+0x128>
   d6502:	4601      	mov	r1, r0
   d6504:	005b      	lsls	r3, r3, #1
   d6506:	02dc      	lsls	r4, r3, #11
   d6508:	f101 0001 	add.w	r0, r1, #1
   d650c:	d5f9      	bpl.n	d6502 <__ieee754_sqrt+0x126>
   d650e:	f1c0 0420 	rsb	r4, r0, #32
   d6512:	fa22 f404 	lsr.w	r4, r2, r4
   d6516:	4323      	orrs	r3, r4
   d6518:	1a7f      	subs	r7, r7, r1
   d651a:	4082      	lsls	r2, r0
   d651c:	e76f      	b.n	d63fe <__ieee754_sqrt+0x22>
   d651e:	ee10 2a10 	vmov	r2, s0
   d6522:	462b      	mov	r3, r5
   d6524:	ee10 0a10 	vmov	r0, s0
   d6528:	4629      	mov	r1, r5
   d652a:	f000 f9e1 	bl	d68f0 <__aeabi_dmul>
   d652e:	4622      	mov	r2, r4
   d6530:	462b      	mov	r3, r5
   d6532:	f000 f82b 	bl	d658c <__adddf3>
   d6536:	ec41 0b10 	vmov	d0, r0, r1
   d653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6542:	f1bc 0f00 	cmp.w	ip, #0
   d6546:	daa2      	bge.n	d648e <__ieee754_sqrt+0xb2>
   d6548:	e7aa      	b.n	d64a0 <__ieee754_sqrt+0xc4>
   d654a:	3601      	adds	r6, #1
   d654c:	4620      	mov	r0, r4
   d654e:	e7b2      	b.n	d64b6 <__ieee754_sqrt+0xda>
   d6550:	2420      	movs	r4, #32
   d6552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6556:	2000      	movs	r0, #0
   d6558:	e7db      	b.n	d6512 <__ieee754_sqrt+0x136>
   d655a:	ee10 2a10 	vmov	r2, s0
   d655e:	462b      	mov	r3, r5
   d6560:	4620      	mov	r0, r4
   d6562:	4629      	mov	r1, r5
   d6564:	f000 f810 	bl	d6588 <__aeabi_dsub>
   d6568:	4602      	mov	r2, r0
   d656a:	460b      	mov	r3, r1
   d656c:	f000 faea 	bl	d6b44 <__aeabi_ddiv>
   d6570:	ec41 0b10 	vmov	d0, r0, r1
   d6574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6578:	7ff00000 	.word	0x7ff00000

000d657c <matherr>:
   d657c:	2000      	movs	r0, #0
   d657e:	4770      	bx	lr

000d6580 <__aeabi_drsub>:
   d6580:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6584:	e002      	b.n	d658c <__adddf3>
   d6586:	bf00      	nop

000d6588 <__aeabi_dsub>:
   d6588:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d658c <__adddf3>:
   d658c:	b530      	push	{r4, r5, lr}
   d658e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6592:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6596:	ea94 0f05 	teq	r4, r5
   d659a:	bf08      	it	eq
   d659c:	ea90 0f02 	teqeq	r0, r2
   d65a0:	bf1f      	itttt	ne
   d65a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d65a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d65aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d65ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d65b2:	f000 80e2 	beq.w	d677a <__adddf3+0x1ee>
   d65b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d65ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d65be:	bfb8      	it	lt
   d65c0:	426d      	neglt	r5, r5
   d65c2:	dd0c      	ble.n	d65de <__adddf3+0x52>
   d65c4:	442c      	add	r4, r5
   d65c6:	ea80 0202 	eor.w	r2, r0, r2
   d65ca:	ea81 0303 	eor.w	r3, r1, r3
   d65ce:	ea82 0000 	eor.w	r0, r2, r0
   d65d2:	ea83 0101 	eor.w	r1, r3, r1
   d65d6:	ea80 0202 	eor.w	r2, r0, r2
   d65da:	ea81 0303 	eor.w	r3, r1, r3
   d65de:	2d36      	cmp	r5, #54	; 0x36
   d65e0:	bf88      	it	hi
   d65e2:	bd30      	pophi	{r4, r5, pc}
   d65e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d65f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d65f4:	d002      	beq.n	d65fc <__adddf3+0x70>
   d65f6:	4240      	negs	r0, r0
   d65f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6600:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6604:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6608:	d002      	beq.n	d6610 <__adddf3+0x84>
   d660a:	4252      	negs	r2, r2
   d660c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6610:	ea94 0f05 	teq	r4, r5
   d6614:	f000 80a7 	beq.w	d6766 <__adddf3+0x1da>
   d6618:	f1a4 0401 	sub.w	r4, r4, #1
   d661c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6620:	db0d      	blt.n	d663e <__adddf3+0xb2>
   d6622:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6626:	fa22 f205 	lsr.w	r2, r2, r5
   d662a:	1880      	adds	r0, r0, r2
   d662c:	f141 0100 	adc.w	r1, r1, #0
   d6630:	fa03 f20e 	lsl.w	r2, r3, lr
   d6634:	1880      	adds	r0, r0, r2
   d6636:	fa43 f305 	asr.w	r3, r3, r5
   d663a:	4159      	adcs	r1, r3
   d663c:	e00e      	b.n	d665c <__adddf3+0xd0>
   d663e:	f1a5 0520 	sub.w	r5, r5, #32
   d6642:	f10e 0e20 	add.w	lr, lr, #32
   d6646:	2a01      	cmp	r2, #1
   d6648:	fa03 fc0e 	lsl.w	ip, r3, lr
   d664c:	bf28      	it	cs
   d664e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6652:	fa43 f305 	asr.w	r3, r3, r5
   d6656:	18c0      	adds	r0, r0, r3
   d6658:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d665c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6660:	d507      	bpl.n	d6672 <__adddf3+0xe6>
   d6662:	f04f 0e00 	mov.w	lr, #0
   d6666:	f1dc 0c00 	rsbs	ip, ip, #0
   d666a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d666e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6672:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6676:	d31b      	bcc.n	d66b0 <__adddf3+0x124>
   d6678:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d667c:	d30c      	bcc.n	d6698 <__adddf3+0x10c>
   d667e:	0849      	lsrs	r1, r1, #1
   d6680:	ea5f 0030 	movs.w	r0, r0, rrx
   d6684:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6688:	f104 0401 	add.w	r4, r4, #1
   d668c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6690:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6694:	f080 809a 	bcs.w	d67cc <__adddf3+0x240>
   d6698:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d669c:	bf08      	it	eq
   d669e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66a2:	f150 0000 	adcs.w	r0, r0, #0
   d66a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66aa:	ea41 0105 	orr.w	r1, r1, r5
   d66ae:	bd30      	pop	{r4, r5, pc}
   d66b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d66b4:	4140      	adcs	r0, r0
   d66b6:	eb41 0101 	adc.w	r1, r1, r1
   d66ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66be:	f1a4 0401 	sub.w	r4, r4, #1
   d66c2:	d1e9      	bne.n	d6698 <__adddf3+0x10c>
   d66c4:	f091 0f00 	teq	r1, #0
   d66c8:	bf04      	itt	eq
   d66ca:	4601      	moveq	r1, r0
   d66cc:	2000      	moveq	r0, #0
   d66ce:	fab1 f381 	clz	r3, r1
   d66d2:	bf08      	it	eq
   d66d4:	3320      	addeq	r3, #32
   d66d6:	f1a3 030b 	sub.w	r3, r3, #11
   d66da:	f1b3 0220 	subs.w	r2, r3, #32
   d66de:	da0c      	bge.n	d66fa <__adddf3+0x16e>
   d66e0:	320c      	adds	r2, #12
   d66e2:	dd08      	ble.n	d66f6 <__adddf3+0x16a>
   d66e4:	f102 0c14 	add.w	ip, r2, #20
   d66e8:	f1c2 020c 	rsb	r2, r2, #12
   d66ec:	fa01 f00c 	lsl.w	r0, r1, ip
   d66f0:	fa21 f102 	lsr.w	r1, r1, r2
   d66f4:	e00c      	b.n	d6710 <__adddf3+0x184>
   d66f6:	f102 0214 	add.w	r2, r2, #20
   d66fa:	bfd8      	it	le
   d66fc:	f1c2 0c20 	rsble	ip, r2, #32
   d6700:	fa01 f102 	lsl.w	r1, r1, r2
   d6704:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6708:	bfdc      	itt	le
   d670a:	ea41 010c 	orrle.w	r1, r1, ip
   d670e:	4090      	lslle	r0, r2
   d6710:	1ae4      	subs	r4, r4, r3
   d6712:	bfa2      	ittt	ge
   d6714:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6718:	4329      	orrge	r1, r5
   d671a:	bd30      	popge	{r4, r5, pc}
   d671c:	ea6f 0404 	mvn.w	r4, r4
   d6720:	3c1f      	subs	r4, #31
   d6722:	da1c      	bge.n	d675e <__adddf3+0x1d2>
   d6724:	340c      	adds	r4, #12
   d6726:	dc0e      	bgt.n	d6746 <__adddf3+0x1ba>
   d6728:	f104 0414 	add.w	r4, r4, #20
   d672c:	f1c4 0220 	rsb	r2, r4, #32
   d6730:	fa20 f004 	lsr.w	r0, r0, r4
   d6734:	fa01 f302 	lsl.w	r3, r1, r2
   d6738:	ea40 0003 	orr.w	r0, r0, r3
   d673c:	fa21 f304 	lsr.w	r3, r1, r4
   d6740:	ea45 0103 	orr.w	r1, r5, r3
   d6744:	bd30      	pop	{r4, r5, pc}
   d6746:	f1c4 040c 	rsb	r4, r4, #12
   d674a:	f1c4 0220 	rsb	r2, r4, #32
   d674e:	fa20 f002 	lsr.w	r0, r0, r2
   d6752:	fa01 f304 	lsl.w	r3, r1, r4
   d6756:	ea40 0003 	orr.w	r0, r0, r3
   d675a:	4629      	mov	r1, r5
   d675c:	bd30      	pop	{r4, r5, pc}
   d675e:	fa21 f004 	lsr.w	r0, r1, r4
   d6762:	4629      	mov	r1, r5
   d6764:	bd30      	pop	{r4, r5, pc}
   d6766:	f094 0f00 	teq	r4, #0
   d676a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d676e:	bf06      	itte	eq
   d6770:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6774:	3401      	addeq	r4, #1
   d6776:	3d01      	subne	r5, #1
   d6778:	e74e      	b.n	d6618 <__adddf3+0x8c>
   d677a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d677e:	bf18      	it	ne
   d6780:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6784:	d029      	beq.n	d67da <__adddf3+0x24e>
   d6786:	ea94 0f05 	teq	r4, r5
   d678a:	bf08      	it	eq
   d678c:	ea90 0f02 	teqeq	r0, r2
   d6790:	d005      	beq.n	d679e <__adddf3+0x212>
   d6792:	ea54 0c00 	orrs.w	ip, r4, r0
   d6796:	bf04      	itt	eq
   d6798:	4619      	moveq	r1, r3
   d679a:	4610      	moveq	r0, r2
   d679c:	bd30      	pop	{r4, r5, pc}
   d679e:	ea91 0f03 	teq	r1, r3
   d67a2:	bf1e      	ittt	ne
   d67a4:	2100      	movne	r1, #0
   d67a6:	2000      	movne	r0, #0
   d67a8:	bd30      	popne	{r4, r5, pc}
   d67aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d67ae:	d105      	bne.n	d67bc <__adddf3+0x230>
   d67b0:	0040      	lsls	r0, r0, #1
   d67b2:	4149      	adcs	r1, r1
   d67b4:	bf28      	it	cs
   d67b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d67ba:	bd30      	pop	{r4, r5, pc}
   d67bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d67c0:	bf3c      	itt	cc
   d67c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d67c6:	bd30      	popcc	{r4, r5, pc}
   d67c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d67d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67d4:	f04f 0000 	mov.w	r0, #0
   d67d8:	bd30      	pop	{r4, r5, pc}
   d67da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67de:	bf1a      	itte	ne
   d67e0:	4619      	movne	r1, r3
   d67e2:	4610      	movne	r0, r2
   d67e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d67e8:	bf1c      	itt	ne
   d67ea:	460b      	movne	r3, r1
   d67ec:	4602      	movne	r2, r0
   d67ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67f2:	bf06      	itte	eq
   d67f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d67f8:	ea91 0f03 	teqeq	r1, r3
   d67fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6800:	bd30      	pop	{r4, r5, pc}
   d6802:	bf00      	nop

000d6804 <__aeabi_ui2d>:
   d6804:	f090 0f00 	teq	r0, #0
   d6808:	bf04      	itt	eq
   d680a:	2100      	moveq	r1, #0
   d680c:	4770      	bxeq	lr
   d680e:	b530      	push	{r4, r5, lr}
   d6810:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6814:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6818:	f04f 0500 	mov.w	r5, #0
   d681c:	f04f 0100 	mov.w	r1, #0
   d6820:	e750      	b.n	d66c4 <__adddf3+0x138>
   d6822:	bf00      	nop

000d6824 <__aeabi_i2d>:
   d6824:	f090 0f00 	teq	r0, #0
   d6828:	bf04      	itt	eq
   d682a:	2100      	moveq	r1, #0
   d682c:	4770      	bxeq	lr
   d682e:	b530      	push	{r4, r5, lr}
   d6830:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6834:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6838:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d683c:	bf48      	it	mi
   d683e:	4240      	negmi	r0, r0
   d6840:	f04f 0100 	mov.w	r1, #0
   d6844:	e73e      	b.n	d66c4 <__adddf3+0x138>
   d6846:	bf00      	nop

000d6848 <__aeabi_f2d>:
   d6848:	0042      	lsls	r2, r0, #1
   d684a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d684e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6852:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6856:	bf1f      	itttt	ne
   d6858:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d685c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6860:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6864:	4770      	bxne	lr
   d6866:	f092 0f00 	teq	r2, #0
   d686a:	bf14      	ite	ne
   d686c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6870:	4770      	bxeq	lr
   d6872:	b530      	push	{r4, r5, lr}
   d6874:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d687c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6880:	e720      	b.n	d66c4 <__adddf3+0x138>
   d6882:	bf00      	nop

000d6884 <__aeabi_ul2d>:
   d6884:	ea50 0201 	orrs.w	r2, r0, r1
   d6888:	bf08      	it	eq
   d688a:	4770      	bxeq	lr
   d688c:	b530      	push	{r4, r5, lr}
   d688e:	f04f 0500 	mov.w	r5, #0
   d6892:	e00a      	b.n	d68aa <__aeabi_l2d+0x16>

000d6894 <__aeabi_l2d>:
   d6894:	ea50 0201 	orrs.w	r2, r0, r1
   d6898:	bf08      	it	eq
   d689a:	4770      	bxeq	lr
   d689c:	b530      	push	{r4, r5, lr}
   d689e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d68a2:	d502      	bpl.n	d68aa <__aeabi_l2d+0x16>
   d68a4:	4240      	negs	r0, r0
   d68a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d68aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d68b6:	f43f aedc 	beq.w	d6672 <__adddf3+0xe6>
   d68ba:	f04f 0203 	mov.w	r2, #3
   d68be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68c2:	bf18      	it	ne
   d68c4:	3203      	addne	r2, #3
   d68c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68ca:	bf18      	it	ne
   d68cc:	3203      	addne	r2, #3
   d68ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d68d2:	f1c2 0320 	rsb	r3, r2, #32
   d68d6:	fa00 fc03 	lsl.w	ip, r0, r3
   d68da:	fa20 f002 	lsr.w	r0, r0, r2
   d68de:	fa01 fe03 	lsl.w	lr, r1, r3
   d68e2:	ea40 000e 	orr.w	r0, r0, lr
   d68e6:	fa21 f102 	lsr.w	r1, r1, r2
   d68ea:	4414      	add	r4, r2
   d68ec:	e6c1      	b.n	d6672 <__adddf3+0xe6>
   d68ee:	bf00      	nop

000d68f0 <__aeabi_dmul>:
   d68f0:	b570      	push	{r4, r5, r6, lr}
   d68f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68fe:	bf1d      	ittte	ne
   d6900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6904:	ea94 0f0c 	teqne	r4, ip
   d6908:	ea95 0f0c 	teqne	r5, ip
   d690c:	f000 f8de 	bleq	d6acc <__aeabi_dmul+0x1dc>
   d6910:	442c      	add	r4, r5
   d6912:	ea81 0603 	eor.w	r6, r1, r3
   d6916:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d691a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d691e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6922:	bf18      	it	ne
   d6924:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d692c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6930:	d038      	beq.n	d69a4 <__aeabi_dmul+0xb4>
   d6932:	fba0 ce02 	umull	ip, lr, r0, r2
   d6936:	f04f 0500 	mov.w	r5, #0
   d693a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d693e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6942:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6946:	f04f 0600 	mov.w	r6, #0
   d694a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d694e:	f09c 0f00 	teq	ip, #0
   d6952:	bf18      	it	ne
   d6954:	f04e 0e01 	orrne.w	lr, lr, #1
   d6958:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d695c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6960:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6964:	d204      	bcs.n	d6970 <__aeabi_dmul+0x80>
   d6966:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d696a:	416d      	adcs	r5, r5
   d696c:	eb46 0606 	adc.w	r6, r6, r6
   d6970:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6974:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6978:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d697c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6980:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6984:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6988:	bf88      	it	hi
   d698a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d698e:	d81e      	bhi.n	d69ce <__aeabi_dmul+0xde>
   d6990:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6994:	bf08      	it	eq
   d6996:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d699a:	f150 0000 	adcs.w	r0, r0, #0
   d699e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69a2:	bd70      	pop	{r4, r5, r6, pc}
   d69a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d69a8:	ea46 0101 	orr.w	r1, r6, r1
   d69ac:	ea40 0002 	orr.w	r0, r0, r2
   d69b0:	ea81 0103 	eor.w	r1, r1, r3
   d69b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d69b8:	bfc2      	ittt	gt
   d69ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d69be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d69c2:	bd70      	popgt	{r4, r5, r6, pc}
   d69c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d69c8:	f04f 0e00 	mov.w	lr, #0
   d69cc:	3c01      	subs	r4, #1
   d69ce:	f300 80ab 	bgt.w	d6b28 <__aeabi_dmul+0x238>
   d69d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d69d6:	bfde      	ittt	le
   d69d8:	2000      	movle	r0, #0
   d69da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d69de:	bd70      	pople	{r4, r5, r6, pc}
   d69e0:	f1c4 0400 	rsb	r4, r4, #0
   d69e4:	3c20      	subs	r4, #32
   d69e6:	da35      	bge.n	d6a54 <__aeabi_dmul+0x164>
   d69e8:	340c      	adds	r4, #12
   d69ea:	dc1b      	bgt.n	d6a24 <__aeabi_dmul+0x134>
   d69ec:	f104 0414 	add.w	r4, r4, #20
   d69f0:	f1c4 0520 	rsb	r5, r4, #32
   d69f4:	fa00 f305 	lsl.w	r3, r0, r5
   d69f8:	fa20 f004 	lsr.w	r0, r0, r4
   d69fc:	fa01 f205 	lsl.w	r2, r1, r5
   d6a00:	ea40 0002 	orr.w	r0, r0, r2
   d6a04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6a08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a10:	fa21 f604 	lsr.w	r6, r1, r4
   d6a14:	eb42 0106 	adc.w	r1, r2, r6
   d6a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a1c:	bf08      	it	eq
   d6a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a22:	bd70      	pop	{r4, r5, r6, pc}
   d6a24:	f1c4 040c 	rsb	r4, r4, #12
   d6a28:	f1c4 0520 	rsb	r5, r4, #32
   d6a2c:	fa00 f304 	lsl.w	r3, r0, r4
   d6a30:	fa20 f005 	lsr.w	r0, r0, r5
   d6a34:	fa01 f204 	lsl.w	r2, r1, r4
   d6a38:	ea40 0002 	orr.w	r0, r0, r2
   d6a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a44:	f141 0100 	adc.w	r1, r1, #0
   d6a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a4c:	bf08      	it	eq
   d6a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a52:	bd70      	pop	{r4, r5, r6, pc}
   d6a54:	f1c4 0520 	rsb	r5, r4, #32
   d6a58:	fa00 f205 	lsl.w	r2, r0, r5
   d6a5c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a60:	fa20 f304 	lsr.w	r3, r0, r4
   d6a64:	fa01 f205 	lsl.w	r2, r1, r5
   d6a68:	ea43 0302 	orr.w	r3, r3, r2
   d6a6c:	fa21 f004 	lsr.w	r0, r1, r4
   d6a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a74:	fa21 f204 	lsr.w	r2, r1, r4
   d6a78:	ea20 0002 	bic.w	r0, r0, r2
   d6a7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a84:	bf08      	it	eq
   d6a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a8a:	bd70      	pop	{r4, r5, r6, pc}
   d6a8c:	f094 0f00 	teq	r4, #0
   d6a90:	d10f      	bne.n	d6ab2 <__aeabi_dmul+0x1c2>
   d6a92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a96:	0040      	lsls	r0, r0, #1
   d6a98:	eb41 0101 	adc.w	r1, r1, r1
   d6a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6aa0:	bf08      	it	eq
   d6aa2:	3c01      	subeq	r4, #1
   d6aa4:	d0f7      	beq.n	d6a96 <__aeabi_dmul+0x1a6>
   d6aa6:	ea41 0106 	orr.w	r1, r1, r6
   d6aaa:	f095 0f00 	teq	r5, #0
   d6aae:	bf18      	it	ne
   d6ab0:	4770      	bxne	lr
   d6ab2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6ab6:	0052      	lsls	r2, r2, #1
   d6ab8:	eb43 0303 	adc.w	r3, r3, r3
   d6abc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ac0:	bf08      	it	eq
   d6ac2:	3d01      	subeq	r5, #1
   d6ac4:	d0f7      	beq.n	d6ab6 <__aeabi_dmul+0x1c6>
   d6ac6:	ea43 0306 	orr.w	r3, r3, r6
   d6aca:	4770      	bx	lr
   d6acc:	ea94 0f0c 	teq	r4, ip
   d6ad0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ad4:	bf18      	it	ne
   d6ad6:	ea95 0f0c 	teqne	r5, ip
   d6ada:	d00c      	beq.n	d6af6 <__aeabi_dmul+0x206>
   d6adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ae0:	bf18      	it	ne
   d6ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ae6:	d1d1      	bne.n	d6a8c <__aeabi_dmul+0x19c>
   d6ae8:	ea81 0103 	eor.w	r1, r1, r3
   d6aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6af0:	f04f 0000 	mov.w	r0, #0
   d6af4:	bd70      	pop	{r4, r5, r6, pc}
   d6af6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6afa:	bf06      	itte	eq
   d6afc:	4610      	moveq	r0, r2
   d6afe:	4619      	moveq	r1, r3
   d6b00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b04:	d019      	beq.n	d6b3a <__aeabi_dmul+0x24a>
   d6b06:	ea94 0f0c 	teq	r4, ip
   d6b0a:	d102      	bne.n	d6b12 <__aeabi_dmul+0x222>
   d6b0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6b10:	d113      	bne.n	d6b3a <__aeabi_dmul+0x24a>
   d6b12:	ea95 0f0c 	teq	r5, ip
   d6b16:	d105      	bne.n	d6b24 <__aeabi_dmul+0x234>
   d6b18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6b1c:	bf1c      	itt	ne
   d6b1e:	4610      	movne	r0, r2
   d6b20:	4619      	movne	r1, r3
   d6b22:	d10a      	bne.n	d6b3a <__aeabi_dmul+0x24a>
   d6b24:	ea81 0103 	eor.w	r1, r1, r3
   d6b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b34:	f04f 0000 	mov.w	r0, #0
   d6b38:	bd70      	pop	{r4, r5, r6, pc}
   d6b3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b42:	bd70      	pop	{r4, r5, r6, pc}

000d6b44 <__aeabi_ddiv>:
   d6b44:	b570      	push	{r4, r5, r6, lr}
   d6b46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b52:	bf1d      	ittte	ne
   d6b54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b58:	ea94 0f0c 	teqne	r4, ip
   d6b5c:	ea95 0f0c 	teqne	r5, ip
   d6b60:	f000 f8a7 	bleq	d6cb2 <__aeabi_ddiv+0x16e>
   d6b64:	eba4 0405 	sub.w	r4, r4, r5
   d6b68:	ea81 0e03 	eor.w	lr, r1, r3
   d6b6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b74:	f000 8088 	beq.w	d6c88 <__aeabi_ddiv+0x144>
   d6b78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b9c:	429d      	cmp	r5, r3
   d6b9e:	bf08      	it	eq
   d6ba0:	4296      	cmpeq	r6, r2
   d6ba2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6ba6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6baa:	d202      	bcs.n	d6bb2 <__aeabi_ddiv+0x6e>
   d6bac:	085b      	lsrs	r3, r3, #1
   d6bae:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bb2:	1ab6      	subs	r6, r6, r2
   d6bb4:	eb65 0503 	sbc.w	r5, r5, r3
   d6bb8:	085b      	lsrs	r3, r3, #1
   d6bba:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6bc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6bc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bce:	bf22      	ittt	cs
   d6bd0:	1ab6      	subcs	r6, r6, r2
   d6bd2:	4675      	movcs	r5, lr
   d6bd4:	ea40 000c 	orrcs.w	r0, r0, ip
   d6bd8:	085b      	lsrs	r3, r3, #1
   d6bda:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bde:	ebb6 0e02 	subs.w	lr, r6, r2
   d6be2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6be6:	bf22      	ittt	cs
   d6be8:	1ab6      	subcs	r6, r6, r2
   d6bea:	4675      	movcs	r5, lr
   d6bec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6bf0:	085b      	lsrs	r3, r3, #1
   d6bf2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bf6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bfe:	bf22      	ittt	cs
   d6c00:	1ab6      	subcs	r6, r6, r2
   d6c02:	4675      	movcs	r5, lr
   d6c04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6c08:	085b      	lsrs	r3, r3, #1
   d6c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c16:	bf22      	ittt	cs
   d6c18:	1ab6      	subcs	r6, r6, r2
   d6c1a:	4675      	movcs	r5, lr
   d6c1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6c20:	ea55 0e06 	orrs.w	lr, r5, r6
   d6c24:	d018      	beq.n	d6c58 <__aeabi_ddiv+0x114>
   d6c26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6c2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6c2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6c32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6c36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6c3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c42:	d1c0      	bne.n	d6bc6 <__aeabi_ddiv+0x82>
   d6c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c48:	d10b      	bne.n	d6c62 <__aeabi_ddiv+0x11e>
   d6c4a:	ea41 0100 	orr.w	r1, r1, r0
   d6c4e:	f04f 0000 	mov.w	r0, #0
   d6c52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c56:	e7b6      	b.n	d6bc6 <__aeabi_ddiv+0x82>
   d6c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c5c:	bf04      	itt	eq
   d6c5e:	4301      	orreq	r1, r0
   d6c60:	2000      	moveq	r0, #0
   d6c62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c66:	bf88      	it	hi
   d6c68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c6c:	f63f aeaf 	bhi.w	d69ce <__aeabi_dmul+0xde>
   d6c70:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c74:	bf04      	itt	eq
   d6c76:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c7e:	f150 0000 	adcs.w	r0, r0, #0
   d6c82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c86:	bd70      	pop	{r4, r5, r6, pc}
   d6c88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c94:	bfc2      	ittt	gt
   d6c96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c9e:	bd70      	popgt	{r4, r5, r6, pc}
   d6ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ca4:	f04f 0e00 	mov.w	lr, #0
   d6ca8:	3c01      	subs	r4, #1
   d6caa:	e690      	b.n	d69ce <__aeabi_dmul+0xde>
   d6cac:	ea45 0e06 	orr.w	lr, r5, r6
   d6cb0:	e68d      	b.n	d69ce <__aeabi_dmul+0xde>
   d6cb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cb6:	ea94 0f0c 	teq	r4, ip
   d6cba:	bf08      	it	eq
   d6cbc:	ea95 0f0c 	teqeq	r5, ip
   d6cc0:	f43f af3b 	beq.w	d6b3a <__aeabi_dmul+0x24a>
   d6cc4:	ea94 0f0c 	teq	r4, ip
   d6cc8:	d10a      	bne.n	d6ce0 <__aeabi_ddiv+0x19c>
   d6cca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6cce:	f47f af34 	bne.w	d6b3a <__aeabi_dmul+0x24a>
   d6cd2:	ea95 0f0c 	teq	r5, ip
   d6cd6:	f47f af25 	bne.w	d6b24 <__aeabi_dmul+0x234>
   d6cda:	4610      	mov	r0, r2
   d6cdc:	4619      	mov	r1, r3
   d6cde:	e72c      	b.n	d6b3a <__aeabi_dmul+0x24a>
   d6ce0:	ea95 0f0c 	teq	r5, ip
   d6ce4:	d106      	bne.n	d6cf4 <__aeabi_ddiv+0x1b0>
   d6ce6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cea:	f43f aefd 	beq.w	d6ae8 <__aeabi_dmul+0x1f8>
   d6cee:	4610      	mov	r0, r2
   d6cf0:	4619      	mov	r1, r3
   d6cf2:	e722      	b.n	d6b3a <__aeabi_dmul+0x24a>
   d6cf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cf8:	bf18      	it	ne
   d6cfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cfe:	f47f aec5 	bne.w	d6a8c <__aeabi_dmul+0x19c>
   d6d02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6d06:	f47f af0d 	bne.w	d6b24 <__aeabi_dmul+0x234>
   d6d0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6d0e:	f47f aeeb 	bne.w	d6ae8 <__aeabi_dmul+0x1f8>
   d6d12:	e712      	b.n	d6b3a <__aeabi_dmul+0x24a>

000d6d14 <__gedf2>:
   d6d14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6d18:	e006      	b.n	d6d28 <__cmpdf2+0x4>
   d6d1a:	bf00      	nop

000d6d1c <__ledf2>:
   d6d1c:	f04f 0c01 	mov.w	ip, #1
   d6d20:	e002      	b.n	d6d28 <__cmpdf2+0x4>
   d6d22:	bf00      	nop

000d6d24 <__cmpdf2>:
   d6d24:	f04f 0c01 	mov.w	ip, #1
   d6d28:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6d2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d38:	bf18      	it	ne
   d6d3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6d3e:	d01b      	beq.n	d6d78 <__cmpdf2+0x54>
   d6d40:	b001      	add	sp, #4
   d6d42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6d46:	bf0c      	ite	eq
   d6d48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6d4c:	ea91 0f03 	teqne	r1, r3
   d6d50:	bf02      	ittt	eq
   d6d52:	ea90 0f02 	teqeq	r0, r2
   d6d56:	2000      	moveq	r0, #0
   d6d58:	4770      	bxeq	lr
   d6d5a:	f110 0f00 	cmn.w	r0, #0
   d6d5e:	ea91 0f03 	teq	r1, r3
   d6d62:	bf58      	it	pl
   d6d64:	4299      	cmppl	r1, r3
   d6d66:	bf08      	it	eq
   d6d68:	4290      	cmpeq	r0, r2
   d6d6a:	bf2c      	ite	cs
   d6d6c:	17d8      	asrcs	r0, r3, #31
   d6d6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6d72:	f040 0001 	orr.w	r0, r0, #1
   d6d76:	4770      	bx	lr
   d6d78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d80:	d102      	bne.n	d6d88 <__cmpdf2+0x64>
   d6d82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d86:	d107      	bne.n	d6d98 <__cmpdf2+0x74>
   d6d88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d90:	d1d6      	bne.n	d6d40 <__cmpdf2+0x1c>
   d6d92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d96:	d0d3      	beq.n	d6d40 <__cmpdf2+0x1c>
   d6d98:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6d9c:	4770      	bx	lr
   d6d9e:	bf00      	nop

000d6da0 <__aeabi_cdrcmple>:
   d6da0:	4684      	mov	ip, r0
   d6da2:	4610      	mov	r0, r2
   d6da4:	4662      	mov	r2, ip
   d6da6:	468c      	mov	ip, r1
   d6da8:	4619      	mov	r1, r3
   d6daa:	4663      	mov	r3, ip
   d6dac:	e000      	b.n	d6db0 <__aeabi_cdcmpeq>
   d6dae:	bf00      	nop

000d6db0 <__aeabi_cdcmpeq>:
   d6db0:	b501      	push	{r0, lr}
   d6db2:	f7ff ffb7 	bl	d6d24 <__cmpdf2>
   d6db6:	2800      	cmp	r0, #0
   d6db8:	bf48      	it	mi
   d6dba:	f110 0f00 	cmnmi.w	r0, #0
   d6dbe:	bd01      	pop	{r0, pc}

000d6dc0 <__aeabi_dcmpeq>:
   d6dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dc4:	f7ff fff4 	bl	d6db0 <__aeabi_cdcmpeq>
   d6dc8:	bf0c      	ite	eq
   d6dca:	2001      	moveq	r0, #1
   d6dcc:	2000      	movne	r0, #0
   d6dce:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dd2:	bf00      	nop

000d6dd4 <__aeabi_dcmplt>:
   d6dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dd8:	f7ff ffea 	bl	d6db0 <__aeabi_cdcmpeq>
   d6ddc:	bf34      	ite	cc
   d6dde:	2001      	movcc	r0, #1
   d6de0:	2000      	movcs	r0, #0
   d6de2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6de6:	bf00      	nop

000d6de8 <__aeabi_dcmple>:
   d6de8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dec:	f7ff ffe0 	bl	d6db0 <__aeabi_cdcmpeq>
   d6df0:	bf94      	ite	ls
   d6df2:	2001      	movls	r0, #1
   d6df4:	2000      	movhi	r0, #0
   d6df6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dfa:	bf00      	nop

000d6dfc <__aeabi_dcmpge>:
   d6dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e00:	f7ff ffce 	bl	d6da0 <__aeabi_cdrcmple>
   d6e04:	bf94      	ite	ls
   d6e06:	2001      	movls	r0, #1
   d6e08:	2000      	movhi	r0, #0
   d6e0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e0e:	bf00      	nop

000d6e10 <__aeabi_dcmpgt>:
   d6e10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e14:	f7ff ffc4 	bl	d6da0 <__aeabi_cdrcmple>
   d6e18:	bf34      	ite	cc
   d6e1a:	2001      	movcc	r0, #1
   d6e1c:	2000      	movcs	r0, #0
   d6e1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e22:	bf00      	nop

000d6e24 <__aeabi_dcmpun>:
   d6e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e2c:	d102      	bne.n	d6e34 <__aeabi_dcmpun+0x10>
   d6e2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6e32:	d10a      	bne.n	d6e4a <__aeabi_dcmpun+0x26>
   d6e34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e3c:	d102      	bne.n	d6e44 <__aeabi_dcmpun+0x20>
   d6e3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e42:	d102      	bne.n	d6e4a <__aeabi_dcmpun+0x26>
   d6e44:	f04f 0000 	mov.w	r0, #0
   d6e48:	4770      	bx	lr
   d6e4a:	f04f 0001 	mov.w	r0, #1
   d6e4e:	4770      	bx	lr

000d6e50 <__aeabi_d2iz>:
   d6e50:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e58:	d215      	bcs.n	d6e86 <__aeabi_d2iz+0x36>
   d6e5a:	d511      	bpl.n	d6e80 <__aeabi_d2iz+0x30>
   d6e5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e64:	d912      	bls.n	d6e8c <__aeabi_d2iz+0x3c>
   d6e66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e76:	fa23 f002 	lsr.w	r0, r3, r2
   d6e7a:	bf18      	it	ne
   d6e7c:	4240      	negne	r0, r0
   d6e7e:	4770      	bx	lr
   d6e80:	f04f 0000 	mov.w	r0, #0
   d6e84:	4770      	bx	lr
   d6e86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e8a:	d105      	bne.n	d6e98 <__aeabi_d2iz+0x48>
   d6e8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6e90:	bf08      	it	eq
   d6e92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6e96:	4770      	bx	lr
   d6e98:	f04f 0000 	mov.w	r0, #0
   d6e9c:	4770      	bx	lr
   d6e9e:	bf00      	nop

000d6ea0 <__aeabi_d2uiz>:
   d6ea0:	004a      	lsls	r2, r1, #1
   d6ea2:	d211      	bcs.n	d6ec8 <__aeabi_d2uiz+0x28>
   d6ea4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6ea8:	d211      	bcs.n	d6ece <__aeabi_d2uiz+0x2e>
   d6eaa:	d50d      	bpl.n	d6ec8 <__aeabi_d2uiz+0x28>
   d6eac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6eb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6eb4:	d40e      	bmi.n	d6ed4 <__aeabi_d2uiz+0x34>
   d6eb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ebe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6ec2:	fa23 f002 	lsr.w	r0, r3, r2
   d6ec6:	4770      	bx	lr
   d6ec8:	f04f 0000 	mov.w	r0, #0
   d6ecc:	4770      	bx	lr
   d6ece:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6ed2:	d102      	bne.n	d6eda <__aeabi_d2uiz+0x3a>
   d6ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6ed8:	4770      	bx	lr
   d6eda:	f04f 0000 	mov.w	r0, #0
   d6ede:	4770      	bx	lr

000d6ee0 <__aeabi_uldivmod>:
   d6ee0:	b953      	cbnz	r3, d6ef8 <__aeabi_uldivmod+0x18>
   d6ee2:	b94a      	cbnz	r2, d6ef8 <__aeabi_uldivmod+0x18>
   d6ee4:	2900      	cmp	r1, #0
   d6ee6:	bf08      	it	eq
   d6ee8:	2800      	cmpeq	r0, #0
   d6eea:	bf1c      	itt	ne
   d6eec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6ef0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6ef4:	f000 b9a2 	b.w	d723c <__aeabi_idiv0>
   d6ef8:	f1ad 0c08 	sub.w	ip, sp, #8
   d6efc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6f00:	f000 f82a 	bl	d6f58 <__udivmoddi4>
   d6f04:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f0c:	b004      	add	sp, #16
   d6f0e:	4770      	bx	lr

000d6f10 <__aeabi_d2ulz>:
   d6f10:	b5d0      	push	{r4, r6, r7, lr}
   d6f12:	2200      	movs	r2, #0
   d6f14:	4b0e      	ldr	r3, [pc, #56]	; (d6f50 <__aeabi_d2ulz+0x40>)
   d6f16:	4606      	mov	r6, r0
   d6f18:	460f      	mov	r7, r1
   d6f1a:	f7ff fce9 	bl	d68f0 <__aeabi_dmul>
   d6f1e:	f7ff ffbf 	bl	d6ea0 <__aeabi_d2uiz>
   d6f22:	4604      	mov	r4, r0
   d6f24:	f7ff fc6e 	bl	d6804 <__aeabi_ui2d>
   d6f28:	2200      	movs	r2, #0
   d6f2a:	4b0a      	ldr	r3, [pc, #40]	; (d6f54 <__aeabi_d2ulz+0x44>)
   d6f2c:	f7ff fce0 	bl	d68f0 <__aeabi_dmul>
   d6f30:	4602      	mov	r2, r0
   d6f32:	460b      	mov	r3, r1
   d6f34:	4630      	mov	r0, r6
   d6f36:	4639      	mov	r1, r7
   d6f38:	f7ff fb26 	bl	d6588 <__aeabi_dsub>
   d6f3c:	f7ff ffb0 	bl	d6ea0 <__aeabi_d2uiz>
   d6f40:	4623      	mov	r3, r4
   d6f42:	2200      	movs	r2, #0
   d6f44:	ea42 0200 	orr.w	r2, r2, r0
   d6f48:	4610      	mov	r0, r2
   d6f4a:	4619      	mov	r1, r3
   d6f4c:	bdd0      	pop	{r4, r6, r7, pc}
   d6f4e:	bf00      	nop
   d6f50:	3df00000 	.word	0x3df00000
   d6f54:	41f00000 	.word	0x41f00000

000d6f58 <__udivmoddi4>:
   d6f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f5c:	468c      	mov	ip, r1
   d6f5e:	460e      	mov	r6, r1
   d6f60:	4604      	mov	r4, r0
   d6f62:	9d08      	ldr	r5, [sp, #32]
   d6f64:	2b00      	cmp	r3, #0
   d6f66:	d150      	bne.n	d700a <__udivmoddi4+0xb2>
   d6f68:	428a      	cmp	r2, r1
   d6f6a:	4617      	mov	r7, r2
   d6f6c:	d96c      	bls.n	d7048 <__udivmoddi4+0xf0>
   d6f6e:	fab2 fe82 	clz	lr, r2
   d6f72:	f1be 0f00 	cmp.w	lr, #0
   d6f76:	d00b      	beq.n	d6f90 <__udivmoddi4+0x38>
   d6f78:	f1ce 0420 	rsb	r4, lr, #32
   d6f7c:	fa20 f404 	lsr.w	r4, r0, r4
   d6f80:	fa01 f60e 	lsl.w	r6, r1, lr
   d6f84:	ea44 0c06 	orr.w	ip, r4, r6
   d6f88:	fa02 f70e 	lsl.w	r7, r2, lr
   d6f8c:	fa00 f40e 	lsl.w	r4, r0, lr
   d6f90:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6f94:	0c22      	lsrs	r2, r4, #16
   d6f96:	fbbc f0f9 	udiv	r0, ip, r9
   d6f9a:	fa1f f887 	uxth.w	r8, r7
   d6f9e:	fb09 c610 	mls	r6, r9, r0, ip
   d6fa2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6fa6:	fb00 f308 	mul.w	r3, r0, r8
   d6faa:	42b3      	cmp	r3, r6
   d6fac:	d909      	bls.n	d6fc2 <__udivmoddi4+0x6a>
   d6fae:	19f6      	adds	r6, r6, r7
   d6fb0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6fb4:	f080 8122 	bcs.w	d71fc <__udivmoddi4+0x2a4>
   d6fb8:	42b3      	cmp	r3, r6
   d6fba:	f240 811f 	bls.w	d71fc <__udivmoddi4+0x2a4>
   d6fbe:	3802      	subs	r0, #2
   d6fc0:	443e      	add	r6, r7
   d6fc2:	1af6      	subs	r6, r6, r3
   d6fc4:	b2a2      	uxth	r2, r4
   d6fc6:	fbb6 f3f9 	udiv	r3, r6, r9
   d6fca:	fb09 6613 	mls	r6, r9, r3, r6
   d6fce:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6fd2:	fb03 f808 	mul.w	r8, r3, r8
   d6fd6:	45a0      	cmp	r8, r4
   d6fd8:	d909      	bls.n	d6fee <__udivmoddi4+0x96>
   d6fda:	19e4      	adds	r4, r4, r7
   d6fdc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6fe0:	f080 810a 	bcs.w	d71f8 <__udivmoddi4+0x2a0>
   d6fe4:	45a0      	cmp	r8, r4
   d6fe6:	f240 8107 	bls.w	d71f8 <__udivmoddi4+0x2a0>
   d6fea:	3b02      	subs	r3, #2
   d6fec:	443c      	add	r4, r7
   d6fee:	ebc8 0404 	rsb	r4, r8, r4
   d6ff2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6ff6:	2100      	movs	r1, #0
   d6ff8:	2d00      	cmp	r5, #0
   d6ffa:	d062      	beq.n	d70c2 <__udivmoddi4+0x16a>
   d6ffc:	fa24 f40e 	lsr.w	r4, r4, lr
   d7000:	2300      	movs	r3, #0
   d7002:	602c      	str	r4, [r5, #0]
   d7004:	606b      	str	r3, [r5, #4]
   d7006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d700a:	428b      	cmp	r3, r1
   d700c:	d907      	bls.n	d701e <__udivmoddi4+0xc6>
   d700e:	2d00      	cmp	r5, #0
   d7010:	d055      	beq.n	d70be <__udivmoddi4+0x166>
   d7012:	2100      	movs	r1, #0
   d7014:	e885 0041 	stmia.w	r5, {r0, r6}
   d7018:	4608      	mov	r0, r1
   d701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d701e:	fab3 f183 	clz	r1, r3
   d7022:	2900      	cmp	r1, #0
   d7024:	f040 8090 	bne.w	d7148 <__udivmoddi4+0x1f0>
   d7028:	42b3      	cmp	r3, r6
   d702a:	d302      	bcc.n	d7032 <__udivmoddi4+0xda>
   d702c:	4282      	cmp	r2, r0
   d702e:	f200 80f8 	bhi.w	d7222 <__udivmoddi4+0x2ca>
   d7032:	1a84      	subs	r4, r0, r2
   d7034:	eb66 0603 	sbc.w	r6, r6, r3
   d7038:	2001      	movs	r0, #1
   d703a:	46b4      	mov	ip, r6
   d703c:	2d00      	cmp	r5, #0
   d703e:	d040      	beq.n	d70c2 <__udivmoddi4+0x16a>
   d7040:	e885 1010 	stmia.w	r5, {r4, ip}
   d7044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7048:	b912      	cbnz	r2, d7050 <__udivmoddi4+0xf8>
   d704a:	2701      	movs	r7, #1
   d704c:	fbb7 f7f2 	udiv	r7, r7, r2
   d7050:	fab7 fe87 	clz	lr, r7
   d7054:	f1be 0f00 	cmp.w	lr, #0
   d7058:	d135      	bne.n	d70c6 <__udivmoddi4+0x16e>
   d705a:	1bf3      	subs	r3, r6, r7
   d705c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7060:	fa1f fc87 	uxth.w	ip, r7
   d7064:	2101      	movs	r1, #1
   d7066:	fbb3 f0f8 	udiv	r0, r3, r8
   d706a:	0c22      	lsrs	r2, r4, #16
   d706c:	fb08 3610 	mls	r6, r8, r0, r3
   d7070:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7074:	fb0c f300 	mul.w	r3, ip, r0
   d7078:	42b3      	cmp	r3, r6
   d707a:	d907      	bls.n	d708c <__udivmoddi4+0x134>
   d707c:	19f6      	adds	r6, r6, r7
   d707e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7082:	d202      	bcs.n	d708a <__udivmoddi4+0x132>
   d7084:	42b3      	cmp	r3, r6
   d7086:	f200 80ce 	bhi.w	d7226 <__udivmoddi4+0x2ce>
   d708a:	4610      	mov	r0, r2
   d708c:	1af6      	subs	r6, r6, r3
   d708e:	b2a2      	uxth	r2, r4
   d7090:	fbb6 f3f8 	udiv	r3, r6, r8
   d7094:	fb08 6613 	mls	r6, r8, r3, r6
   d7098:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d709c:	fb0c fc03 	mul.w	ip, ip, r3
   d70a0:	45a4      	cmp	ip, r4
   d70a2:	d907      	bls.n	d70b4 <__udivmoddi4+0x15c>
   d70a4:	19e4      	adds	r4, r4, r7
   d70a6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d70aa:	d202      	bcs.n	d70b2 <__udivmoddi4+0x15a>
   d70ac:	45a4      	cmp	ip, r4
   d70ae:	f200 80b5 	bhi.w	d721c <__udivmoddi4+0x2c4>
   d70b2:	4613      	mov	r3, r2
   d70b4:	ebcc 0404 	rsb	r4, ip, r4
   d70b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d70bc:	e79c      	b.n	d6ff8 <__udivmoddi4+0xa0>
   d70be:	4629      	mov	r1, r5
   d70c0:	4628      	mov	r0, r5
   d70c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70c6:	f1ce 0120 	rsb	r1, lr, #32
   d70ca:	fa06 f30e 	lsl.w	r3, r6, lr
   d70ce:	fa07 f70e 	lsl.w	r7, r7, lr
   d70d2:	fa20 f901 	lsr.w	r9, r0, r1
   d70d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d70da:	40ce      	lsrs	r6, r1
   d70dc:	ea49 0903 	orr.w	r9, r9, r3
   d70e0:	fbb6 faf8 	udiv	sl, r6, r8
   d70e4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d70e8:	fb08 661a 	mls	r6, r8, sl, r6
   d70ec:	fa1f fc87 	uxth.w	ip, r7
   d70f0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d70f4:	fb0a f20c 	mul.w	r2, sl, ip
   d70f8:	429a      	cmp	r2, r3
   d70fa:	fa00 f40e 	lsl.w	r4, r0, lr
   d70fe:	d90a      	bls.n	d7116 <__udivmoddi4+0x1be>
   d7100:	19db      	adds	r3, r3, r7
   d7102:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d7106:	f080 8087 	bcs.w	d7218 <__udivmoddi4+0x2c0>
   d710a:	429a      	cmp	r2, r3
   d710c:	f240 8084 	bls.w	d7218 <__udivmoddi4+0x2c0>
   d7110:	f1aa 0a02 	sub.w	sl, sl, #2
   d7114:	443b      	add	r3, r7
   d7116:	1a9b      	subs	r3, r3, r2
   d7118:	fa1f f989 	uxth.w	r9, r9
   d711c:	fbb3 f1f8 	udiv	r1, r3, r8
   d7120:	fb08 3311 	mls	r3, r8, r1, r3
   d7124:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7128:	fb01 f60c 	mul.w	r6, r1, ip
   d712c:	429e      	cmp	r6, r3
   d712e:	d907      	bls.n	d7140 <__udivmoddi4+0x1e8>
   d7130:	19db      	adds	r3, r3, r7
   d7132:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d7136:	d26b      	bcs.n	d7210 <__udivmoddi4+0x2b8>
   d7138:	429e      	cmp	r6, r3
   d713a:	d969      	bls.n	d7210 <__udivmoddi4+0x2b8>
   d713c:	3902      	subs	r1, #2
   d713e:	443b      	add	r3, r7
   d7140:	1b9b      	subs	r3, r3, r6
   d7142:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7146:	e78e      	b.n	d7066 <__udivmoddi4+0x10e>
   d7148:	f1c1 0e20 	rsb	lr, r1, #32
   d714c:	fa22 f40e 	lsr.w	r4, r2, lr
   d7150:	408b      	lsls	r3, r1
   d7152:	4323      	orrs	r3, r4
   d7154:	fa20 f70e 	lsr.w	r7, r0, lr
   d7158:	fa06 f401 	lsl.w	r4, r6, r1
   d715c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7160:	fa26 f60e 	lsr.w	r6, r6, lr
   d7164:	433c      	orrs	r4, r7
   d7166:	fbb6 f9fc 	udiv	r9, r6, ip
   d716a:	0c27      	lsrs	r7, r4, #16
   d716c:	fb0c 6619 	mls	r6, ip, r9, r6
   d7170:	fa1f f883 	uxth.w	r8, r3
   d7174:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7178:	fb09 f708 	mul.w	r7, r9, r8
   d717c:	42b7      	cmp	r7, r6
   d717e:	fa02 f201 	lsl.w	r2, r2, r1
   d7182:	fa00 fa01 	lsl.w	sl, r0, r1
   d7186:	d908      	bls.n	d719a <__udivmoddi4+0x242>
   d7188:	18f6      	adds	r6, r6, r3
   d718a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d718e:	d241      	bcs.n	d7214 <__udivmoddi4+0x2bc>
   d7190:	42b7      	cmp	r7, r6
   d7192:	d93f      	bls.n	d7214 <__udivmoddi4+0x2bc>
   d7194:	f1a9 0902 	sub.w	r9, r9, #2
   d7198:	441e      	add	r6, r3
   d719a:	1bf6      	subs	r6, r6, r7
   d719c:	b2a0      	uxth	r0, r4
   d719e:	fbb6 f4fc 	udiv	r4, r6, ip
   d71a2:	fb0c 6614 	mls	r6, ip, r4, r6
   d71a6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d71aa:	fb04 f808 	mul.w	r8, r4, r8
   d71ae:	45b8      	cmp	r8, r7
   d71b0:	d907      	bls.n	d71c2 <__udivmoddi4+0x26a>
   d71b2:	18ff      	adds	r7, r7, r3
   d71b4:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d71b8:	d228      	bcs.n	d720c <__udivmoddi4+0x2b4>
   d71ba:	45b8      	cmp	r8, r7
   d71bc:	d926      	bls.n	d720c <__udivmoddi4+0x2b4>
   d71be:	3c02      	subs	r4, #2
   d71c0:	441f      	add	r7, r3
   d71c2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d71c6:	ebc8 0707 	rsb	r7, r8, r7
   d71ca:	fba0 8902 	umull	r8, r9, r0, r2
   d71ce:	454f      	cmp	r7, r9
   d71d0:	4644      	mov	r4, r8
   d71d2:	464e      	mov	r6, r9
   d71d4:	d314      	bcc.n	d7200 <__udivmoddi4+0x2a8>
   d71d6:	d029      	beq.n	d722c <__udivmoddi4+0x2d4>
   d71d8:	b365      	cbz	r5, d7234 <__udivmoddi4+0x2dc>
   d71da:	ebba 0304 	subs.w	r3, sl, r4
   d71de:	eb67 0706 	sbc.w	r7, r7, r6
   d71e2:	fa07 fe0e 	lsl.w	lr, r7, lr
   d71e6:	40cb      	lsrs	r3, r1
   d71e8:	40cf      	lsrs	r7, r1
   d71ea:	ea4e 0303 	orr.w	r3, lr, r3
   d71ee:	e885 0088 	stmia.w	r5, {r3, r7}
   d71f2:	2100      	movs	r1, #0
   d71f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71f8:	4613      	mov	r3, r2
   d71fa:	e6f8      	b.n	d6fee <__udivmoddi4+0x96>
   d71fc:	4610      	mov	r0, r2
   d71fe:	e6e0      	b.n	d6fc2 <__udivmoddi4+0x6a>
   d7200:	ebb8 0402 	subs.w	r4, r8, r2
   d7204:	eb69 0603 	sbc.w	r6, r9, r3
   d7208:	3801      	subs	r0, #1
   d720a:	e7e5      	b.n	d71d8 <__udivmoddi4+0x280>
   d720c:	4604      	mov	r4, r0
   d720e:	e7d8      	b.n	d71c2 <__udivmoddi4+0x26a>
   d7210:	4611      	mov	r1, r2
   d7212:	e795      	b.n	d7140 <__udivmoddi4+0x1e8>
   d7214:	4681      	mov	r9, r0
   d7216:	e7c0      	b.n	d719a <__udivmoddi4+0x242>
   d7218:	468a      	mov	sl, r1
   d721a:	e77c      	b.n	d7116 <__udivmoddi4+0x1be>
   d721c:	3b02      	subs	r3, #2
   d721e:	443c      	add	r4, r7
   d7220:	e748      	b.n	d70b4 <__udivmoddi4+0x15c>
   d7222:	4608      	mov	r0, r1
   d7224:	e70a      	b.n	d703c <__udivmoddi4+0xe4>
   d7226:	3802      	subs	r0, #2
   d7228:	443e      	add	r6, r7
   d722a:	e72f      	b.n	d708c <__udivmoddi4+0x134>
   d722c:	45c2      	cmp	sl, r8
   d722e:	d3e7      	bcc.n	d7200 <__udivmoddi4+0x2a8>
   d7230:	463e      	mov	r6, r7
   d7232:	e7d1      	b.n	d71d8 <__udivmoddi4+0x280>
   d7234:	4629      	mov	r1, r5
   d7236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d723a:	bf00      	nop

000d723c <__aeabi_idiv0>:
   d723c:	4770      	bx	lr
   d723e:	bf00      	nop

000d7240 <__cxa_atexit>:
   d7240:	b510      	push	{r4, lr}
   d7242:	4c05      	ldr	r4, [pc, #20]	; (d7258 <__cxa_atexit+0x18>)
   d7244:	4613      	mov	r3, r2
   d7246:	b12c      	cbz	r4, d7254 <__cxa_atexit+0x14>
   d7248:	460a      	mov	r2, r1
   d724a:	4601      	mov	r1, r0
   d724c:	2002      	movs	r0, #2
   d724e:	f3af 8000 	nop.w
   d7252:	bd10      	pop	{r4, pc}
   d7254:	4620      	mov	r0, r4
   d7256:	bd10      	pop	{r4, pc}
   d7258:	00000000 	.word	0x00000000

000d725c <memcpy>:
   d725c:	b510      	push	{r4, lr}
   d725e:	1e43      	subs	r3, r0, #1
   d7260:	440a      	add	r2, r1
   d7262:	4291      	cmp	r1, r2
   d7264:	d004      	beq.n	d7270 <memcpy+0x14>
   d7266:	f811 4b01 	ldrb.w	r4, [r1], #1
   d726a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d726e:	e7f8      	b.n	d7262 <memcpy+0x6>
   d7270:	bd10      	pop	{r4, pc}

000d7272 <memset>:
   d7272:	4402      	add	r2, r0
   d7274:	4603      	mov	r3, r0
   d7276:	4293      	cmp	r3, r2
   d7278:	d002      	beq.n	d7280 <memset+0xe>
   d727a:	f803 1b01 	strb.w	r1, [r3], #1
   d727e:	e7fa      	b.n	d7276 <memset+0x4>
   d7280:	4770      	bx	lr
	...

000d7284 <srand>:
   d7284:	b538      	push	{r3, r4, r5, lr}
   d7286:	4b12      	ldr	r3, [pc, #72]	; (d72d0 <srand+0x4c>)
   d7288:	681c      	ldr	r4, [r3, #0]
   d728a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d728c:	4605      	mov	r5, r0
   d728e:	b9d3      	cbnz	r3, d72c6 <srand+0x42>
   d7290:	2018      	movs	r0, #24
   d7292:	f7fd fb3b 	bl	d490c <malloc>
   d7296:	f243 330e 	movw	r3, #13070	; 0x330e
   d729a:	63a0      	str	r0, [r4, #56]	; 0x38
   d729c:	8003      	strh	r3, [r0, #0]
   d729e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d72a2:	8043      	strh	r3, [r0, #2]
   d72a4:	f241 2334 	movw	r3, #4660	; 0x1234
   d72a8:	8083      	strh	r3, [r0, #4]
   d72aa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d72ae:	80c3      	strh	r3, [r0, #6]
   d72b0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d72b4:	8103      	strh	r3, [r0, #8]
   d72b6:	2305      	movs	r3, #5
   d72b8:	8143      	strh	r3, [r0, #10]
   d72ba:	230b      	movs	r3, #11
   d72bc:	8183      	strh	r3, [r0, #12]
   d72be:	2201      	movs	r2, #1
   d72c0:	2300      	movs	r3, #0
   d72c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d72c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d72c8:	2200      	movs	r2, #0
   d72ca:	611d      	str	r5, [r3, #16]
   d72cc:	615a      	str	r2, [r3, #20]
   d72ce:	bd38      	pop	{r3, r4, r5, pc}
   d72d0:	2003e328 	.word	0x2003e328

000d72d4 <strcmp>:
   d72d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d72d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d72dc:	2a01      	cmp	r2, #1
   d72de:	bf28      	it	cs
   d72e0:	429a      	cmpcs	r2, r3
   d72e2:	d0f7      	beq.n	d72d4 <strcmp>
   d72e4:	1ad0      	subs	r0, r2, r3
   d72e6:	4770      	bx	lr

000d72e8 <strcpy>:
   d72e8:	4603      	mov	r3, r0
   d72ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   d72ee:	f803 2b01 	strb.w	r2, [r3], #1
   d72f2:	2a00      	cmp	r2, #0
   d72f4:	d1f9      	bne.n	d72ea <strcpy+0x2>
   d72f6:	4770      	bx	lr

000d72f8 <strdup>:
   d72f8:	4b02      	ldr	r3, [pc, #8]	; (d7304 <strdup+0xc>)
   d72fa:	4601      	mov	r1, r0
   d72fc:	6818      	ldr	r0, [r3, #0]
   d72fe:	f000 b803 	b.w	d7308 <_strdup_r>
   d7302:	bf00      	nop
   d7304:	2003e328 	.word	0x2003e328

000d7308 <_strdup_r>:
   d7308:	b570      	push	{r4, r5, r6, lr}
   d730a:	4606      	mov	r6, r0
   d730c:	4608      	mov	r0, r1
   d730e:	460c      	mov	r4, r1
   d7310:	f000 f80d 	bl	d732e <strlen>
   d7314:	1c45      	adds	r5, r0, #1
   d7316:	4629      	mov	r1, r5
   d7318:	4630      	mov	r0, r6
   d731a:	f7fd fb17 	bl	d494c <_malloc_r>
   d731e:	4606      	mov	r6, r0
   d7320:	b118      	cbz	r0, d732a <_strdup_r+0x22>
   d7322:	462a      	mov	r2, r5
   d7324:	4621      	mov	r1, r4
   d7326:	f7ff ff99 	bl	d725c <memcpy>
   d732a:	4630      	mov	r0, r6
   d732c:	bd70      	pop	{r4, r5, r6, pc}

000d732e <strlen>:
   d732e:	4603      	mov	r3, r0
   d7330:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7334:	2a00      	cmp	r2, #0
   d7336:	d1fb      	bne.n	d7330 <strlen+0x2>
   d7338:	1a18      	subs	r0, r3, r0
   d733a:	3801      	subs	r0, #1
   d733c:	4770      	bx	lr

000d733e <link_code_end>:
	...

000d7340 <dynalib_user>:
   d7340:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7350:	0000 0000 7274 6575 7b00 2200 7661 7265     ....true.{."aver
   d7360:	6761 5665 6c61 3a22 0022 2c22 2220 6574     ageVal":".", "te
   d7370:	736e 6465 3a22 0022 7d22 5000 6275 696c     nsed":"."}.Publi
   d7380:	6873 6e69 3a67 6500 676d 7000 6275 696c     shing:.emg.publi
   d7390:	6873 7453 7461 0065 7274 6361 536b 6977     shState.trackSwi
   d73a0:	6374 0068 7661 7265 6761 5665 6c61 7400     tch.averageVal.t
   d73b0:	6e65 6573 0064 7274 6361 006b 7661 7265     ensed.track.aver
   d73c0:	6761 2065 6176 756c 2065 203d 7300 6474     age value = .std
   d73d0:	6920 2073 2e00 7020 6572 4176 6776 732b      is .. prevAvg+s
   d73e0:	6474 3d20 0020 202e 7563 7272 6e65 2074     td = .. current 
   d73f0:	7641 2067 203d 5200 4c45 5841 2121 6500     Avg = .RELAX!!.e
   d7400:	3030 6366 3665 3038 3835 3866 6335 6363     00fce68058f85ccc
   d7410:	3465 6430 3735 0030                         e40d570.

000d7418 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7420:	4a2d 000d 4a33 000d 4a89 000d 4a41 000d     -J..3J...J..AJ..
   d7430:	4a2f 000d                                   /J..

000d7434 <_ZTVN5spark13EthernetClassE>:
	...
   d743c:	509f 000d 5095 000d 508b 000d 5081 000d     .P...P...P...P..
   d744c:	5075 000d 5069 000d 505d 000d 5055 000d     uP..iP..]P..UP..
   d745c:	504b 000d 5041 000d 5419 000d               KP..AP...T..

000d7468 <_ZTV7TwoWire>:
	...
   d7470:	50bd 000d 5107 000d 50df 000d 50bf 000d     .P...Q...P...P..
   d7480:	50e7 000d 50ef 000d 50f7 000d 50ff 000d     .P...P...P...P..

000d7490 <_ZTV9IPAddress>:
	...
   d7498:	5151 000d 5141 000d 5143 000d 6162 6475     QQ..AQ..CQ..baud
   d74a8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d74b8:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d74c8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d74d8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d74e8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d74f8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7508:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7518:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d7528:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7538:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d7548:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d7558:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d7568:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d7578:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d7584 <_ZTVN5spark9MeshClassE>:
	...
   d758c:	5293 000d 5289 000d 527f 000d 5275 000d     .R...R...R..uR..
   d759c:	5269 000d 525d 000d 5251 000d 5249 000d     iR..]R..QR..IR..
   d75ac:	523f 000d 5235 000d 5419 000d               ?R..5R...T..

000d75b8 <_ZTVN5spark12NetworkClassE>:
	...
   d75c0:	53b1 000d 53bb 000d 53c5 000d 53cf 000d     .S...S...S...S..
   d75d0:	53d9 000d 53e5 000d 53f1 000d 53fd 000d     .S...S...S...S..
   d75e0:	5405 000d 540f 000d 5419 000d 616e 006e     .T...T...T..nan.
   d75f0:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
   d7600:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d7610:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d7620:	656d 0000                                   me..

000d7624 <_ZTV11USARTSerial>:
	...
   d762c:	5a95 000d 5ae5 000d 5af3 000d 54f9 000d     .Z...Z...Z...T..
   d763c:	5aa9 000d 5acb 000d 5ab7 000d 5adf 000d     .Z...Z...Z...Z..
   d764c:	5a97 000d 5a9b 000d                         .Z...Z..

000d7654 <_ZTV9USBSerial>:
	...
   d765c:	5b9d 000d 5bed 000d 5bfb 000d 54f9 000d     .[...[...[...T..
   d766c:	5bd9 000d 5b9f 000d 5bb5 000d 5be7 000d     .[...[...[...[..
   d767c:	5bcb 000d 5b99 000d                         .[...[..

000d7684 <_ZTVN5spark9WiFiClassE>:
	...
   d768c:	5d07 000d 5cfd 000d 5cf3 000d 5ca9 000d     .]...\...\...\..
   d769c:	5ce7 000d 5cdb 000d 5ccf 000d 5cc7 000d     .\...\...\...\..
   d76ac:	5cbd 000d 5cb3 000d 5419 000d               .\...\...T..

000d76b8 <_ZSt7nothrow>:
   d76b8:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d76c4 <__sf_fake_stdin>:
	...

000d76e4 <__sf_fake_stdout>:
	...

000d7704 <__sf_fake_stderr>:
	...
   d7724:	0043                                        C.

000d7726 <link_const_variable_data_end>:
	...

000d7728 <link_constructors_location>:
   d7728:	000d450d 	.word	0x000d450d
   d772c:	000d4a05 	.word	0x000d4a05
   d7730:	000d50a9 	.word	0x000d50a9
   d7734:	000d5225 	.word	0x000d5225
   d7738:	000d5361 	.word	0x000d5361
   d773c:	000d54e5 	.word	0x000d54e5
   d7740:	000d5765 	.word	0x000d5765
   d7744:	000d5a4d 	.word	0x000d5a4d
   d7748:	000d5a81 	.word	0x000d5a81
   d774c:	000d5d11 	.word	0x000d5d11
   d7750:	000d608d 	.word	0x000d608d
   d7754:	000d6151 	.word	0x000d6151
   d7758:	000d61d5 	.word	0x000d61d5
   d775c:	000d6259 	.word	0x000d6259
